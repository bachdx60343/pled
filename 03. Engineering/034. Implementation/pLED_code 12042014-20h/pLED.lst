CCS PCM C Compiler, Version 5.015, 5967               12-Apr-14 20:34

               Filename:   C:\Users\LongNT\Downloads\pLED_code\pLED.lst

               ROM used:   3834 words (47%)
                           Largest free fragment is 2048
               RAM used:   60 (16%) at main() level
                           88 (24%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.2
001C:  GOTO   01F
001D:  BTFSC  0C.2
001E:  GOTO   05F
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   062
0023:  BTFSS  0B.4
0024:  GOTO   027
0025:  BTFSC  0B.1
0026:  GOTO   053
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   050
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.4
002E:  GOTO   031
002F:  BTFSC  0C.4
0030:  GOTO   056
0031:  MOVLW  8C
0032:  MOVWF  04
0033:  BTFSS  00.5
0034:  GOTO   037
0035:  BTFSC  0C.5
0036:  GOTO   059
0037:  MOVLW  8C
0038:  MOVWF  04
0039:  BTFSS  00.0
003A:  GOTO   03D
003B:  BTFSC  0C.0
003C:  GOTO   05C
003D:  MOVF   22,W
003E:  MOVWF  04
003F:  MOVF   23,W
0040:  MOVWF  77
0041:  MOVF   24,W
0042:  MOVWF  78
0043:  MOVF   25,W
0044:  MOVWF  79
0045:  MOVF   26,W
0046:  MOVWF  7A
0047:  MOVF   27,W
0048:  MOVWF  7B
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   293
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   278
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   2B2
0059:  BCF    0A.3
005A:  BCF    0A.4
005B:  GOTO   2B6
005C:  BCF    0A.3
005D:  BCF    0A.4
005E:  GOTO   2BA
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   2BF
0062:  BCF    0A.3
0063:  BCF    0A.4
0064:  GOTO   322
.................... #include <pLED.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0065:  BCF    0A.0
0066:  BCF    0A.1
0067:  BCF    0A.2
0068:  ADDWF  02,F
0069:  RETLW  F8
006A:  RETLW  03
006B:  RETLW  08
006C:  RETLW  02
006D:  RETLW  F8
006E:  RETLW  03
006F:  RETLW  40
0070:  RETLW  00
0071:  RETLW  20
0072:  RETLW  00
0073:  RETLW  F8
0074:  RETLW  03
0075:  RETLW  C8
0076:  RETLW  03
0077:  RETLW  48
0078:  RETLW  02
0079:  RETLW  78
007A:  RETLW  02
007B:  RETLW  48
007C:  RETLW  02
007D:  RETLW  48
007E:  RETLW  02
007F:  RETLW  F8
0080:  RETLW  03
0081:  RETLW  78
0082:  RETLW  00
0083:  RETLW  40
0084:  RETLW  00
0085:  RETLW  F8
0086:  RETLW  03
0087:  RETLW  78
0088:  RETLW  02
0089:  RETLW  48
008A:  RETLW  02
008B:  RETLW  C8
008C:  RETLW  03
008D:  RETLW  F8
008E:  RETLW  03
008F:  RETLW  48
0090:  RETLW  02
0091:  RETLW  C8
0092:  RETLW  03
0093:  RETLW  08
0094:  RETLW  00
0095:  RETLW  08
0096:  RETLW  00
0097:  RETLW  F8
0098:  RETLW  03
0099:  RETLW  F8
009A:  RETLW  03
009B:  RETLW  48
009C:  RETLW  02
009D:  RETLW  F8
009E:  RETLW  03
009F:  RETLW  78
00A0:  RETLW  02
00A1:  RETLW  48
00A2:  RETLW  02
00A3:  RETLW  F8
00A4:  RETLW  03
00A5:  BCF    0A.0
00A6:  BCF    0A.1
00A7:  BCF    0A.2
00A8:  ADDWF  02,F
00A9:  RETLW  F8
00AA:  RETLW  03
00AB:  RETLW  08
00AC:  RETLW  02
00AD:  RETLW  F8
00AE:  RETLW  03
00AF:  RETLW  F8
00B0:  RETLW  03
00B1:  RETLW  00
00B2:  RETLW  01
00B3:  RETLW  80
00B4:  RETLW  00
00B5:  RETLW  C8
00B6:  RETLW  03
00B7:  RETLW  48
00B8:  RETLW  02
00B9:  RETLW  78
00BA:  RETLW  02
00BB:  RETLW  F8
00BC:  RETLW  03
00BD:  RETLW  48
00BE:  RETLW  02
00BF:  RETLW  48
00C0:  RETLW  02
00C1:  RETLW  F8
00C2:  RETLW  03
00C3:  RETLW  40
00C4:  RETLW  00
00C5:  RETLW  C0
00C6:  RETLW  03
00C7:  RETLW  78
00C8:  RETLW  02
00C9:  RETLW  48
00CA:  RETLW  02
00CB:  RETLW  C8
00CC:  RETLW  03
00CD:  RETLW  78
00CE:  RETLW  02
00CF:  RETLW  48
00D0:  RETLW  02
00D1:  RETLW  F8
00D2:  RETLW  03
00D3:  RETLW  F8
00D4:  RETLW  03
00D5:  RETLW  00
00D6:  RETLW  02
00D7:  RETLW  00
00D8:  RETLW  02
00D9:  RETLW  F8
00DA:  RETLW  03
00DB:  RETLW  48
00DC:  RETLW  02
00DD:  RETLW  F8
00DE:  RETLW  03
00DF:  RETLW  F8
00E0:  RETLW  03
00E1:  RETLW  48
00E2:  RETLW  02
00E3:  RETLW  C8
00E4:  RETLW  03
00E5:  MOVWF  7B
00E6:  MOVLW  00
00E7:  ADDWF  7A,W
00E8:  MOVWF  0A
00E9:  MOVF   7B,W
00EA:  ADDLW  EE
00EB:  BTFSC  03.0
00EC:  INCF   0A,F
00ED:  MOVWF  02
00EE:  RETLW  00
00EF:  RETLW  E0
00F0:  RETLW  D8
00F1:  RETLW  E0
00F2:  RETLW  00
00F3:  RETLW  00
00F4:  RETLW  00
00F5:  RETLW  C0
00F6:  RETLW  70
00F7:  RETLW  C0
00F8:  RETLW  00
00F9:  RETLW  00
00FA:  RETLW  00
00FB:  RETLW  80
00FC:  RETLW  00
00FD:  RETLW  80
00FE:  RETLW  18
00FF:  RETLW  00
0100:  RETLW  00
0101:  RETLW  80
0102:  RETLW  00
0103:  RETLW  80
0104:  RETLW  18
0105:  RETLW  00
0106:  RETLW  00
0107:  RETLW  80
0108:  RETLW  00
0109:  RETLW  80
010A:  RETLW  F8
010B:  RETLW  07
010C:  RETLW  00
010D:  RETLW  C0
010E:  RETLW  00
010F:  RETLW  C0
0110:  RETLW  F8
0111:  RETLW  07
0112:  RETLW  00
0113:  RETLW  E0
0114:  RETLW  00
0115:  RETLW  E0
0116:  RETLW  18
0117:  RETLW  00
0118:  RETLW  00
0119:  RETLW  C0
011A:  RETLW  00
011B:  RETLW  C0
011C:  RETLW  18
011D:  RETLW  00
011E:  RETLW  00
011F:  RETLW  80
0120:  RETLW  00
0121:  RETLW  80
0122:  RETLW  00
0123:  RETLW  00
0124:  RETLW  00
0125:  RETLW  80
0126:  RETLW  00
0127:  RETLW  80
0128:  RETLW  00
0129:  RETLW  00
012A:  RETLW  00
012B:  RETLW  80
012C:  RETLW  00
012D:  RETLW  80
012E:  RETLW  00
012F:  RETLW  00
0130:  RETLW  00
0131:  RETLW  C0
0132:  RETLW  00
0133:  RETLW  C0
0134:  RETLW  00
0135:  RETLW  00
0136:  RETLW  00
0137:  RETLW  E0
0138:  RETLW  00
0139:  RETLW  E0
013A:  RETLW  00
013B:  RETLW  00
013C:  RETLW  00
013D:  RETLW  C0
013E:  RETLW  00
013F:  RETLW  C0
0140:  RETLW  00
0141:  RETLW  00
0142:  RETLW  00
0143:  RETLW  80
0144:  RETLW  00
0145:  RETLW  80
0146:  RETLW  00
0147:  RETLW  00
0148:  RETLW  00
0149:  RETLW  80
014A:  RETLW  00
014B:  RETLW  80
014C:  RETLW  00
014D:  RETLW  00
014E:  RETLW  00
014F:  RETLW  80
0150:  RETLW  00
0151:  RETLW  80
0152:  RETLW  00
0153:  RETLW  00
0154:  RETLW  00
0155:  RETLW  C0
0156:  RETLW  00
0157:  RETLW  C0
0158:  RETLW  00
0159:  RETLW  00
015A:  RETLW  00
015B:  RETLW  E0
015C:  RETLW  00
015D:  RETLW  E0
015E:  RETLW  00
015F:  RETLW  00
0160:  RETLW  00
0161:  RETLW  C0
0162:  RETLW  00
0163:  RETLW  C0
0164:  RETLW  00
0165:  RETLW  00
0166:  RETLW  00
0167:  RETLW  80
0168:  RETLW  00
0169:  RETLW  80
016A:  RETLW  00
016B:  RETLW  00
016C:  RETLW  00
016D:  RETLW  80
016E:  RETLW  00
016F:  RETLW  80
0170:  RETLW  00
0171:  RETLW  00
0172:  RETLW  01
0173:  RETLW  80
0174:  RETLW  00
0175:  RETLW  80
0176:  RETLW  01
0177:  RETLW  00
0178:  RETLW  03
0179:  RETLW  C0
017A:  RETLW  00
017B:  RETLW  C0
017C:  RETLW  03
017D:  RETLW  00
017E:  RETLW  07
017F:  RETLW  E0
0180:  RETLW  00
0181:  RETLW  E0
0182:  RETLW  07
0183:  RETLW  00
0184:  RETLW  0F
0185:  RETLW  C0
0186:  RETLW  00
0187:  RETLW  C0
0188:  RETLW  0F
0189:  RETLW  00
018A:  RETLW  1F
018B:  RETLW  80
018C:  RETLW  00
018D:  RETLW  80
018E:  RETLW  1F
018F:  RETLW  00
0190:  RETLW  3F
0191:  RETLW  80
0192:  RETLW  00
0193:  RETLW  80
0194:  RETLW  3F
0195:  RETLW  00
0196:  RETLW  7F
0197:  RETLW  80
0198:  RETLW  00
0199:  RETLW  80
019A:  RETLW  7F
019B:  RETLW  00
019C:  RETLW  FF
019D:  RETLW  C0
019E:  RETLW  00
019F:  RETLW  C0
01A0:  RETLW  FF
01A1:  RETLW  00
01A2:  RETLW  FF
01A3:  RETLW  E1
01A4:  RETLW  00
01A5:  RETLW  E0
01A6:  RETLW  FF
01A7:  RETLW  01
01A8:  RETLW  FF
01A9:  RETLW  C0
01AA:  RETLW  00
01AB:  RETLW  C0
01AC:  RETLW  FF
01AD:  RETLW  00
01AE:  RETLW  7F
01AF:  RETLW  80
01B0:  RETLW  00
01B1:  RETLW  80
01B2:  RETLW  7F
01B3:  RETLW  00
01B4:  RETLW  3F
01B5:  RETLW  80
01B6:  RETLW  00
01B7:  RETLW  80
01B8:  RETLW  3F
01B9:  RETLW  00
01BA:  RETLW  1F
01BB:  RETLW  80
01BC:  RETLW  00
01BD:  RETLW  80
01BE:  RETLW  1F
01BF:  RETLW  00
01C0:  RETLW  0F
01C1:  RETLW  C0
01C2:  RETLW  00
01C3:  RETLW  C0
01C4:  RETLW  0F
01C5:  RETLW  00
01C6:  RETLW  07
01C7:  RETLW  E0
01C8:  RETLW  00
01C9:  RETLW  E0
01CA:  RETLW  07
01CB:  RETLW  00
01CC:  RETLW  03
01CD:  RETLW  C0
01CE:  RETLW  00
01CF:  RETLW  C0
01D0:  RETLW  03
01D1:  RETLW  00
01D2:  RETLW  01
01D3:  RETLW  80
01D4:  RETLW  00
01D5:  RETLW  80
01D6:  RETLW  01
01D7:  RETLW  00
01D8:  RETLW  00
01D9:  RETLW  80
01DA:  RETLW  00
01DB:  RETLW  80
01DC:  RETLW  00
01DD:  RETLW  00
01DE:  RETLW  00
01DF:  RETLW  80
01E0:  RETLW  00
01E1:  RETLW  80
01E2:  RETLW  00
01E3:  RETLW  00
01E4:  RETLW  00
01E5:  RETLW  C0
01E6:  RETLW  00
01E7:  RETLW  C0
01E8:  RETLW  00
01E9:  RETLW  00
01EA:  RETLW  00
01EB:  RETLW  E0
01EC:  RETLW  00
01ED:  RETLW  E0
01EE:  RETLW  00
01EF:  RETLW  00
01F0:  RETLW  00
01F1:  RETLW  C0
01F2:  RETLW  00
01F3:  RETLW  C0
01F4:  RETLW  00
01F5:  RETLW  00
01F6:  RETLW  00
01F7:  RETLW  80
01F8:  RETLW  00
01F9:  RETLW  80
01FA:  RETLW  00
01FB:  RETLW  00
01FC:  RETLW  00
01FD:  RETLW  80
01FE:  RETLW  00
01FF:  RETLW  80
0200:  RETLW  00
0201:  RETLW  00
0202:  RETLW  00
0203:  RETLW  80
0204:  RETLW  00
0205:  RETLW  80
0206:  RETLW  00
0207:  RETLW  00
0208:  RETLW  00
0209:  RETLW  C0
020A:  RETLW  00
020B:  RETLW  C0
020C:  RETLW  00
020D:  RETLW  00
020E:  RETLW  00
020F:  RETLW  E0
0210:  RETLW  00
0211:  RETLW  E0
0212:  RETLW  00
0213:  RETLW  00
0214:  RETLW  00
0215:  RETLW  C0
0216:  RETLW  00
0217:  RETLW  C0
0218:  RETLW  00
0219:  RETLW  00
021A:  RETLW  00
021B:  RETLW  80
021C:  RETLW  00
021D:  RETLW  80
021E:  RETLW  00
021F:  RETLW  00
0220:  RETLW  00
0221:  RETLW  80
0222:  RETLW  00
0223:  RETLW  80
0224:  RETLW  00
0225:  RETLW  00
0226:  RETLW  00
0227:  RETLW  80
0228:  RETLW  00
0229:  RETLW  80
022A:  RETLW  00
022B:  RETLW  00
022C:  RETLW  F8
022D:  RETLW  C7
022E:  RETLW  00
022F:  RETLW  C0
0230:  RETLW  00
0231:  RETLW  00
0232:  RETLW  F8
0233:  RETLW  E7
0234:  RETLW  00
0235:  RETLW  E0
0236:  RETLW  00
0237:  RETLW  00
0238:  RETLW  D8
0239:  RETLW  C0
023A:  RETLW  00
023B:  RETLW  C0
023C:  RETLW  00
023D:  RETLW  00
023E:  RETLW  D8
023F:  RETLW  80
0240:  RETLW  00
0241:  RETLW  80
0242:  RETLW  00
0243:  RETLW  00
0244:  RETLW  18
0245:  RETLW  80
0246:  RETLW  00
0247:  RETLW  80
0248:  RETLW  00
0249:  RETLW  00
024A:  RETLW  00
024B:  RETLW  80
024C:  RETLW  F8
024D:  RETLW  87
024E:  RETLW  00
024F:  RETLW  00
0250:  RETLW  00
0251:  RETLW  C0
0252:  RETLW  F8
0253:  RETLW  C7
0254:  RETLW  00
0255:  RETLW  00
0256:  BCF    0A.0
0257:  BSF    0A.1
0258:  BCF    0A.2
0259:  ADDWF  02,F
025A:  RETLW  F0
025B:  RETLW  01
025C:  RETLW  08
025D:  RETLW  02
025E:  RETLW  F8
025F:  RETLW  03
0260:  RETLW  00
0261:  RETLW  00
0262:  RETLW  48
0263:  RETLW  02
0264:  RETLW  48
0265:  RETLW  02
0266:  RETLW  F8
0267:  RETLW  03
0268:  RETLW  00
0269:  RETLW  00
026A:  RETLW  08
026B:  RETLW  00
026C:  RETLW  08
026D:  RETLW  00
026E:  RETLW  F8
026F:  RETLW  03
0270:  RETLW  00
0271:  RETLW  00
0272:  RETLW  40
0273:  RETLW  00
0274:  RETLW  A0
0275:  RETLW  00
0276:  RETLW  F8
0277:  RETLW  00
*
02D2:  MOVLW  20
02D3:  MOVWF  71
02D4:  CLRF   6D
02D5:  CLRF   6E
02D6:  CLRF   6F
02D7:  CLRF   70
02D8:  MOVF   68,W
02D9:  MOVWF  7A
02DA:  MOVF   67,W
02DB:  MOVWF  79
02DC:  MOVF   66,W
02DD:  MOVWF  78
02DE:  MOVF   65,W
02DF:  MOVWF  77
02E0:  BCF    03.0
02E1:  BTFSS  77.0
02E2:  GOTO   2F1
02E3:  MOVF   69,W
02E4:  ADDWF  6D,F
02E5:  MOVF   6A,W
02E6:  BTFSC  03.0
02E7:  INCFSZ 6A,W
02E8:  ADDWF  6E,F
02E9:  MOVF   6B,W
02EA:  BTFSC  03.0
02EB:  INCFSZ 6B,W
02EC:  ADDWF  6F,F
02ED:  MOVF   6C,W
02EE:  BTFSC  03.0
02EF:  INCFSZ 6C,W
02F0:  ADDWF  70,F
02F1:  RRF    70,F
02F2:  RRF    6F,F
02F3:  RRF    6E,F
02F4:  RRF    6D,F
02F5:  RRF    7A,F
02F6:  RRF    79,F
02F7:  RRF    78,F
02F8:  RRF    77,F
02F9:  DECFSZ 71,F
02FA:  GOTO   2E0
*
0510:  MOVF   56,W
0511:  CLRF   78
0512:  SUBWF  55,W
0513:  BTFSC  03.0
0514:  GOTO   518
0515:  MOVF   55,W
0516:  MOVWF  77
0517:  GOTO   524
0518:  CLRF   77
0519:  MOVLW  08
051A:  MOVWF  57
051B:  RLF    55,F
051C:  RLF    77,F
051D:  MOVF   56,W
051E:  SUBWF  77,W
051F:  BTFSC  03.0
0520:  MOVWF  77
0521:  RLF    78,F
0522:  DECFSZ 57,F
0523:  GOTO   51B
0524:  RETURN
0525:  CLRF   77
0526:  CLRF   78
0527:  MOVF   55,W
0528:  BCF    03.0
0529:  BTFSC  56.0
052A:  ADDWF  77,F
052B:  RRF    77,F
052C:  RRF    78,F
052D:  BTFSC  56.1
052E:  ADDWF  77,F
052F:  RRF    77,F
0530:  RRF    78,F
0531:  BTFSC  56.2
0532:  ADDWF  77,F
0533:  RRF    77,F
0534:  RRF    78,F
0535:  BTFSC  56.3
0536:  ADDWF  77,F
0537:  RRF    77,F
0538:  RRF    78,F
0539:  BTFSC  56.4
053A:  ADDWF  77,F
053B:  RRF    77,F
053C:  RRF    78,F
053D:  BTFSC  56.5
053E:  ADDWF  77,F
053F:  RRF    77,F
0540:  RRF    78,F
0541:  BTFSC  56.6
0542:  ADDWF  77,F
0543:  RRF    77,F
0544:  RRF    78,F
0545:  BTFSC  56.7
0546:  ADDWF  77,F
0547:  RRF    77,F
0548:  RRF    78,F
0549:  RETURN
054A:  BTFSC  03.1
054B:  GOTO   54F
054C:  MOVLW  5C
054D:  MOVWF  04
054E:  BCF    03.7
054F:  CLRF   77
0550:  CLRF   78
0551:  CLRF   79
0552:  CLRF   7A
0553:  CLRF   5C
0554:  CLRF   5D
0555:  CLRF   5E
0556:  CLRF   5F
0557:  MOVF   5B,W
0558:  IORWF  5A,W
0559:  IORWF  59,W
055A:  IORWF  58,W
055B:  BTFSC  03.2
055C:  GOTO   58D
055D:  MOVLW  20
055E:  MOVWF  60
055F:  BCF    03.0
0560:  RLF    54,F
0561:  RLF    55,F
0562:  RLF    56,F
0563:  RLF    57,F
0564:  RLF    5C,F
0565:  RLF    5D,F
0566:  RLF    5E,F
0567:  RLF    5F,F
0568:  MOVF   5B,W
0569:  SUBWF  5F,W
056A:  BTFSS  03.2
056B:  GOTO   576
056C:  MOVF   5A,W
056D:  SUBWF  5E,W
056E:  BTFSS  03.2
056F:  GOTO   576
0570:  MOVF   59,W
0571:  SUBWF  5D,W
0572:  BTFSS  03.2
0573:  GOTO   576
0574:  MOVF   58,W
0575:  SUBWF  5C,W
0576:  BTFSS  03.0
0577:  GOTO   587
0578:  MOVF   58,W
0579:  SUBWF  5C,F
057A:  MOVF   59,W
057B:  BTFSS  03.0
057C:  INCFSZ 59,W
057D:  SUBWF  5D,F
057E:  MOVF   5A,W
057F:  BTFSS  03.0
0580:  INCFSZ 5A,W
0581:  SUBWF  5E,F
0582:  MOVF   5B,W
0583:  BTFSS  03.0
0584:  INCFSZ 5B,W
0585:  SUBWF  5F,F
0586:  BSF    03.0
0587:  RLF    77,F
0588:  RLF    78,F
0589:  RLF    79,F
058A:  RLF    7A,F
058B:  DECFSZ 60,F
058C:  GOTO   55F
058D:  MOVF   5C,W
058E:  MOVWF  00
058F:  INCF   04,F
0590:  MOVF   5D,W
0591:  MOVWF  00
0592:  INCF   04,F
0593:  MOVF   5E,W
0594:  MOVWF  00
0595:  INCF   04,F
0596:  MOVF   5F,W
0597:  MOVWF  00
0598:  BCF    0A.3
0599:  BSF    0A.4
059A:  GOTO   504 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES MCLR 
.................... #FUSES NOPROTECT 
.................... #FUSES NOCPD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BROWNOUT 
.................... //#FUSES BORV40 
....................  
.................... #FUSES IESO 
.................... #FUSES FCMEN 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG 
.................... //configuration bits: 2007-2CE2(); 2008-0700(FFFF) 
....................  
.................... #use delay(crystal=20000000) 
.................... #use FIXED_IO( E_outputs=PIN_E2,PIN_E1,PIN_E0 ) 
.................... #use rs232(baud=19200,parity=E,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
.................... //#use i2c(Master,Slow,sda=PIN_C4,scl=PIN_C3) 
....................  
.................... #OPT 1 
....................  
.................... #define MAX_SECTION 60 
.................... #define MODE_A 2 
.................... #define MODE_B 3 
.................... #define MODE_C 4 
.................... #define MODE_D 5 
....................  
.................... //#INLINE 
.................... void fetch_data(); 
....................  
.................... struct 
.................... { 
.................... 	int16 blue; 
.................... 	int16 red; 
.................... 	int16 green; 
.................... } rgb_bits; 
....................  
.................... const int16 number_upper[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x0040, 0x0020, 0x03F8}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x0248, 0x0248, 0x03F8}, // 3 
.................... 	{0x0078, 0x0040, 0x03F8}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x03F8, 0x0248, 0x03C8}, // 6 
.................... 	{0x0008, 0x0008, 0x03F8}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x0278, 0x0248, 0x03F8}  // 9 
.................... }; 
....................  
.................... const int16 number_lower[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x03F8, 0x0100, 0x0080}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x03F8, 0x0248, 0x0248}, // 3 
.................... 	{0x03F8, 0x0040, 0x03C0}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x0278, 0x0248, 0x03F8}, // 6 
.................... 	{0x03F8, 0x0200, 0x0200}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x03F8, 0x0248, 0x03C8}  // 9 
.................... }; 
....................  
.................... const int16 fpt[180] =  
.................... { 
.................... 	0xE000, 0xE0D8, 0x0000, 0xC000, 0xC070, 0x0000, 
.................... 	0x8000, 0x8000, 0x0018, 0x8000, 0x8000, 0x0018, 
.................... 	0x8000, 0x8000, 0x07F8, 0xC000, 0xC000, 0x07F8, 
.................... 	0xE000, 0xE000, 0x0018, 0xC000, 0xC000, 0x0018, 
.................... 	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 
.................... 	0x8001, 0x8000, 0x0001, 0xC003, 0xC000, 0x0003, 
.................... 	0xE007, 0xE000, 0x0007, 0xC00F, 0xC000, 0x000F, 
.................... 	0x801F, 0x8000, 0x001F, 0x803F, 0x8000, 0x003F, 
.................... 	0x807F, 0x8000, 0x007F, 0xC0FF, 0xC000, 0x00FF, 
.................... 	0xE1FF, 0xE000, 0x01FF, 0xC0FF, 0xC000, 0x00FF, 
.................... 	0x807F, 0x8000, 0x007F, 0x803F, 0x8000, 0x003F, 
.................... 	0x801F, 0x8000, 0x001F, 0xC00F, 0xC000, 0x000F, 
.................... 	0xE007, 0xE000, 0x0007, 0xC003, 0xC000, 0x0003, 
.................... 	0x8001, 0x8000, 0x0001, 0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000, 0xC7F8, 0xC000, 0x0000, 
.................... 	0xE7F8, 0xE000, 0x0000, 0xC0D8, 0xC000, 0x0000, 
.................... 	0x80D8, 0x8000, 0x0000, 0x8018, 0x8000, 0x0000, 
.................... 	0x8000, 0x87F8, 0x0000, 0xC000, 0xC7F8, 0x0000 
.................... }; 
....................  
.................... const int16 pled[15] =  
.................... { 
.................... 0x01F0, 0x0208, 0x03F8, 0x0000, 
.................... 0x0248, 0x0248, 0x03F8, 0x0000, 
.................... 0x0008, 0x0008, 0x03F8, 0x0000, 
.................... 0x0040, 0x00A0, 0x00F8 
.................... }; 
....................  
.................... const int16 asterisk[11][3] = 
.................... { 
....................    {0x0000, 0x8000, 0x8000}, 
.................... 	{0x0000, 0xA000, 0xA000}, 
.................... 	{0x0000, 0xFE00, 0xFE00}, 
.................... 	{0x0000, 0xEB00, 0xEB00}, 
.................... 	{0x0000, 0xC181, 0xC181}, 
.................... 	{0x0000, 0x8043, 0x8043}, 
.................... 	{0x0000, 0x803C, 0x803C}, 
.................... 	{0x0000, 0x8000, 0x8000}, 
.................... 	{0x0000, 0x0000, 0x0000}, 
.................... 	{0x0000, 0x0000, 0x0000}, 
.................... 	{0x0000, 0x0000, 0x0000}, 
.................... }; 
....................  
.................... //#include "PIC16F887_registers.h" 
.................... //#include <stdlibm.h> 
.................... #include "24256.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC256 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   32768 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    while(status==1) 
....................    { 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    } 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... #include "74595.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for latch 74HC595 - Base on source code from CCS library         || 
.................... //   Last edited: 1 - April - 2014                                           || 
.................... //                                                                           || 
.................... // void latch_write(int16 blue, int16 red, int16 green)                      || 
.................... //                  Writes 48 bits to the 6 chips                            || 
.................... //                                                                           || 
.................... // void latch_ClearAll()      turn off all the leds                          || 
.................... //                                                                           || 
.................... // void latch_SetAll()        turn on all the leds                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #IFNDEF EXP_OUT_ENABLE 
....................  
.................... #define EXP_OUT_ENABLE  PIN_E2 
.................... #define EXP_OUT_CLOCK   PIN_E1 
.................... #define EXP_OUT_DO      PIN_E0 
.................... #define NUMBER_OF_74595 6 
....................  
.................... #ENDIF 
....................  
.................... #INLINE 
.................... void latch_write(int16 blue, int16 red, int16 green) 
.................... { 
.................... 	BYTE i; 
.................... 	output_low(EXP_OUT_CLOCK); 
*
105F:  MOVLW  E8
1060:  BSF    03.5
1061:  MOVWF  09
1062:  BCF    03.5
1063:  BCF    09.1
*
1537:  MOVLW  E8
1538:  BSF    03.5
1539:  MOVWF  09
153A:  BCF    03.5
153B:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1064:  MOVLW  E8
1065:  BSF    03.5
1066:  MOVWF  09
1067:  BCF    03.5
1068:  BCF    09.2
*
153C:  MOVLW  E8
153D:  BSF    03.5
153E:  MOVWF  09
153F:  BCF    03.5
1540:  BCF    09.2
....................   	 
.................... 	for(i = 16; i > 0; i--) 
*
1069:  MOVLW  10
106A:  MOVWF  5A
106B:  MOVF   5A,F
106C:  BTFSC  03.2
106D:  GOTO   0D0
*
1541:  MOVLW  10
1542:  MOVWF  5A
1543:  MOVF   5A,F
1544:  BTFSC  03.2
1545:  GOTO   5A8
.................... 	{ 
.................... 		//write green led first, the first bit output will be on the last latch 
.................... 		if(green & 0x01) 
*
106E:  MOVF   58,W
106F:  ANDLW  01
1070:  MOVWF  77
1071:  CLRF   7A
1072:  MOVF   77,W
1073:  IORWF  7A,W
1074:  BTFSC  03.2
1075:  GOTO   07C
*
1546:  MOVF   58,W
1547:  ANDLW  01
1548:  MOVWF  77
1549:  CLRF   7A
154A:  MOVF   77,W
154B:  IORWF  7A,W
154C:  BTFSC  03.2
154D:  GOTO   554
.................... 			output_high(EXP_OUT_DO); 
*
1076:  MOVLW  E8
1077:  BSF    03.5
1078:  MOVWF  09
1079:  BCF    03.5
107A:  BSF    09.0
107B:  GOTO   081
*
154E:  MOVLW  E8
154F:  BSF    03.5
1550:  MOVWF  09
1551:  BCF    03.5
1552:  BSF    09.0
1553:  GOTO   559
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
107C:  MOVLW  E8
107D:  BSF    03.5
107E:  MOVWF  09
107F:  BCF    03.5
1080:  BCF    09.0
*
1554:  MOVLW  E8
1555:  BSF    03.5
1556:  MOVWF  09
1557:  BCF    03.5
1558:  BCF    09.0
.................... 		shift_right(&green, 2, 0); 
*
1081:  BCF    03.0
1082:  RRF    59,F
1083:  RRF    58,F
*
1559:  BCF    03.0
155A:  RRF    59,F
155B:  RRF    58,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
1084:  MOVLW  E8
1085:  BSF    03.5
1086:  MOVWF  09
1087:  BCF    03.5
1088:  BSF    09.1
*
155C:  MOVLW  E8
155D:  BSF    03.5
155E:  MOVWF  09
155F:  BCF    03.5
1560:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
1089:  MOVLW  E8
108A:  BSF    03.5
108B:  MOVWF  09
108C:  BCF    03.5
108D:  BCF    09.1
*
1561:  MOVLW  E8
1562:  BSF    03.5
1563:  MOVWF  09
1564:  BCF    03.5
1565:  BCF    09.1
.................... 	  	 
.................... 		//output red 
.................... 		if(red & 0x01) 
*
108E:  MOVF   56,W
108F:  ANDLW  01
1090:  MOVWF  77
1091:  CLRF   7A
1092:  MOVF   77,W
1093:  IORWF  7A,W
1094:  BTFSC  03.2
1095:  GOTO   09C
*
1566:  MOVF   56,W
1567:  ANDLW  01
1568:  MOVWF  77
1569:  CLRF   7A
156A:  MOVF   77,W
156B:  IORWF  7A,W
156C:  BTFSC  03.2
156D:  GOTO   574
.................... 			output_high(EXP_OUT_DO); 
*
1096:  MOVLW  E8
1097:  BSF    03.5
1098:  MOVWF  09
1099:  BCF    03.5
109A:  BSF    09.0
109B:  GOTO   0A1
*
156E:  MOVLW  E8
156F:  BSF    03.5
1570:  MOVWF  09
1571:  BCF    03.5
1572:  BSF    09.0
1573:  GOTO   579
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
109C:  MOVLW  E8
109D:  BSF    03.5
109E:  MOVWF  09
109F:  BCF    03.5
10A0:  BCF    09.0
*
1574:  MOVLW  E8
1575:  BSF    03.5
1576:  MOVWF  09
1577:  BCF    03.5
1578:  BCF    09.0
.................... 		shift_right(&red, 2, 0); 
*
10A1:  BCF    03.0
10A2:  RRF    57,F
10A3:  RRF    56,F
*
1579:  BCF    03.0
157A:  RRF    57,F
157B:  RRF    56,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10A4:  MOVLW  E8
10A5:  BSF    03.5
10A6:  MOVWF  09
10A7:  BCF    03.5
10A8:  BSF    09.1
*
157C:  MOVLW  E8
157D:  BSF    03.5
157E:  MOVWF  09
157F:  BCF    03.5
1580:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10A9:  MOVLW  E8
10AA:  BSF    03.5
10AB:  MOVWF  09
10AC:  BCF    03.5
10AD:  BCF    09.1
*
1581:  MOVLW  E8
1582:  BSF    03.5
1583:  MOVWF  09
1584:  BCF    03.5
1585:  BCF    09.1
.................... 	  	 
.................... 		//output blue 
.................... 		if(blue & 0x01) 
*
10AE:  MOVF   54,W
10AF:  ANDLW  01
10B0:  MOVWF  77
10B1:  CLRF   7A
10B2:  MOVF   77,W
10B3:  IORWF  7A,W
10B4:  BTFSC  03.2
10B5:  GOTO   0BC
*
1586:  MOVF   54,W
1587:  ANDLW  01
1588:  MOVWF  77
1589:  CLRF   7A
158A:  MOVF   77,W
158B:  IORWF  7A,W
158C:  BTFSC  03.2
158D:  GOTO   594
.................... 			output_high(EXP_OUT_DO); 
*
10B6:  MOVLW  E8
10B7:  BSF    03.5
10B8:  MOVWF  09
10B9:  BCF    03.5
10BA:  BSF    09.0
10BB:  GOTO   0C1
*
158E:  MOVLW  E8
158F:  BSF    03.5
1590:  MOVWF  09
1591:  BCF    03.5
1592:  BSF    09.0
1593:  GOTO   599
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
10BC:  MOVLW  E8
10BD:  BSF    03.5
10BE:  MOVWF  09
10BF:  BCF    03.5
10C0:  BCF    09.0
*
1594:  MOVLW  E8
1595:  BSF    03.5
1596:  MOVWF  09
1597:  BCF    03.5
1598:  BCF    09.0
.................... 		shift_right(&blue, 2, 0); 
*
10C1:  BCF    03.0
10C2:  RRF    55,F
10C3:  RRF    54,F
*
1599:  BCF    03.0
159A:  RRF    55,F
159B:  RRF    54,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10C4:  MOVLW  E8
10C5:  BSF    03.5
10C6:  MOVWF  09
10C7:  BCF    03.5
10C8:  BSF    09.1
*
159C:  MOVLW  E8
159D:  BSF    03.5
159E:  MOVWF  09
159F:  BCF    03.5
15A0:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10C9:  MOVLW  E8
10CA:  BSF    03.5
10CB:  MOVWF  09
10CC:  BCF    03.5
10CD:  BCF    09.1
10CE:  DECF   5A,F
10CF:  GOTO   06B
*
15A1:  MOVLW  E8
15A2:  BSF    03.5
15A3:  MOVWF  09
15A4:  BCF    03.5
15A5:  BCF    09.1
15A6:  DECF   5A,F
15A7:  GOTO   543
.................... 	} 
....................   	 
.................... 	output_high(EXP_OUT_ENABLE); 
*
10D0:  MOVLW  E8
10D1:  BSF    03.5
10D2:  MOVWF  09
10D3:  BCF    03.5
10D4:  BSF    09.2
*
15A8:  MOVLW  E8
15A9:  BSF    03.5
15AA:  MOVWF  09
15AB:  BCF    03.5
15AC:  BSF    09.2
.................... 	output_low(EXP_OUT_ENABLE); 
*
10D5:  MOVLW  E8
10D6:  BSF    03.5
10D7:  MOVWF  09
10D8:  BCF    03.5
10D9:  BCF    09.2
*
15AD:  MOVLW  E8
15AE:  BSF    03.5
15AF:  MOVWF  09
15B0:  BCF    03.5
15B1:  BCF    09.2
.................... } 
.................... //#INLINE 
.................... void latch_enable() 
.................... { 
.................... 	output_high(EXP_OUT_ENABLE); 
.................... 	output_low(EXP_OUT_ENABLE); 
.................... } 
....................  
.................... #INLINE 
.................... void latch_ClearAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
*
14C4:  MOVLW  E8
14C5:  BSF    03.5
14C6:  MOVWF  09
14C7:  BCF    03.5
14C8:  BCF    09.1
*
15B6:  MOVLW  E8
15B7:  BSF    03.5
15B8:  MOVWF  09
15B9:  BCF    03.5
15BA:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
14C9:  MOVLW  E8
14CA:  BSF    03.5
14CB:  MOVWF  09
14CC:  BCF    03.5
14CD:  BCF    09.2
*
15BB:  MOVLW  E8
15BC:  BSF    03.5
15BD:  MOVWF  09
15BE:  BCF    03.5
15BF:  BCF    09.2
.................... 	output_low(EXP_OUT_DO); 
*
14CE:  MOVLW  E8
14CF:  BSF    03.5
14D0:  MOVWF  09
14D1:  BCF    03.5
14D2:  BCF    09.0
*
15C0:  MOVLW  E8
15C1:  BSF    03.5
15C2:  MOVWF  09
15C3:  BCF    03.5
15C4:  BCF    09.0
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
*
14D3:  MOVLW  30
14D4:  MOVWF  54
14D5:  MOVF   54,F
14D6:  BTFSC  03.2
14D7:  GOTO   4E4
*
15C5:  MOVLW  30
15C6:  MOVWF  54
15C7:  MOVF   54,F
15C8:  BTFSC  03.2
15C9:  GOTO   5D6
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
*
14D8:  MOVLW  E8
14D9:  BSF    03.5
14DA:  MOVWF  09
14DB:  BCF    03.5
14DC:  BSF    09.1
*
15CA:  MOVLW  E8
15CB:  BSF    03.5
15CC:  MOVWF  09
15CD:  BCF    03.5
15CE:  BSF    09.1
....................    	output_low(EXP_OUT_CLOCK); 
*
14DD:  MOVLW  E8
14DE:  BSF    03.5
14DF:  MOVWF  09
14E0:  BCF    03.5
14E1:  BCF    09.1
14E2:  DECF   54,F
14E3:  GOTO   4D5
*
15CF:  MOVLW  E8
15D0:  BSF    03.5
15D1:  MOVWF  09
15D2:  BCF    03.5
15D3:  BCF    09.1
15D4:  DECF   54,F
15D5:  GOTO   5C7
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
*
14E4:  MOVLW  E8
14E5:  BSF    03.5
14E6:  MOVWF  09
14E7:  BCF    03.5
14E8:  BSF    09.2
*
15D6:  MOVLW  E8
15D7:  BSF    03.5
15D8:  MOVWF  09
15D9:  BCF    03.5
15DA:  BSF    09.2
....................    output_low(EXP_OUT_ENABLE); 
*
14E9:  MOVLW  E8
14EA:  BSF    03.5
14EB:  MOVWF  09
14EC:  BCF    03.5
14ED:  BCF    09.2
*
15DB:  MOVLW  E8
15DC:  BSF    03.5
15DD:  MOVWF  09
15DE:  BCF    03.5
15DF:  BCF    09.2
.................... } 
.................... //#INLINE 
.................... void latch_SetAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
.................... 	output_low(EXP_OUT_ENABLE); 
.................... 	output_high(EXP_OUT_DO); 
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
....................    	output_low(EXP_OUT_CLOCK); 
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
....................    output_low(EXP_OUT_ENABLE); 
.................... } 
....................  
.................... #include "ds1307.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for Real Time Clock - Base on source code from ccsinfo.com       || 
.................... //   Last edited: 20 - March - 2014                                          || 
.................... //                                                                           || 
.................... // ds1307_init() - Enable oscillator without clearing the seconds register   || 
.................... //                 used when PIC loses power and DS1307 run from 3V BAT      || 
.................... //               - Enable squarewave output with 1Hz frequency               || 
.................... //                                                                           || 
.................... // ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time    || 
.................... //                                                                           || 
.................... // ds1307_get_date(day,mth,year,dow)               Get the date              || 
.................... //                                                                           || 
.................... // ds1307_get_time(hr,min,sec)                     Get the time              || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL, slow)  
*
0342:  MOVLW  08
0343:  MOVWF  78
0344:  MOVLW  04
0345:  MOVWF  77
0346:  DECFSZ 77,F
0347:  GOTO   346
0348:  BCF    07.3
0349:  BCF    2E.3
034A:  MOVF   2E,W
034B:  BSF    03.5
034C:  MOVWF  07
034D:  MOVLW  03
034E:  MOVWF  77
034F:  BCF    03.5
0350:  DECFSZ 77,F
0351:  GOTO   350
0352:  RLF    58,F
0353:  BCF    07.4
0354:  BTFSS  03.0
0355:  GOTO   35C
0356:  BSF    2E.4
0357:  MOVF   2E,W
0358:  BSF    03.5
0359:  MOVWF  07
035A:  BCF    03.5
035B:  GOTO   361
035C:  BCF    2E.4
035D:  MOVF   2E,W
035E:  BSF    03.5
035F:  MOVWF  07
0360:  BCF    03.5
0361:  NOP
0362:  BSF    2E.3
0363:  MOVF   2E,W
0364:  BSF    03.5
0365:  MOVWF  07
0366:  BCF    03.5
0367:  BTFSS  07.3
0368:  GOTO   367
0369:  DECFSZ 78,F
036A:  GOTO   344
036B:  MOVLW  04
036C:  MOVWF  77
036D:  DECFSZ 77,F
036E:  GOTO   36D
036F:  BCF    07.3
0370:  BCF    2E.3
0371:  MOVF   2E,W
0372:  BSF    03.5
0373:  MOVWF  07
0374:  NOP
0375:  BCF    03.5
0376:  BSF    2E.4
0377:  MOVF   2E,W
0378:  BSF    03.5
0379:  MOVWF  07
037A:  MOVLW  03
037B:  MOVWF  77
037C:  BCF    03.5
037D:  DECFSZ 77,F
037E:  GOTO   37D
037F:  MOVLW  03
0380:  MOVWF  77
0381:  DECFSZ 77,F
0382:  GOTO   381
0383:  BSF    2E.3
0384:  MOVF   2E,W
0385:  BSF    03.5
0386:  MOVWF  07
0387:  BCF    03.5
0388:  BTFSS  07.3
0389:  GOTO   388
038A:  CLRF   78
038B:  MOVLW  03
038C:  MOVWF  77
038D:  DECFSZ 77,F
038E:  GOTO   38D
038F:  BTFSC  07.4
0390:  BSF    78.0
0391:  BCF    07.3
0392:  BCF    2E.3
0393:  MOVF   2E,W
0394:  BSF    03.5
0395:  MOVWF  07
0396:  BCF    03.5
0397:  BCF    07.4
0398:  BCF    2E.4
0399:  MOVF   2E,W
039A:  BSF    03.5
039B:  MOVWF  07
039C:  BCF    03.5
039D:  RETURN
039E:  MOVLW  08
039F:  MOVWF  59
03A0:  MOVF   77,W
03A1:  MOVWF  5A
03A2:  BSF    2E.4
03A3:  MOVF   2E,W
03A4:  BSF    03.5
03A5:  MOVWF  07
03A6:  MOVLW  03
03A7:  MOVWF  77
03A8:  BCF    03.5
03A9:  DECFSZ 77,F
03AA:  GOTO   3A9
03AB:  BSF    2E.3
03AC:  MOVF   2E,W
03AD:  BSF    03.5
03AE:  MOVWF  07
03AF:  BCF    03.5
03B0:  BTFSS  07.3
03B1:  GOTO   3B0
03B2:  BTFSC  07.4
03B3:  BSF    03.0
03B4:  BTFSS  07.4
03B5:  BCF    03.0
03B6:  RLF    78,F
03B7:  MOVLW  04
03B8:  MOVWF  77
03B9:  DECFSZ 77,F
03BA:  GOTO   3B9
03BB:  BCF    2E.3
03BC:  MOVF   2E,W
03BD:  BSF    03.5
03BE:  MOVWF  07
03BF:  BCF    03.5
03C0:  BCF    07.3
03C1:  DECFSZ 59,F
03C2:  GOTO   3A2
03C3:  BSF    2E.4
03C4:  MOVF   2E,W
03C5:  BSF    03.5
03C6:  MOVWF  07
03C7:  MOVLW  03
03C8:  MOVWF  77
03C9:  BCF    03.5
03CA:  DECFSZ 77,F
03CB:  GOTO   3CA
03CC:  BCF    07.4
03CD:  MOVF   5A,W
03CE:  BTFSC  03.2
03CF:  GOTO   3D5
03D0:  BCF    2E.4
03D1:  MOVF   2E,W
03D2:  BSF    03.5
03D3:  MOVWF  07
03D4:  BCF    03.5
03D5:  NOP
03D6:  BSF    2E.3
03D7:  MOVF   2E,W
03D8:  BSF    03.5
03D9:  MOVWF  07
03DA:  BCF    03.5
03DB:  BTFSS  07.3
03DC:  GOTO   3DB
03DD:  MOVLW  04
03DE:  MOVWF  77
03DF:  DECFSZ 77,F
03E0:  GOTO   3DF
03E1:  BCF    07.3
03E2:  BCF    2E.3
03E3:  MOVF   2E,W
03E4:  BSF    03.5
03E5:  MOVWF  07
03E6:  MOVLW  03
03E7:  MOVWF  77
03E8:  BCF    03.5
03E9:  DECFSZ 77,F
03EA:  GOTO   3E9
03EB:  BCF    07.4
03EC:  BCF    2E.4
03ED:  MOVF   2E,W
03EE:  BSF    03.5
03EF:  MOVWF  07
03F0:  BCF    03.5
03F1:  RETURN
....................  
.................... int8 bin2bcd(int8 bin_value);  
.................... int8 bcd2bin(int8 bcd_value);  
....................  
.................... void ds1307_init(void)  
03F2:  CLRF   54
.................... {  
....................    int8 byte0 = 0;  
....................  
....................    i2c_start();          // send start signal 
03F3:  BSF    2E.4
03F4:  MOVF   2E,W
03F5:  BSF    03.5
03F6:  MOVWF  07
03F7:  MOVLW  04
03F8:  MOVWF  77
03F9:  BCF    03.5
03FA:  DECFSZ 77,F
03FB:  GOTO   3FA
03FC:  BSF    2E.3
03FD:  MOVF   2E,W
03FE:  BSF    03.5
03FF:  MOVWF  07
0400:  MOVLW  03
0401:  MOVWF  77
0402:  BCF    03.5
0403:  DECFSZ 77,F
0404:  GOTO   403
0405:  BCF    07.4
0406:  BCF    2E.4
0407:  MOVF   2E,W
0408:  BSF    03.5
0409:  MOVWF  07
040A:  MOVLW  04
040B:  MOVWF  77
040C:  BCF    03.5
040D:  DECFSZ 77,F
040E:  GOTO   40D
040F:  BCF    07.3
0410:  BCF    2E.3
0411:  MOVF   2E,W
0412:  BSF    03.5
0413:  MOVWF  07
....................    i2c_write(0xD0);      // indentification of I2C slave device with write operation 
0414:  MOVLW  D0
0415:  BCF    03.5
0416:  MOVWF  58
0417:  CALL   342
....................    i2c_write(0x00);      // address of register 0 
0418:  CLRF   58
0419:  CALL   342
....................    i2c_start(); 
041A:  BSF    2E.4
041B:  MOVF   2E,W
041C:  BSF    03.5
041D:  MOVWF  07
041E:  MOVLW  04
041F:  MOVWF  77
0420:  BCF    03.5
0421:  DECFSZ 77,F
0422:  GOTO   421
0423:  BSF    2E.3
0424:  MOVF   2E,W
0425:  BSF    03.5
0426:  MOVWF  07
0427:  MOVLW  03
0428:  MOVWF  77
0429:  BCF    03.5
042A:  DECFSZ 77,F
042B:  GOTO   42A
042C:  BTFSS  07.3
042D:  GOTO   42C
042E:  BCF    07.4
042F:  BCF    2E.4
0430:  MOVF   2E,W
0431:  BSF    03.5
0432:  MOVWF  07
0433:  MOVLW  04
0434:  MOVWF  77
0435:  BCF    03.5
0436:  DECFSZ 77,F
0437:  GOTO   436
0438:  BCF    07.3
0439:  BCF    2E.3
043A:  MOVF   2E,W
043B:  BSF    03.5
043C:  MOVWF  07
....................    i2c_write(0xD1);      // change operation to read 
043D:  MOVLW  D1
043E:  BCF    03.5
043F:  MOVWF  58
0440:  CALL   342
....................    byte0 = i2c_read(0);  // read current first byte in DS1307, which stores seconds value and CH bit (Clock Halt) 
0441:  CLRF   77
0442:  CALL   39E
0443:  MOVF   78,W
0444:  MOVWF  54
....................    i2c_stop();           // send stop signal 
0445:  BCF    2E.4
0446:  MOVF   2E,W
0447:  BSF    03.5
0448:  MOVWF  07
0449:  NOP
044A:  BCF    03.5
044B:  BSF    2E.3
044C:  MOVF   2E,W
044D:  BSF    03.5
044E:  MOVWF  07
044F:  BCF    03.5
0450:  BTFSS  07.3
0451:  GOTO   450
0452:  MOVLW  04
0453:  MOVWF  77
0454:  DECFSZ 77,F
0455:  GOTO   454
0456:  GOTO   457
0457:  NOP
0458:  BSF    2E.4
0459:  MOVF   2E,W
045A:  BSF    03.5
045B:  MOVWF  07
045C:  MOVLW  04
045D:  MOVWF  77
045E:  BCF    03.5
045F:  DECFSZ 77,F
0460:  GOTO   45F
....................    bit_clear(byte0, 7);  // clear bit 7 to enable oscillator, needed for clock to run 
0461:  BCF    54.7
....................  
....................    delay_us(3);          // make sure another transmit is possible, base on datasheet 
0462:  MOVLW  04
0463:  MOVWF  77
0464:  DECFSZ 77,F
0465:  GOTO   464
0466:  GOTO   467
....................  
....................    i2c_start();  
0467:  BSF    2E.4
0468:  MOVF   2E,W
0469:  BSF    03.5
046A:  MOVWF  07
046B:  MOVLW  04
046C:  MOVWF  77
046D:  BCF    03.5
046E:  DECFSZ 77,F
046F:  GOTO   46E
0470:  BSF    2E.3
0471:  MOVF   2E,W
0472:  BSF    03.5
0473:  MOVWF  07
0474:  MOVLW  03
0475:  MOVWF  77
0476:  BCF    03.5
0477:  DECFSZ 77,F
0478:  GOTO   477
0479:  BCF    07.4
047A:  BCF    2E.4
047B:  MOVF   2E,W
047C:  BSF    03.5
047D:  MOVWF  07
047E:  MOVLW  04
047F:  MOVWF  77
0480:  BCF    03.5
0481:  DECFSZ 77,F
0482:  GOTO   481
0483:  BCF    07.3
0484:  BCF    2E.3
0485:  MOVF   2E,W
0486:  BSF    03.5
0487:  MOVWF  07
....................    i2c_write(0xD0);      // write to ds1307 
0488:  MOVLW  D0
0489:  BCF    03.5
048A:  MOVWF  58
048B:  CALL   342
....................    i2c_write(0x00);      // register 0 
048C:  CLRF   58
048D:  CALL   342
....................    i2c_write(byte0);     // write to register 0 with the same seconds and bit 7 cleared 
048E:  MOVF   54,W
048F:  MOVWF  58
0490:  CALL   342
....................    i2c_stop(); 
0491:  BCF    2E.4
0492:  MOVF   2E,W
0493:  BSF    03.5
0494:  MOVWF  07
0495:  NOP
0496:  BCF    03.5
0497:  BSF    2E.3
0498:  MOVF   2E,W
0499:  BSF    03.5
049A:  MOVWF  07
049B:  BCF    03.5
049C:  BTFSS  07.3
049D:  GOTO   49C
049E:  MOVLW  04
049F:  MOVWF  77
04A0:  DECFSZ 77,F
04A1:  GOTO   4A0
04A2:  GOTO   4A3
04A3:  NOP
04A4:  BSF    2E.4
04A5:  MOVF   2E,W
04A6:  BSF    03.5
04A7:  MOVWF  07
04A8:  MOVLW  04
04A9:  MOVWF  77
04AA:  BCF    03.5
04AB:  DECFSZ 77,F
04AC:  GOTO   4AB
....................     
....................    delay_us(3); 
04AD:  MOVLW  04
04AE:  MOVWF  77
04AF:  DECFSZ 77,F
04B0:  GOTO   4AF
04B1:  GOTO   4B2
....................     
....................    i2c_start(); 
04B2:  BSF    2E.4
04B3:  MOVF   2E,W
04B4:  BSF    03.5
04B5:  MOVWF  07
04B6:  MOVLW  04
04B7:  MOVWF  77
04B8:  BCF    03.5
04B9:  DECFSZ 77,F
04BA:  GOTO   4B9
04BB:  BSF    2E.3
04BC:  MOVF   2E,W
04BD:  BSF    03.5
04BE:  MOVWF  07
04BF:  MOVLW  03
04C0:  MOVWF  77
04C1:  BCF    03.5
04C2:  DECFSZ 77,F
04C3:  GOTO   4C2
04C4:  BCF    07.4
04C5:  BCF    2E.4
04C6:  MOVF   2E,W
04C7:  BSF    03.5
04C8:  MOVWF  07
04C9:  MOVLW  04
04CA:  MOVWF  77
04CB:  BCF    03.5
04CC:  DECFSZ 77,F
04CD:  GOTO   4CC
04CE:  BCF    07.3
04CF:  BCF    2E.3
04D0:  MOVF   2E,W
04D1:  BSF    03.5
04D2:  MOVWF  07
....................    i2c_write(0xD0); 
04D3:  MOVLW  D0
04D4:  BCF    03.5
04D5:  MOVWF  58
04D6:  CALL   342
....................    i2c_write(0x07);      // Control Register  
04D7:  MOVLW  07
04D8:  MOVWF  58
04D9:  CALL   342
....................    i2c_write(0x10);      // enable squarewave output pin with frequency 1Hz 
04DA:  MOVLW  10
04DB:  MOVWF  58
04DC:  CALL   342
....................    i2c_stop();  
04DD:  BCF    2E.4
04DE:  MOVF   2E,W
04DF:  BSF    03.5
04E0:  MOVWF  07
04E1:  NOP
04E2:  BCF    03.5
04E3:  BSF    2E.3
04E4:  MOVF   2E,W
04E5:  BSF    03.5
04E6:  MOVWF  07
04E7:  BCF    03.5
04E8:  BTFSS  07.3
04E9:  GOTO   4E8
04EA:  MOVLW  04
04EB:  MOVWF  77
04EC:  DECFSZ 77,F
04ED:  GOTO   4EC
04EE:  GOTO   4EF
04EF:  NOP
04F0:  BSF    2E.4
04F1:  MOVF   2E,W
04F2:  BSF    03.5
04F3:  MOVWF  07
04F4:  MOVLW  04
04F5:  MOVWF  77
04F6:  BCF    03.5
04F7:  DECFSZ 77,F
04F8:  GOTO   4F7
04F9:  BCF    0A.3
04FA:  BSF    0A.4
04FB:  GOTO   035 (RETURN)
....................  
.................... }  
....................  
.................... void ds1307_set_date_time(int8 day, int8 mth, int8 year, int8 dow, int8 hr, int8 min, int8 sec)  
.................... {  
....................   sec &= 0x7F;           // clear CH bit 
....................   hr  &= 0x3F;           // set 24h time mode 
....................  
....................   i2c_start();  
....................   i2c_write(0xD0);            // I2C write address  
....................   i2c_write(0x00);            // Start at REG 0 
....................   i2c_write(bin2bcd(sec));    // REG 0 - seconds 
....................   i2c_write(bin2bcd(min));    // REG 1 - minutes 
....................   i2c_write(bin2bcd(hr));     // REG 2 - hours 
....................   i2c_write(bin2bcd(dow));    // REG 3 - date of week 
....................   i2c_write(bin2bcd(day));    // REG 4 - day of month 
....................   i2c_write(bin2bcd(mth));    // REG 5 - month 
....................   i2c_write(bin2bcd(year));   // REG 6 - year 
....................   //i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
....................   i2c_stop();  
.................... }  
....................  
.................... void ds1307_get_date(int8 &day, int8 &mth, int8 &year, int8 &dow)  
.................... {  
....................   i2c_start();  
*
1173:  BSF    2E.4
1174:  MOVF   2E,W
1175:  BSF    03.5
1176:  MOVWF  07
1177:  MOVLW  04
1178:  MOVWF  77
1179:  BCF    03.5
117A:  DECFSZ 77,F
117B:  GOTO   17A
117C:  BSF    2E.3
117D:  MOVF   2E,W
117E:  BSF    03.5
117F:  MOVWF  07
1180:  MOVLW  03
1181:  MOVWF  77
1182:  BCF    03.5
1183:  DECFSZ 77,F
1184:  GOTO   183
1185:  BCF    07.4
1186:  BCF    2E.4
1187:  MOVF   2E,W
1188:  BSF    03.5
1189:  MOVWF  07
118A:  MOVLW  04
118B:  MOVWF  77
118C:  BCF    03.5
118D:  DECFSZ 77,F
118E:  GOTO   18D
118F:  BCF    07.3
1190:  BCF    2E.3
1191:  MOVF   2E,W
1192:  BSF    03.5
1193:  MOVWF  07
*
131A:  BSF    2E.4
131B:  MOVF   2E,W
131C:  BSF    03.5
131D:  MOVWF  07
131E:  MOVLW  04
131F:  MOVWF  77
1320:  BCF    03.5
1321:  DECFSZ 77,F
1322:  GOTO   321
1323:  BSF    2E.3
1324:  MOVF   2E,W
1325:  BSF    03.5
1326:  MOVWF  07
1327:  MOVLW  03
1328:  MOVWF  77
1329:  BCF    03.5
132A:  DECFSZ 77,F
132B:  GOTO   32A
132C:  BCF    07.4
132D:  BCF    2E.4
132E:  MOVF   2E,W
132F:  BSF    03.5
1330:  MOVWF  07
1331:  MOVLW  04
1332:  MOVWF  77
1333:  BCF    03.5
1334:  DECFSZ 77,F
1335:  GOTO   334
1336:  BCF    07.3
1337:  BCF    2E.3
1338:  MOVF   2E,W
1339:  BSF    03.5
133A:  MOVWF  07
....................   i2c_write(0xD0);  
*
1194:  MOVLW  D0
1195:  BCF    03.5
1196:  MOVWF  58
1197:  BCF    0A.4
1198:  CALL   342
1199:  BSF    0A.4
*
133B:  MOVLW  D0
133C:  BCF    03.5
133D:  MOVWF  58
133E:  BCF    0A.4
133F:  CALL   342
1340:  BSF    0A.4
....................   i2c_write(0x03);            // Start at REG 3 
*
119A:  MOVLW  03
119B:  MOVWF  58
119C:  BCF    0A.4
119D:  CALL   342
119E:  BSF    0A.4
*
1341:  MOVLW  03
1342:  MOVWF  58
1343:  BCF    0A.4
1344:  CALL   342
1345:  BSF    0A.4
....................   i2c_start();  
*
119F:  BSF    2E.4
11A0:  MOVF   2E,W
11A1:  BSF    03.5
11A2:  MOVWF  07
11A3:  MOVLW  04
11A4:  MOVWF  77
11A5:  BCF    03.5
11A6:  DECFSZ 77,F
11A7:  GOTO   1A6
11A8:  BSF    2E.3
11A9:  MOVF   2E,W
11AA:  BSF    03.5
11AB:  MOVWF  07
11AC:  MOVLW  03
11AD:  MOVWF  77
11AE:  BCF    03.5
11AF:  DECFSZ 77,F
11B0:  GOTO   1AF
11B1:  BTFSS  07.3
11B2:  GOTO   1B1
11B3:  BCF    07.4
11B4:  BCF    2E.4
11B5:  MOVF   2E,W
11B6:  BSF    03.5
11B7:  MOVWF  07
11B8:  MOVLW  04
11B9:  MOVWF  77
11BA:  BCF    03.5
11BB:  DECFSZ 77,F
11BC:  GOTO   1BB
11BD:  BCF    07.3
11BE:  BCF    2E.3
11BF:  MOVF   2E,W
11C0:  BSF    03.5
11C1:  MOVWF  07
*
1346:  BSF    2E.4
1347:  MOVF   2E,W
1348:  BSF    03.5
1349:  MOVWF  07
134A:  MOVLW  04
134B:  MOVWF  77
134C:  BCF    03.5
134D:  DECFSZ 77,F
134E:  GOTO   34D
134F:  BSF    2E.3
1350:  MOVF   2E,W
1351:  BSF    03.5
1352:  MOVWF  07
1353:  MOVLW  03
1354:  MOVWF  77
1355:  BCF    03.5
1356:  DECFSZ 77,F
1357:  GOTO   356
1358:  BTFSS  07.3
1359:  GOTO   358
135A:  BCF    07.4
135B:  BCF    2E.4
135C:  MOVF   2E,W
135D:  BSF    03.5
135E:  MOVWF  07
135F:  MOVLW  04
1360:  MOVWF  77
1361:  BCF    03.5
1362:  DECFSZ 77,F
1363:  GOTO   362
1364:  BCF    07.3
1365:  BCF    2E.3
1366:  MOVF   2E,W
1367:  BSF    03.5
1368:  MOVWF  07
....................   i2c_write(0xD1);            // change to read 
*
11C2:  MOVLW  D1
11C3:  BCF    03.5
11C4:  MOVWF  58
11C5:  BCF    0A.4
11C6:  CALL   342
11C7:  BSF    0A.4
*
1369:  MOVLW  D1
136A:  BCF    03.5
136B:  MOVWF  58
136C:  BCF    0A.4
136D:  CALL   342
136E:  BSF    0A.4
....................   dow  = bcd2bin(i2c_read(1) & 0x07);   // REG 3 - date of week  
*
11C8:  MOVLW  01
11C9:  MOVWF  77
11CA:  BCF    0A.4
11CB:  CALL   39E
11CC:  BSF    0A.4
11CD:  MOVF   78,W
11CE:  ANDLW  07
11CF:  MOVWF  54
11D0:  MOVWF  59
11D1:  BCF    0A.4
11D2:  CALL   4FC
11D3:  BSF    0A.4
11D4:  MOVF   78,W
11D5:  MOVWF  40
*
136F:  MOVLW  01
1370:  MOVWF  77
1371:  BCF    0A.4
1372:  CALL   39E
1373:  BSF    0A.4
1374:  MOVF   78,W
1375:  ANDLW  07
1376:  MOVWF  54
1377:  MOVWF  59
1378:  BCF    0A.4
1379:  CALL   4FC
137A:  BSF    0A.4
137B:  MOVF   78,W
137C:  MOVWF  40
....................   day  = bcd2bin(i2c_read(1) & 0x3f);   // REG 4 - day of month 
*
11D6:  MOVLW  01
11D7:  MOVWF  77
11D8:  BCF    0A.4
11D9:  CALL   39E
11DA:  BSF    0A.4
11DB:  MOVF   78,W
11DC:  ANDLW  3F
11DD:  MOVWF  54
11DE:  MOVWF  59
11DF:  BCF    0A.4
11E0:  CALL   4FC
11E1:  BSF    0A.4
11E2:  MOVF   78,W
11E3:  MOVWF  3D
*
137D:  MOVLW  01
137E:  MOVWF  77
137F:  BCF    0A.4
1380:  CALL   39E
1381:  BSF    0A.4
1382:  MOVF   78,W
1383:  ANDLW  3F
1384:  MOVWF  54
1385:  MOVWF  59
1386:  BCF    0A.4
1387:  CALL   4FC
1388:  BSF    0A.4
1389:  MOVF   78,W
138A:  MOVWF  3D
....................   mth  = bcd2bin(i2c_read(1) & 0x1f);   // REG 5 - month 
*
11E4:  MOVLW  01
11E5:  MOVWF  77
11E6:  BCF    0A.4
11E7:  CALL   39E
11E8:  BSF    0A.4
11E9:  MOVF   78,W
11EA:  ANDLW  1F
11EB:  MOVWF  54
11EC:  MOVWF  59
11ED:  BCF    0A.4
11EE:  CALL   4FC
11EF:  BSF    0A.4
11F0:  MOVF   78,W
11F1:  MOVWF  3E
*
138B:  MOVLW  01
138C:  MOVWF  77
138D:  BCF    0A.4
138E:  CALL   39E
138F:  BSF    0A.4
1390:  MOVF   78,W
1391:  ANDLW  1F
1392:  MOVWF  54
1393:  MOVWF  59
1394:  BCF    0A.4
1395:  CALL   4FC
1396:  BSF    0A.4
1397:  MOVF   78,W
1398:  MOVWF  3E
....................   year = bcd2bin(i2c_read(0));          // REG 6 - year 
*
11F2:  CLRF   77
11F3:  BCF    0A.4
11F4:  CALL   39E
11F5:  BSF    0A.4
11F6:  MOVF   78,W
11F7:  MOVWF  54
11F8:  MOVWF  59
11F9:  BCF    0A.4
11FA:  CALL   4FC
11FB:  BSF    0A.4
11FC:  MOVF   78,W
11FD:  MOVWF  3F
*
1399:  CLRF   77
139A:  BCF    0A.4
139B:  CALL   39E
139C:  BSF    0A.4
139D:  MOVF   78,W
139E:  MOVWF  54
139F:  MOVWF  59
13A0:  BCF    0A.4
13A1:  CALL   4FC
13A2:  BSF    0A.4
13A3:  MOVF   78,W
13A4:  MOVWF  3F
....................   i2c_stop();  
*
11FE:  BCF    2E.4
11FF:  MOVF   2E,W
1200:  BSF    03.5
1201:  MOVWF  07
1202:  NOP
1203:  BCF    03.5
1204:  BSF    2E.3
1205:  MOVF   2E,W
1206:  BSF    03.5
1207:  MOVWF  07
1208:  BCF    03.5
1209:  BTFSS  07.3
120A:  GOTO   209
120B:  MOVLW  04
120C:  MOVWF  77
120D:  DECFSZ 77,F
120E:  GOTO   20D
120F:  GOTO   210
1210:  NOP
1211:  BSF    2E.4
1212:  MOVF   2E,W
1213:  BSF    03.5
1214:  MOVWF  07
1215:  MOVLW  04
1216:  MOVWF  77
1217:  BCF    03.5
1218:  DECFSZ 77,F
1219:  GOTO   218
*
13A5:  BCF    2E.4
13A6:  MOVF   2E,W
13A7:  BSF    03.5
13A8:  MOVWF  07
13A9:  NOP
13AA:  BCF    03.5
13AB:  BSF    2E.3
13AC:  MOVF   2E,W
13AD:  BSF    03.5
13AE:  MOVWF  07
13AF:  BCF    03.5
13B0:  BTFSS  07.3
13B1:  GOTO   3B0
13B2:  MOVLW  04
13B3:  MOVWF  77
13B4:  DECFSZ 77,F
13B5:  GOTO   3B4
13B6:  GOTO   3B7
13B7:  NOP
13B8:  BSF    2E.4
13B9:  MOVF   2E,W
13BA:  BSF    03.5
13BB:  MOVWF  07
13BC:  MOVLW  04
13BD:  MOVWF  77
13BE:  BCF    03.5
13BF:  DECFSZ 77,F
13C0:  GOTO   3BF
.................... }  
....................  
.................... void ds1307_get_time(int8 &hr, int8 &min, int8 &sec)  
.................... {  
....................   i2c_start();  
*
10DA:  BSF    2E.4
10DB:  MOVF   2E,W
10DC:  BSF    03.5
10DD:  MOVWF  07
10DE:  MOVLW  04
10DF:  MOVWF  77
10E0:  BCF    03.5
10E1:  DECFSZ 77,F
10E2:  GOTO   0E1
10E3:  BSF    2E.3
10E4:  MOVF   2E,W
10E5:  BSF    03.5
10E6:  MOVWF  07
10E7:  MOVLW  03
10E8:  MOVWF  77
10E9:  BCF    03.5
10EA:  DECFSZ 77,F
10EB:  GOTO   0EA
10EC:  BCF    07.4
10ED:  BCF    2E.4
10EE:  MOVF   2E,W
10EF:  BSF    03.5
10F0:  MOVWF  07
10F1:  MOVLW  04
10F2:  MOVWF  77
10F3:  BCF    03.5
10F4:  DECFSZ 77,F
10F5:  GOTO   0F4
10F6:  BCF    07.3
10F7:  BCF    2E.3
10F8:  MOVF   2E,W
10F9:  BSF    03.5
10FA:  MOVWF  07
*
1281:  BSF    2E.4
1282:  MOVF   2E,W
1283:  BSF    03.5
1284:  MOVWF  07
1285:  MOVLW  04
1286:  MOVWF  77
1287:  BCF    03.5
1288:  DECFSZ 77,F
1289:  GOTO   288
128A:  BSF    2E.3
128B:  MOVF   2E,W
128C:  BSF    03.5
128D:  MOVWF  07
128E:  MOVLW  03
128F:  MOVWF  77
1290:  BCF    03.5
1291:  DECFSZ 77,F
1292:  GOTO   291
1293:  BCF    07.4
1294:  BCF    2E.4
1295:  MOVF   2E,W
1296:  BSF    03.5
1297:  MOVWF  07
1298:  MOVLW  04
1299:  MOVWF  77
129A:  BCF    03.5
129B:  DECFSZ 77,F
129C:  GOTO   29B
129D:  BCF    07.3
129E:  BCF    2E.3
129F:  MOVF   2E,W
12A0:  BSF    03.5
12A1:  MOVWF  07
*
13E9:  BSF    2E.4
13EA:  MOVF   2E,W
13EB:  BSF    03.5
13EC:  MOVWF  07
13ED:  MOVLW  04
13EE:  MOVWF  77
13EF:  BCF    03.5
13F0:  DECFSZ 77,F
13F1:  GOTO   3F0
13F2:  BSF    2E.3
13F3:  MOVF   2E,W
13F4:  BSF    03.5
13F5:  MOVWF  07
13F6:  MOVLW  03
13F7:  MOVWF  77
13F8:  BCF    03.5
13F9:  DECFSZ 77,F
13FA:  GOTO   3F9
13FB:  BCF    07.4
13FC:  BCF    2E.4
13FD:  MOVF   2E,W
13FE:  BSF    03.5
13FF:  MOVWF  07
1400:  MOVLW  04
1401:  MOVWF  77
1402:  BCF    03.5
1403:  DECFSZ 77,F
1404:  GOTO   403
1405:  BCF    07.3
1406:  BCF    2E.3
1407:  MOVF   2E,W
1408:  BSF    03.5
1409:  MOVWF  07
....................   i2c_write(0xD0);  
*
10FB:  MOVLW  D0
10FC:  BCF    03.5
10FD:  MOVWF  58
10FE:  BCF    0A.4
10FF:  CALL   342
1100:  BSF    0A.4
*
12A2:  MOVLW  D0
12A3:  BCF    03.5
12A4:  MOVWF  58
12A5:  BCF    0A.4
12A6:  CALL   342
12A7:  BSF    0A.4
*
140A:  MOVLW  D0
140B:  BCF    03.5
140C:  MOVWF  58
140D:  BCF    0A.4
140E:  CALL   342
140F:  BSF    0A.4
....................   i2c_write(0x00);                    // Start at REG 0 
*
1101:  CLRF   58
1102:  BCF    0A.4
1103:  CALL   342
1104:  BSF    0A.4
*
12A8:  CLRF   58
12A9:  BCF    0A.4
12AA:  CALL   342
12AB:  BSF    0A.4
*
1410:  CLRF   58
1411:  BCF    0A.4
1412:  CALL   342
1413:  BSF    0A.4
....................   i2c_start();  
*
1105:  BSF    2E.4
1106:  MOVF   2E,W
1107:  BSF    03.5
1108:  MOVWF  07
1109:  MOVLW  04
110A:  MOVWF  77
110B:  BCF    03.5
110C:  DECFSZ 77,F
110D:  GOTO   10C
110E:  BSF    2E.3
110F:  MOVF   2E,W
1110:  BSF    03.5
1111:  MOVWF  07
1112:  MOVLW  03
1113:  MOVWF  77
1114:  BCF    03.5
1115:  DECFSZ 77,F
1116:  GOTO   115
1117:  BTFSS  07.3
1118:  GOTO   117
1119:  BCF    07.4
111A:  BCF    2E.4
111B:  MOVF   2E,W
111C:  BSF    03.5
111D:  MOVWF  07
111E:  MOVLW  04
111F:  MOVWF  77
1120:  BCF    03.5
1121:  DECFSZ 77,F
1122:  GOTO   121
1123:  BCF    07.3
1124:  BCF    2E.3
1125:  MOVF   2E,W
1126:  BSF    03.5
1127:  MOVWF  07
*
12AC:  BSF    2E.4
12AD:  MOVF   2E,W
12AE:  BSF    03.5
12AF:  MOVWF  07
12B0:  MOVLW  04
12B1:  MOVWF  77
12B2:  BCF    03.5
12B3:  DECFSZ 77,F
12B4:  GOTO   2B3
12B5:  BSF    2E.3
12B6:  MOVF   2E,W
12B7:  BSF    03.5
12B8:  MOVWF  07
12B9:  MOVLW  03
12BA:  MOVWF  77
12BB:  BCF    03.5
12BC:  DECFSZ 77,F
12BD:  GOTO   2BC
12BE:  BTFSS  07.3
12BF:  GOTO   2BE
12C0:  BCF    07.4
12C1:  BCF    2E.4
12C2:  MOVF   2E,W
12C3:  BSF    03.5
12C4:  MOVWF  07
12C5:  MOVLW  04
12C6:  MOVWF  77
12C7:  BCF    03.5
12C8:  DECFSZ 77,F
12C9:  GOTO   2C8
12CA:  BCF    07.3
12CB:  BCF    2E.3
12CC:  MOVF   2E,W
12CD:  BSF    03.5
12CE:  MOVWF  07
*
1414:  BSF    2E.4
1415:  MOVF   2E,W
1416:  BSF    03.5
1417:  MOVWF  07
1418:  MOVLW  04
1419:  MOVWF  77
141A:  BCF    03.5
141B:  DECFSZ 77,F
141C:  GOTO   41B
141D:  BSF    2E.3
141E:  MOVF   2E,W
141F:  BSF    03.5
1420:  MOVWF  07
1421:  MOVLW  03
1422:  MOVWF  77
1423:  BCF    03.5
1424:  DECFSZ 77,F
1425:  GOTO   424
1426:  BTFSS  07.3
1427:  GOTO   426
1428:  BCF    07.4
1429:  BCF    2E.4
142A:  MOVF   2E,W
142B:  BSF    03.5
142C:  MOVWF  07
142D:  MOVLW  04
142E:  MOVWF  77
142F:  BCF    03.5
1430:  DECFSZ 77,F
1431:  GOTO   430
1432:  BCF    07.3
1433:  BCF    2E.3
1434:  MOVF   2E,W
1435:  BSF    03.5
1436:  MOVWF  07
....................   i2c_write(0xD1);                    // read mode 
*
1128:  MOVLW  D1
1129:  BCF    03.5
112A:  MOVWF  58
112B:  BCF    0A.4
112C:  CALL   342
112D:  BSF    0A.4
*
12CF:  MOVLW  D1
12D0:  BCF    03.5
12D1:  MOVWF  58
12D2:  BCF    0A.4
12D3:  CALL   342
12D4:  BSF    0A.4
*
1437:  MOVLW  D1
1438:  BCF    03.5
1439:  MOVWF  58
143A:  BCF    0A.4
143B:  CALL   342
143C:  BSF    0A.4
....................   sec = bcd2bin(i2c_read(1) & 0x7f);  // REG 0 - seconds, exclude CH bit 
*
112E:  MOVLW  01
112F:  MOVWF  77
1130:  BCF    0A.4
1131:  CALL   39E
1132:  BSF    0A.4
1133:  MOVF   78,W
1134:  ANDLW  7F
1135:  MOVWF  54
1136:  MOVWF  59
1137:  BCF    0A.4
1138:  CALL   4FC
1139:  BSF    0A.4
113A:  MOVF   78,W
113B:  MOVWF  43
*
12D5:  MOVLW  01
12D6:  MOVWF  77
12D7:  BCF    0A.4
12D8:  CALL   39E
12D9:  BSF    0A.4
12DA:  MOVF   78,W
12DB:  ANDLW  7F
12DC:  MOVWF  54
12DD:  MOVWF  59
12DE:  BCF    0A.4
12DF:  CALL   4FC
12E0:  BSF    0A.4
12E1:  MOVF   78,W
12E2:  MOVWF  43
*
143D:  MOVLW  01
143E:  MOVWF  77
143F:  BCF    0A.4
1440:  CALL   39E
1441:  BSF    0A.4
1442:  MOVF   78,W
1443:  ANDLW  7F
1444:  MOVWF  54
1445:  MOVWF  59
1446:  BCF    0A.4
1447:  CALL   4FC
1448:  BSF    0A.4
1449:  MOVF   78,W
144A:  MOVWF  43
....................   min = bcd2bin(i2c_read(1) & 0x7f);  // REG 1 - minutes 
*
113C:  MOVLW  01
113D:  MOVWF  77
113E:  BCF    0A.4
113F:  CALL   39E
1140:  BSF    0A.4
1141:  MOVF   78,W
1142:  ANDLW  7F
1143:  MOVWF  54
1144:  MOVWF  59
1145:  BCF    0A.4
1146:  CALL   4FC
1147:  BSF    0A.4
1148:  MOVF   78,W
1149:  MOVWF  42
*
12E3:  MOVLW  01
12E4:  MOVWF  77
12E5:  BCF    0A.4
12E6:  CALL   39E
12E7:  BSF    0A.4
12E8:  MOVF   78,W
12E9:  ANDLW  7F
12EA:  MOVWF  54
12EB:  MOVWF  59
12EC:  BCF    0A.4
12ED:  CALL   4FC
12EE:  BSF    0A.4
12EF:  MOVF   78,W
12F0:  MOVWF  42
*
144B:  MOVLW  01
144C:  MOVWF  77
144D:  BCF    0A.4
144E:  CALL   39E
144F:  BSF    0A.4
1450:  MOVF   78,W
1451:  ANDLW  7F
1452:  MOVWF  54
1453:  MOVWF  59
1454:  BCF    0A.4
1455:  CALL   4FC
1456:  BSF    0A.4
1457:  MOVF   78,W
1458:  MOVWF  42
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  // REG 2 - hours, 24h mode 
*
114A:  CLRF   77
114B:  BCF    0A.4
114C:  CALL   39E
114D:  BSF    0A.4
114E:  MOVF   78,W
114F:  ANDLW  3F
1150:  MOVWF  54
1151:  MOVWF  59
1152:  BCF    0A.4
1153:  CALL   4FC
1154:  BSF    0A.4
1155:  MOVF   78,W
1156:  MOVWF  41
*
12F1:  CLRF   77
12F2:  BCF    0A.4
12F3:  CALL   39E
12F4:  BSF    0A.4
12F5:  MOVF   78,W
12F6:  ANDLW  3F
12F7:  MOVWF  54
12F8:  MOVWF  59
12F9:  BCF    0A.4
12FA:  CALL   4FC
12FB:  BSF    0A.4
12FC:  MOVF   78,W
12FD:  MOVWF  41
*
1459:  CLRF   77
145A:  BCF    0A.4
145B:  CALL   39E
145C:  BSF    0A.4
145D:  MOVF   78,W
145E:  ANDLW  3F
145F:  MOVWF  54
1460:  MOVWF  59
1461:  BCF    0A.4
1462:  CALL   4FC
1463:  BSF    0A.4
1464:  MOVF   78,W
1465:  MOVWF  41
....................   i2c_stop();  
*
1157:  BCF    2E.4
1158:  MOVF   2E,W
1159:  BSF    03.5
115A:  MOVWF  07
115B:  NOP
115C:  BCF    03.5
115D:  BSF    2E.3
115E:  MOVF   2E,W
115F:  BSF    03.5
1160:  MOVWF  07
1161:  BCF    03.5
1162:  BTFSS  07.3
1163:  GOTO   162
1164:  MOVLW  04
1165:  MOVWF  77
1166:  DECFSZ 77,F
1167:  GOTO   166
1168:  GOTO   169
1169:  NOP
116A:  BSF    2E.4
116B:  MOVF   2E,W
116C:  BSF    03.5
116D:  MOVWF  07
116E:  MOVLW  04
116F:  MOVWF  77
1170:  BCF    03.5
1171:  DECFSZ 77,F
1172:  GOTO   171
*
12FE:  BCF    2E.4
12FF:  MOVF   2E,W
1300:  BSF    03.5
1301:  MOVWF  07
1302:  NOP
1303:  BCF    03.5
1304:  BSF    2E.3
1305:  MOVF   2E,W
1306:  BSF    03.5
1307:  MOVWF  07
1308:  BCF    03.5
1309:  BTFSS  07.3
130A:  GOTO   309
130B:  MOVLW  04
130C:  MOVWF  77
130D:  DECFSZ 77,F
130E:  GOTO   30D
130F:  GOTO   310
1310:  NOP
1311:  BSF    2E.4
1312:  MOVF   2E,W
1313:  BSF    03.5
1314:  MOVWF  07
1315:  MOVLW  04
1316:  MOVWF  77
1317:  BCF    03.5
1318:  DECFSZ 77,F
1319:  GOTO   318
*
1466:  BCF    2E.4
1467:  MOVF   2E,W
1468:  BSF    03.5
1469:  MOVWF  07
146A:  NOP
146B:  BCF    03.5
146C:  BSF    2E.3
146D:  MOVF   2E,W
146E:  BSF    03.5
146F:  MOVWF  07
1470:  BCF    03.5
1471:  BTFSS  07.3
1472:  GOTO   471
1473:  MOVLW  04
1474:  MOVWF  77
1475:  DECFSZ 77,F
1476:  GOTO   475
1477:  GOTO   478
1478:  NOP
1479:  BSF    2E.4
147A:  MOVF   2E,W
147B:  BSF    03.5
147C:  MOVWF  07
147D:  MOVLW  04
147E:  MOVWF  77
147F:  BCF    03.5
1480:  DECFSZ 77,F
1481:  GOTO   480
....................  
.................... }  
....................  
.................... //convert binary to BCD value using double dabble algorithm 
.................... int8 bin2bcd(int8 bin_value)  
.................... {  
....................   int32 dabble; 
....................   int8 hyaku, juu, ichi; 
....................   int8 i; 
....................  
....................   dabble = bin_value & 0x000000FF; 
....................   for(i = 0; i < 8; i++) 
....................   { 
....................     hyaku = (int8)(dabble >> 16) & 0x0F; 
....................     juu   = (int8)(dabble >> 12) & 0x0F; 
....................     ichi  = (int8)(dabble >> 8)  & 0x0F; 
....................     if(hyaku >= 5) hyaku += 3; 
....................     if(juu   >= 5) juu   += 3; 
....................     if(ichi  >= 5) ichi  += 3; 
....................     dabble = ((int32)hyaku << 16) | ((int32)juu << 12) | ((int32)ichi << 8) | (dabble & 0x000000FF); 
....................     dabble <<= 1; 
....................   } 
....................   juu   = (int8)(dabble >> 12) & 0x0F; 
....................   ichi  = (int8)(dabble >> 8)  & 0x0F; 
....................   return((juu << 4) | (ichi & 0x0F));  
.................... }  
....................  
....................  
.................... // BCD range 00 - 99 
.................... int8 bcd2bin(int8 bcd_value)  
.................... {  
....................   int8 temp; 
....................   temp = bcd_value; 
*
04FC:  MOVF   59,W
04FD:  MOVWF  5A
....................   temp &= 0xF0; //get high nibble which store tens value 
04FE:  MOVLW  F0
04FF:  ANDWF  5A,F
....................   return((temp >> 1) + (temp >> 3) + (bcd_value & 0x0F)); //(tens * 8) + (tens * 2) + ones 
0500:  BCF    03.0
0501:  RRF    5A,W
0502:  MOVWF  5B
0503:  RRF    5A,W
0504:  MOVWF  77
0505:  RRF    77,F
0506:  RRF    77,F
0507:  MOVLW  1F
0508:  ANDWF  77,F
0509:  MOVF   77,W
050A:  ADDWF  5B,F
050B:  MOVF   59,W
050C:  ANDLW  0F
050D:  ADDWF  5B,W
050E:  MOVWF  78
050F:  RETURN
.................... }  
....................  
....................  
.................... int8 timer1_overflow; 
.................... int32 sigHall_timer; 
.................... BYTE port_b, last_b; 
.................... int8 cycle_trigger; 
.................... int8 section_trigger; 
.................... int8 section_count; 
.................... int16 section_timer; 
.................... signed int8 tuning; 
.................... int8 mode; 
.................... int8 day, month, year, dow; 
.................... int8 hour, min, sec; 
.................... int8 tick, digit_sec; 
.................... int8 h_high, h_low, m_high, m_low, anal_hour; 
.................... int8 day_h, day_l, month_h, month_l; 
.................... int8 ast_count; 
.................... int8 pled_position, pled_direction, pled_count, pled_on; 
....................  
.................... #PRIORITY INT_CCP1, INT_TIMER0, INT_EXT, INT_RB 
....................  
.................... #INT_EXT 
.................... void EXT_isr(){ 
.................... 	tick += 1; 
*
0278:  MOVLW  01
0279:  ADDWF  44,F
.................... 	sec++; 
027A:  INCF   43,F
.................... 	if(pled_position == 20) pled_direction = 1; 
027B:  MOVF   50,W
027C:  SUBLW  14
027D:  BTFSS  03.2
027E:  GOTO   282
027F:  MOVLW  01
0280:  MOVWF  51
0281:  GOTO   287
.................... 	else if(pled_position == 50) pled_direction = 0; 
0282:  MOVF   50,W
0283:  SUBLW  32
0284:  BTFSS  03.2
0285:  GOTO   287
0286:  CLRF   51
.................... 	if(pled_direction == 0) pled_position--; 
0287:  MOVF   51,F
0288:  BTFSS  03.2
0289:  GOTO   28C
028A:  DECF   50,F
028B:  GOTO   28F
.................... 	else if(pled_direction == 1) pled_position++; 
028C:  DECFSZ 51,W
028D:  GOTO   28F
028E:  INCF   50,F
.................... } 
....................  
028F:  BCF    0B.1
0290:  BCF    0A.3
0291:  BCF    0A.4
0292:  GOTO   03D
.................... #INT_RB 
.................... void  RB_isr(void)  
.................... { 
....................    BYTE changes; 
....................    port_b = input_b(); 
0293:  MOVLW  FF
0294:  BSF    03.5
0295:  MOVWF  06
0296:  BCF    03.5
0297:  MOVF   06,W
0298:  MOVWF  34
....................    changes = last_b ^ port_b; 
0299:  MOVF   35,W
029A:  XORWF  34,W
029B:  MOVWF  61
....................    last_b = port_b; 
029C:  MOVF   34,W
029D:  MOVWF  35
....................    if(bit_test(changes, 2)) 
029E:  BTFSS  61.2
029F:  GOTO   2A2
....................    { 
....................       mode = MODE_A; 
02A0:  MOVLW  02
02A1:  MOVWF  3C
....................       //tuning = 6; 
....................       //section_timer = 64220; 
....................    } 
....................    if(bit_test(changes, 3)) 
02A2:  BTFSS  61.3
02A3:  GOTO   2A6
....................    { 
....................       mode = MODE_B; 
02A4:  MOVLW  03
02A5:  MOVWF  3C
....................       //tuning = 7; 
....................       //section_timer = 64230; 
....................    } 
....................    if(bit_test(changes, 4)) 
02A6:  BTFSS  61.4
02A7:  GOTO   2AA
....................    { 
....................       mode = MODE_C; 
02A8:  MOVLW  04
02A9:  MOVWF  3C
....................       //tuning = 8; 
....................       //section_timer = 64240; 
....................    } 
....................    if(bit_test(changes, 5)) 
02AA:  BTFSS  61.5
02AB:  GOTO   2AE
....................    { 
....................       mode = MODE_D; 
02AC:  MOVLW  05
02AD:  MOVWF  3C
....................       //tuning = 9; 
....................       //section_timer = 64250; 
....................    } 
.................... } 
....................  
02AE:  BCF    0B.0
02AF:  BCF    0A.3
02B0:  BCF    0A.4
02B1:  GOTO   03D
.................... #INT_TBE 
.................... void  TBE_isr(void)  
.................... { 
....................  
.................... } 
....................  
02B2:  BCF    0C.4
02B3:  BCF    0A.3
02B4:  BCF    0A.4
02B5:  GOTO   03D
.................... #INT_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................  
.................... } 
....................  
02B6:  BCF    0C.5
02B7:  BCF    0A.3
02B8:  BCF    0A.4
02B9:  GOTO   03D
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    timer1_overflow++; 
02BA:  INCF   2F,F
....................    //section_trigger = 1; 
....................    //set_timer1(section_timer); 
.................... } 
....................  
02BB:  BCF    0C.0
02BC:  BCF    0A.3
02BD:  BCF    0A.4
02BE:  GOTO   03D
.................... #INT_CCP1 
.................... void  CCP1_isr(void)  
.................... { 
....................    sigHall_timer = ((int32)timer1_overflow * 0xFFFF + CCP_1); 
02BF:  CLRF   64
02C0:  CLRF   63
02C1:  CLRF   62
02C2:  MOVF   2F,W
02C3:  MOVWF  61
02C4:  MOVF   64,W
02C5:  MOVWF  68
02C6:  MOVF   63,W
02C7:  MOVWF  67
02C8:  MOVF   62,W
02C9:  MOVWF  66
02CA:  MOVF   61,W
02CB:  MOVWF  65
02CC:  CLRF   6C
02CD:  CLRF   6B
02CE:  MOVLW  FF
02CF:  MOVWF  6A
02D0:  MOVLW  FF
02D1:  MOVWF  69
*
02FB:  MOVF   7A,W
02FC:  MOVWF  64
02FD:  MOVF   79,W
02FE:  MOVWF  63
02FF:  MOVF   78,W
0300:  MOVWF  62
0301:  MOVF   77,W
0302:  MOVWF  61
0303:  MOVF   15,W
0304:  ADDWF  61,W
0305:  MOVWF  30
0306:  MOVF   62,W
0307:  MOVWF  31
0308:  MOVF   16,W
0309:  BTFSC  03.0
030A:  INCFSZ 16,W
030B:  ADDWF  31,F
030C:  MOVF   63,W
030D:  MOVWF  32
030E:  MOVLW  00
030F:  BTFSC  03.0
0310:  MOVLW  01
0311:  ADDWF  32,F
0312:  MOVF   64,W
0313:  MOVWF  33
0314:  MOVLW  00
0315:  BTFSC  03.0
0316:  MOVLW  01
0317:  ADDWF  33,F
....................    timer1_overflow = 0; 
0318:  CLRF   2F
....................    set_timer1(0); 
0319:  CLRF   0E
031A:  CLRF   0F
031B:  CLRF   0E
....................    cycle_trigger = 1; 
031C:  MOVLW  01
031D:  MOVWF  36
....................    //section_count = MAX_SECTION; 
....................    //section_trigger = 1; 
....................    //set_timer0(section_timer); 
.................... } 
....................  
031E:  BCF    0C.2
031F:  BCF    0A.3
0320:  BCF    0A.4
0321:  GOTO   03D
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    section_trigger = 1; 
0322:  MOVLW  01
0323:  MOVWF  37
....................    //set_timer0(section_timer); 
0324:  BCF    0B.2
0325:  BCF    0A.3
0326:  BCF    0A.4
0327:  GOTO   03D
.................... } 
....................  
.................... void var_init() 
.................... { 
....................    timer1_overflow = 0; 
0328:  CLRF   2F
....................    sigHall_timer = 0; 
0329:  CLRF   33
032A:  CLRF   32
032B:  CLRF   31
032C:  CLRF   30
....................    cycle_trigger = 0; 
032D:  CLRF   36
....................    port_b = 0x00; 
032E:  CLRF   34
....................    last_b = port_b; 
032F:  MOVF   34,W
0330:  MOVWF  35
....................    tuning = 6; 
0331:  MOVLW  06
0332:  MOVWF  3B
....................    mode = 2; 
0333:  MOVLW  02
0334:  MOVWF  3C
.................... 	ast_count=0; 
0335:  CLRF   4F
....................    tick = 1; 
0336:  MOVLW  01
0337:  MOVWF  44
....................    digit_sec = 0; 
0338:  CLRF   45
....................    pled_position = 31; 
0339:  MOVLW  1F
033A:  MOVWF  50
....................    pled_direction = 1; 
033B:  MOVLW  01
033C:  MOVWF  51
....................    pled_count = 0; 
033D:  CLRF   52
....................    pled_on = 0; 
033E:  CLRF   53
033F:  BCF    0A.3
0340:  BSF    0A.4
0341:  GOTO   022 (RETURN)
.................... } 
....................  
.................... void main() 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  BSF    03.5
1004:  BSF    03.6
1005:  BCF    07.3
1006:  MOVLW  40
1007:  BCF    03.6
1008:  MOVWF  19
1009:  MOVLW  E6
100A:  MOVWF  18
100B:  MOVLW  D0
100C:  BCF    03.5
100D:  MOVWF  18
100E:  MOVLW  FF
100F:  MOVWF  2E
1010:  BSF    03.5
1011:  BSF    03.6
1012:  MOVF   09,W
1013:  ANDLW  C0
1014:  MOVWF  09
1015:  BCF    03.6
1016:  BCF    1F.4
1017:  BCF    1F.5
1018:  MOVLW  00
1019:  BSF    03.6
101A:  MOVWF  08
101B:  BCF    03.5
101C:  CLRF   07
101D:  CLRF   08
101E:  CLRF   09
101F:  BCF    03.6
.................... { 
....................    var_init(); 
1020:  BCF    0A.4
1021:  GOTO   328
1022:  BSF    0A.4
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_2);      //div 2 - 26.2 ms overflow 
1023:  MOVLW  15
1024:  MOVWF  10
.................... 	setup_ccp1(CCP_CAPTURE_FE); 
1025:  BSF    2E.2
1026:  MOVF   2E,W
1027:  BSF    03.5
1028:  MOVWF  07
1029:  BCF    03.5
102A:  CLRF   17
102B:  MOVLW  04
102C:  MOVWF  17
102D:  BSF    03.5
102E:  CLRF   1B
102F:  CLRF   1C
1030:  MOVLW  01
1031:  MOVWF  1D
....................    ds1307_init(); 
1032:  BCF    0A.4
1033:  BCF    03.5
1034:  GOTO   3F2
1035:  BSF    0A.4
....................    //with 819.2 us overflow for Timer0, motor's speed must be at least 20 RPS 
....................    setup_timer_0(T0_INTERNAL | T0_DIV_16); //div 16 - 819.2 us overflow 
1036:  BSF    03.5
1037:  MOVF   01,W
1038:  ANDLW  C0
1039:  IORLW  03
103A:  MOVWF  01
....................     
....................    enable_interrupts(INT_RB2|INT_RB3|INT_RB4|INT_RB5);; 
103B:  BCF    03.5
103C:  BSF    0B.3
103D:  MOVLW  3C
103E:  BSF    03.5
103F:  IORWF  16,F
....................    //enable_interrupts(INT_TBE); 
....................    //enable_interrupts(INT_RDA); 
....................    enable_interrupts(INT_EXT); 
1040:  BCF    03.5
1041:  BSF    0B.4
....................    enable_interrupts(INT_TIMER1); 
1042:  BSF    03.5
1043:  BSF    0C.0
....................    enable_interrupts(INT_CCP1); 
1044:  BSF    0C.2
....................    enable_interrupts(INT_TIMER0); 
1045:  BCF    03.5
1046:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
1047:  MOVLW  C0
1048:  IORWF  0B,F
....................   	 
.................... 	rgb_bits.blue =  0x0001; 
1049:  CLRF   29
104A:  MOVLW  01
104B:  MOVWF  28
.................... 	rgb_bits.red =   0xC000; 
104C:  MOVLW  C0
104D:  MOVWF  2B
104E:  CLRF   2A
.................... 	rgb_bits.green = 0xFFFF; 
104F:  MOVLW  FF
1050:  MOVWF  2D
1051:  MOVLW  FF
1052:  MOVWF  2C
.................... 	latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
1053:  MOVF   29,W
1054:  MOVWF  55
1055:  MOVF   28,W
1056:  MOVWF  54
1057:  MOVF   2B,W
1058:  MOVWF  57
1059:  MOVF   2A,W
105A:  MOVWF  56
105B:  MOVF   2D,W
105C:  MOVWF  59
105D:  MOVF   2C,W
105E:  MOVWF  58
....................    //ds1307_set_date_time(10,4,14,5,19,49,30); 
.................... 	ds1307_get_time(hour, min, sec); 
.................... 	ds1307_get_date(day, month, year, dow); 
.................... 	//write_eeprom(0, min); 
....................    anal_hour = hour % 12; 
*
121A:  MOVF   41,W
121B:  MOVWF  55
121C:  MOVLW  0C
121D:  MOVWF  56
121E:  BCF    0A.4
121F:  CALL   510
1220:  BSF    0A.4
1221:  MOVF   77,W
1222:  MOVWF  4A
....................    anal_hour = anal_hour * 5; 
1223:  MOVF   4A,W
1224:  MOVWF  55
1225:  MOVLW  05
1226:  MOVWF  56
1227:  BCF    0A.4
1228:  CALL   525
1229:  BSF    0A.4
122A:  MOVF   78,W
122B:  MOVWF  4A
....................    anal_hour = anal_hour + (int8)(min / 12); 
122C:  MOVF   42,W
122D:  MOVWF  55
122E:  MOVLW  0C
122F:  MOVWF  56
1230:  BCF    0A.4
1231:  CALL   510
1232:  BSF    0A.4
1233:  MOVF   78,W
1234:  ADDWF  4A,F
....................     
....................    h_high = (int8)(hour / 10); 
1235:  MOVF   41,W
1236:  MOVWF  55
1237:  MOVLW  0A
1238:  MOVWF  56
1239:  BCF    0A.4
123A:  CALL   510
123B:  BSF    0A.4
123C:  MOVF   78,W
123D:  MOVWF  46
.................... 	h_low = hour % 10; 
123E:  MOVF   41,W
123F:  MOVWF  55
1240:  MOVLW  0A
1241:  MOVWF  56
1242:  BCF    0A.4
1243:  CALL   510
1244:  BSF    0A.4
1245:  MOVF   77,W
1246:  MOVWF  47
.................... 	m_high = (int8)(min / 10); 
1247:  MOVF   42,W
1248:  MOVWF  55
1249:  MOVLW  0A
124A:  MOVWF  56
124B:  BCF    0A.4
124C:  CALL   510
124D:  BSF    0A.4
124E:  MOVF   78,W
124F:  MOVWF  48
.................... 	m_low = min % 10; 
1250:  MOVF   42,W
1251:  MOVWF  55
1252:  MOVLW  0A
1253:  MOVWF  56
1254:  BCF    0A.4
1255:  CALL   510
1256:  BSF    0A.4
1257:  MOVF   77,W
1258:  MOVWF  49
....................   	 
.................... 	day_h = (int8)(day / 10); 
1259:  MOVF   3D,W
125A:  MOVWF  55
125B:  MOVLW  0A
125C:  MOVWF  56
125D:  BCF    0A.4
125E:  CALL   510
125F:  BSF    0A.4
1260:  MOVF   78,W
1261:  MOVWF  4B
.................... 	day_l = day % 10; 
1262:  MOVF   3D,W
1263:  MOVWF  55
1264:  MOVLW  0A
1265:  MOVWF  56
1266:  BCF    0A.4
1267:  CALL   510
1268:  BSF    0A.4
1269:  MOVF   77,W
126A:  MOVWF  4C
.................... 	month_h = (int8)(month / 10); 
126B:  MOVF   3E,W
126C:  MOVWF  55
126D:  MOVLW  0A
126E:  MOVWF  56
126F:  BCF    0A.4
1270:  CALL   510
1271:  BSF    0A.4
1272:  MOVF   78,W
1273:  MOVWF  4D
.................... 	month_l = month % 10; 
1274:  MOVF   3E,W
1275:  MOVWF  55
1276:  MOVLW  0A
1277:  MOVWF  56
1278:  BCF    0A.4
1279:  CALL   510
127A:  BSF    0A.4
127B:  MOVF   77,W
127C:  MOVWF  4E
....................    
....................    while(true) 
....................    { 
.................... 		if(tick == 300) 
127D:  MOVF   44,W
127E:  SUBLW  2C
127F:  BTFSS  03.2
1280:  GOTO   3DE
.................... 		{ 
.................... 			ds1307_get_time(hour, min, sec); 
.................... 			ds1307_get_date(day, month, year, dow); 
.................... 		   anal_hour = hour % 12; 
*
13C1:  MOVF   41,W
13C2:  MOVWF  55
13C3:  MOVLW  0C
13C4:  MOVWF  56
13C5:  BCF    0A.4
13C6:  CALL   510
13C7:  BSF    0A.4
13C8:  MOVF   77,W
13C9:  MOVWF  4A
.................... 			anal_hour = anal_hour * 5; 
13CA:  MOVF   4A,W
13CB:  MOVWF  55
13CC:  MOVLW  05
13CD:  MOVWF  56
13CE:  BCF    0A.4
13CF:  CALL   525
13D0:  BSF    0A.4
13D1:  MOVF   78,W
13D2:  MOVWF  4A
.................... 			anal_hour = anal_hour + (int8)(min / 12); 
13D3:  MOVF   42,W
13D4:  MOVWF  55
13D5:  MOVLW  0C
13D6:  MOVWF  56
13D7:  BCF    0A.4
13D8:  CALL   510
13D9:  BSF    0A.4
13DA:  MOVF   78,W
13DB:  ADDWF  4A,F
.................... 		   tick = 1; 
13DC:  MOVLW  01
13DD:  MOVWF  44
.................... 		} 
.................... 		if(sec > 59) 
13DE:  MOVF   43,W
13DF:  SUBLW  3B
13E0:  BTFSC  03.0
13E1:  GOTO   4C1
.................... 		{ 
.................... 			sec = 0; 
13E2:  CLRF   43
.................... 			min++; 
13E3:  INCF   42,F
.................... 			if(min > 59) 
13E4:  MOVF   42,W
13E5:  SUBLW  3B
13E6:  BTFSC  03.0
13E7:  GOTO   49D
.................... 			{ 
.................... 				min = 0; 
13E8:  CLRF   42
.................... 				ds1307_get_time(hour, min, sec); 
.................... 				//write_eeprom(0, min); 
.................... 				anal_hour = hour % 12; 
*
1482:  MOVF   41,W
1483:  MOVWF  55
1484:  MOVLW  0C
1485:  MOVWF  56
1486:  BCF    0A.4
1487:  CALL   510
1488:  BSF    0A.4
1489:  MOVF   77,W
148A:  MOVWF  4A
.................... 			   anal_hour = anal_hour * 5; 
148B:  MOVF   4A,W
148C:  MOVWF  55
148D:  MOVLW  05
148E:  MOVWF  56
148F:  BCF    0A.4
1490:  CALL   525
1491:  BSF    0A.4
1492:  MOVF   78,W
1493:  MOVWF  4A
.................... 			   anal_hour = anal_hour + (int8)(min / 12); 
1494:  MOVF   42,W
1495:  MOVWF  55
1496:  MOVLW  0C
1497:  MOVWF  56
1498:  BCF    0A.4
1499:  CALL   510
149A:  BSF    0A.4
149B:  MOVF   78,W
149C:  ADDWF  4A,F
.................... 			} 
.................... 			h_high = (int8)(hour / 10); 
149D:  MOVF   41,W
149E:  MOVWF  55
149F:  MOVLW  0A
14A0:  MOVWF  56
14A1:  BCF    0A.4
14A2:  CALL   510
14A3:  BSF    0A.4
14A4:  MOVF   78,W
14A5:  MOVWF  46
.................... 			h_low = hour % 10; 
14A6:  MOVF   41,W
14A7:  MOVWF  55
14A8:  MOVLW  0A
14A9:  MOVWF  56
14AA:  BCF    0A.4
14AB:  CALL   510
14AC:  BSF    0A.4
14AD:  MOVF   77,W
14AE:  MOVWF  47
.................... 			m_high = (int8)(min / 10); 
14AF:  MOVF   42,W
14B0:  MOVWF  55
14B1:  MOVLW  0A
14B2:  MOVWF  56
14B3:  BCF    0A.4
14B4:  CALL   510
14B5:  BSF    0A.4
14B6:  MOVF   78,W
14B7:  MOVWF  48
.................... 			m_low = min % 10; 
14B8:  MOVF   42,W
14B9:  MOVWF  55
14BA:  MOVLW  0A
14BB:  MOVWF  56
14BC:  BCF    0A.4
14BD:  CALL   510
14BE:  BSF    0A.4
14BF:  MOVF   77,W
14C0:  MOVWF  49
.................... 		} 
.................... 		if(cycle_trigger == 1) 
14C1:  DECFSZ 36,W
14C2:  GOTO   5E2
.................... 		{ 
.................... 			cycle_trigger = 0; 
14C3:  CLRF   36
.................... 			latch_ClearAll(); 
.................... 			digit_sec++; 
*
14EE:  INCF   45,F
.................... 			section_trigger = 1; 
14EF:  MOVLW  01
14F0:  MOVWF  37
.................... 			section_count = MAX_SECTION; 
14F1:  MOVLW  3C
14F2:  MOVWF  38
.................... 			section_timer = 256 - (int8)(sigHall_timer / (MAX_SECTION * 8)) + tuning; 
14F3:  BCF    03.1
14F4:  MOVF   33,W
14F5:  MOVWF  57
14F6:  MOVF   32,W
14F7:  MOVWF  56
14F8:  MOVF   31,W
14F9:  MOVWF  55
14FA:  MOVF   30,W
14FB:  MOVWF  54
14FC:  CLRF   5B
14FD:  CLRF   5A
14FE:  MOVLW  01
14FF:  MOVWF  59
1500:  MOVLW  E0
1501:  MOVWF  58
1502:  BCF    0A.4
1503:  GOTO   54A
1504:  BSF    0A.4
1505:  MOVF   77,W
1506:  SUBLW  00
1507:  MOVWF  54
1508:  MOVLW  01
1509:  MOVWF  55
150A:  MOVLW  00
150B:  BTFSS  03.0
150C:  MOVLW  01
150D:  SUBWF  55,F
150E:  CLRF   7A
150F:  MOVF   3B,W
1510:  MOVWF  77
1511:  BTFSC  77.7
1512:  DECF   7A,F
1513:  ADDWF  54,W
1514:  MOVWF  39
1515:  MOVF   55,W
1516:  MOVWF  3A
1517:  MOVF   7A,W
1518:  BTFSC  03.0
1519:  INCFSZ 7A,W
151A:  ADDWF  3A,F
.................... //!			if(section_count == 30) 
.................... //!			{ 
.................... //!				section_timer = 256 - (int8)(sigHall_timer / (MAX_SECTION * 8)) + tuning; 
.................... //!				//section_timer = 87 + tuning; 
.................... //!			} 
.................... 	       
.................... 			while(cycle_trigger == 0 && section_count > 0) 
151B:  MOVF   36,F
151C:  BTFSS  03.2
151D:  GOTO   5E2
151E:  MOVF   38,F
151F:  BTFSC  03.2
1520:  GOTO   5E2
.................... 			{ 	 
.................... 				if(section_trigger == 1) 
1521:  DECFSZ 37,W
1522:  GOTO   5E1
.................... 				{ 
.................... 					//latch_enable(); 
.................... 					set_timer0(section_timer); 
1523:  MOVF   39,W
1524:  MOVWF  01
.................... 					section_trigger = 0; 
1525:  CLRF   37
.................... 					fetch_data(); 
1526:  BCF    0A.4
1527:  BSF    0A.3
1528:  GOTO   000
1529:  BSF    0A.4
152A:  BCF    0A.3
.................... 					latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
152B:  MOVF   29,W
152C:  MOVWF  55
152D:  MOVF   28,W
152E:  MOVWF  54
152F:  MOVF   2B,W
1530:  MOVWF  57
1531:  MOVF   2A,W
1532:  MOVWF  56
1533:  MOVF   2D,W
1534:  MOVWF  59
1535:  MOVF   2C,W
1536:  MOVWF  58
.................... 					if(section_count > 1) latch_ClearAll(); 
*
15B2:  MOVF   38,W
15B3:  SUBLW  01
15B4:  BTFSC  03.0
15B5:  GOTO   5E0
.................... 					section_count--; 
*
15E0:  DECF   38,F
.................... 				} 
15E1:  GOTO   51B
.................... 			} 
.................... 		} 
15E2:  GOTO   27D
....................    } 
.................... } 
....................  
15E3:  SLEEP
.................... void fetch_data() 
.................... { 
.................... 	if(mode == MODE_A) 
*
0800:  MOVF   3C,W
0801:  SUBLW  02
0802:  BTFSS  03.2
0803:  GOTO   04E
.................... 	{ 
.................... 		int8 pos = section_count; 
0804:  MOVF   38,W
0805:  MOVWF  54
.................... 		if(section_count == 60) 
0806:  MOVF   38,W
0807:  SUBLW  3C
0808:  BTFSS  03.2
0809:  GOTO   00B
.................... 		pos = 0; 
080A:  CLRF   54
.................... 		rgb_bits.blue =  0x0001; 
080B:  CLRF   29
080C:  MOVLW  01
080D:  MOVWF  28
.................... 		rgb_bits.red =   0x0001; 
080E:  CLRF   2B
080F:  MOVLW  01
0810:  MOVWF  2A
.................... 		rgb_bits.green = 0x0001; 
0811:  CLRF   2D
0812:  MOVLW  01
0813:  MOVWF  2C
.................... 		if((section_count % 5) == 0) 
0814:  MOVF   38,W
0815:  MOVWF  55
0816:  MOVLW  05
0817:  MOVWF  56
0818:  BCF    0A.3
0819:  CALL   510
081A:  BSF    0A.3
081B:  MOVF   77,F
081C:  BTFSS  03.2
081D:  GOTO   027
.................... 		{ 
.................... 			rgb_bits.blue =  0x0003; 
081E:  CLRF   29
081F:  MOVLW  03
0820:  MOVWF  28
.................... 			rgb_bits.red =   0x0003; 
0821:  CLRF   2B
0822:  MOVLW  03
0823:  MOVWF  2A
.................... 			rgb_bits.green = 0x0003; 
0824:  CLRF   2D
0825:  MOVLW  03
0826:  MOVWF  2C
.................... 		} 
.................... 		if((section_count % 15) == 0) 
0827:  MOVF   38,W
0828:  MOVWF  55
0829:  MOVLW  0F
082A:  MOVWF  56
082B:  BCF    0A.3
082C:  CALL   510
082D:  BSF    0A.3
082E:  MOVF   77,F
082F:  BTFSS  03.2
0830:  GOTO   037
.................... 		{ 
.................... 			rgb_bits.blue =  0x007; 
0831:  CLRF   29
0832:  MOVLW  07
0833:  MOVWF  28
.................... 			rgb_bits.red =   0x007; 
0834:  CLRF   2B
0835:  MOVLW  07
0836:  MOVWF  2A
.................... 		} 
.................... 		if(pos == anal_hour) 
0837:  MOVF   4A,W
0838:  SUBWF  54,W
0839:  BTFSS  03.2
083A:  GOTO   03E
.................... 		{ 
.................... 			rgb_bits.blue = 0xFC00; 
083B:  MOVLW  FC
083C:  MOVWF  29
083D:  CLRF   28
.................... 		} 
.................... 		if(pos == min) 
083E:  MOVF   42,W
083F:  SUBWF  54,W
0840:  BTFSS  03.2
0841:  GOTO   045
.................... 		{ 
.................... 			rgb_bits.red = 0xFF00; 
0842:  MOVLW  FF
0843:  MOVWF  2B
0844:  CLRF   2A
.................... 		} 
.................... 		if(pos == sec) 
0845:  MOVF   43,W
0846:  SUBWF  54,W
0847:  BTFSS  03.2
0848:  GOTO   04D
.................... 		{ 
.................... 			rgb_bits.green = 0xFFF1; 
0849:  MOVLW  FF
084A:  MOVWF  2D
084B:  MOVLW  F1
084C:  MOVWF  2C
.................... 		} 
.................... 	} 
084D:  GOTO   378
.................... 	else if(mode == MODE_C) 
084E:  MOVF   3C,W
084F:  SUBLW  04
0850:  BTFSS  03.2
0851:  GOTO   0AA
.................... 	{ 
.................... 		rgb_bits.blue = fpt[section_count * 3 - 3]; 
0852:  MOVF   38,W
0853:  MOVWF  55
0854:  MOVLW  03
0855:  MOVWF  56
0856:  BCF    0A.3
0857:  CALL   525
0858:  BSF    0A.3
0859:  MOVLW  03
085A:  SUBWF  78,W
085B:  CLRF   7A
085C:  MOVWF  79
085D:  BCF    03.0
085E:  RLF    79,F
085F:  RLF    7A,F
0860:  MOVF   79,W
0861:  MOVWF  55
0862:  BCF    0A.3
0863:  CALL   0E5
0864:  BSF    0A.3
0865:  MOVWF  77
0866:  INCF   55,W
0867:  BCF    0A.3
0868:  CALL   0E5
0869:  BSF    0A.3
086A:  MOVWF  7A
086B:  MOVF   77,W
086C:  MOVWF  28
086D:  MOVF   7A,W
086E:  MOVWF  29
.................... 		rgb_bits.red = fpt[section_count * 3 - 2]; 
086F:  MOVF   38,W
0870:  MOVWF  55
0871:  MOVLW  03
0872:  MOVWF  56
0873:  BCF    0A.3
0874:  CALL   525
0875:  BSF    0A.3
0876:  MOVLW  02
0877:  SUBWF  78,W
0878:  CLRF   7A
0879:  MOVWF  79
087A:  BCF    03.0
087B:  RLF    79,F
087C:  RLF    7A,F
087D:  MOVF   79,W
087E:  MOVWF  55
087F:  BCF    0A.3
0880:  CALL   0E5
0881:  BSF    0A.3
0882:  MOVWF  77
0883:  INCF   55,W
0884:  BCF    0A.3
0885:  CALL   0E5
0886:  BSF    0A.3
0887:  MOVWF  7A
0888:  MOVF   77,W
0889:  MOVWF  2A
088A:  MOVF   7A,W
088B:  MOVWF  2B
.................... 		rgb_bits.green = fpt[section_count * 3 - 1]; 
088C:  MOVF   38,W
088D:  MOVWF  55
088E:  MOVLW  03
088F:  MOVWF  56
0890:  BCF    0A.3
0891:  CALL   525
0892:  BSF    0A.3
0893:  MOVLW  01
0894:  SUBWF  78,W
0895:  CLRF   7A
0896:  MOVWF  79
0897:  BCF    03.0
0898:  RLF    79,F
0899:  RLF    7A,F
089A:  MOVF   79,W
089B:  MOVWF  55
089C:  BCF    0A.3
089D:  CALL   0E5
089E:  BSF    0A.3
089F:  MOVWF  77
08A0:  INCF   55,W
08A1:  BCF    0A.3
08A2:  CALL   0E5
08A3:  BSF    0A.3
08A4:  MOVWF  7A
08A5:  MOVF   77,W
08A6:  MOVWF  2C
08A7:  MOVF   7A,W
08A8:  MOVWF  2D
.................... 	} 
08A9:  GOTO   378
.................... 	else if(mode == MODE_B) 
08AA:  MOVF   3C,W
08AB:  SUBLW  03
08AC:  BTFSS  03.2
08AD:  GOTO   349
.................... 	{ 
.................... 		rgb_bits.red = 0x8000; 
08AE:  MOVLW  80
08AF:  MOVWF  2B
08B0:  CLRF   2A
.................... 		switch (section_count) 
08B1:  MOVF   38,W
08B2:  XORLW  34
08B3:  BTFSC  03.2
08B4:  GOTO   107
08B5:  XORLW  01
08B6:  BTFSC  03.2
08B7:  GOTO   11D
08B8:  XORLW  03
08B9:  BTFSC  03.2
08BA:  GOTO   134
08BB:  XORLW  0E
08BC:  BTFSC  03.2
08BD:  GOTO   14B
08BE:  XORLW  01
08BF:  BTFSC  03.2
08C0:  GOTO   161
08C1:  XORLW  03
08C2:  BTFSC  03.2
08C3:  GOTO   178
08C4:  XORLW  38
08C5:  BTFSC  03.2
08C6:  GOTO   18F
08C7:  XORLW  01
08C8:  BTFSC  03.2
08C9:  GOTO   1A5
08CA:  XORLW  07
08CB:  BTFSC  03.2
08CC:  GOTO   1BC
08CD:  XORLW  02
08CE:  BTFSC  03.2
08CF:  GOTO   1D3
08D0:  XORLW  01
08D1:  BTFSC  03.2
08D2:  GOTO   1E9
08D3:  XORLW  0F
08D4:  BTFSC  03.2
08D5:  GOTO   200
08D6:  XORLW  34
08D7:  BTFSC  03.2
08D8:  GOTO   217
08D9:  XORLW  1B
08DA:  BTFSC  03.2
08DB:  GOTO   227
08DC:  XORLW  01
08DD:  BTFSC  03.2
08DE:  GOTO   23E
08DF:  XORLW  03
08E0:  BTFSC  03.2
08E1:  GOTO   255
08E2:  XORLW  06
08E3:  BTFSC  03.2
08E4:  GOTO   26B
08E5:  XORLW  01
08E6:  BTFSC  03.2
08E7:  GOTO   282
08E8:  XORLW  03
08E9:  BTFSC  03.2
08EA:  GOTO   299
08EB:  XORLW  3A
08EC:  BTFSC  03.2
08ED:  GOTO   2AF
08EE:  XORLW  01
08EF:  BTFSC  03.2
08F0:  GOTO   2C6
08F1:  XORLW  03
08F2:  BTFSC  03.2
08F3:  GOTO   2DD
08F4:  XORLW  0E
08F5:  BTFSC  03.2
08F6:  GOTO   2F3
08F7:  XORLW  01
08F8:  BTFSC  03.2
08F9:  GOTO   30A
08FA:  XORLW  03
08FB:  BTFSC  03.2
08FC:  GOTO   321
08FD:  XORLW  08
08FE:  BTFSC  03.2
08FF:  GOTO   337
0900:  XORLW  03
0901:  BTFSC  03.2
0902:  GOTO   33B
0903:  XORLW  01
0904:  BTFSC  03.2
0905:  GOTO   33F
0906:  GOTO   343
.................... 		{ 
.................... 			case 52: 
.................... 				rgb_bits.green = number_upper[h_high][0]; 
0907:  MOVF   46,W
0908:  MOVWF  55
0909:  MOVLW  06
090A:  MOVWF  56
090B:  BCF    0A.3
090C:  CALL   525
090D:  BSF    0A.3
090E:  MOVF   78,W
090F:  MOVWF  55
0910:  INCF   55,W
0911:  BCF    0A.3
0912:  CALL   065
0913:  BSF    0A.3
0914:  MOVWF  7A
0915:  MOVF   55,W
0916:  BCF    0A.3
0917:  CALL   065
0918:  BSF    0A.3
0919:  MOVWF  2C
091A:  MOVF   7A,W
091B:  MOVWF  2D
.................... 				break; 
091C:  GOTO   348
.................... 			case 53: 
.................... 				rgb_bits.green = number_upper[h_high][1]; 
091D:  MOVF   46,W
091E:  MOVWF  55
091F:  MOVLW  06
0920:  MOVWF  56
0921:  BCF    0A.3
0922:  CALL   525
0923:  BSF    0A.3
0924:  MOVLW  02
0925:  ADDWF  78,W
0926:  MOVWF  55
0927:  INCF   55,W
0928:  BCF    0A.3
0929:  CALL   065
092A:  BSF    0A.3
092B:  MOVWF  7A
092C:  MOVF   55,W
092D:  BCF    0A.3
092E:  CALL   065
092F:  BSF    0A.3
0930:  MOVWF  2C
0931:  MOVF   7A,W
0932:  MOVWF  2D
.................... 				break; 
0933:  GOTO   348
.................... 			case 54: 
.................... 				rgb_bits.green = number_upper[h_high][2]; 
0934:  MOVF   46,W
0935:  MOVWF  55
0936:  MOVLW  06
0937:  MOVWF  56
0938:  BCF    0A.3
0939:  CALL   525
093A:  BSF    0A.3
093B:  MOVLW  04
093C:  ADDWF  78,W
093D:  MOVWF  55
093E:  INCF   55,W
093F:  BCF    0A.3
0940:  CALL   065
0941:  BSF    0A.3
0942:  MOVWF  7A
0943:  MOVF   55,W
0944:  BCF    0A.3
0945:  CALL   065
0946:  BSF    0A.3
0947:  MOVWF  2C
0948:  MOVF   7A,W
0949:  MOVWF  2D
.................... 				break; 
094A:  GOTO   348
.................... 			case 56: 
.................... 				rgb_bits.green = number_upper[h_low][0]; 
094B:  MOVF   47,W
094C:  MOVWF  55
094D:  MOVLW  06
094E:  MOVWF  56
094F:  BCF    0A.3
0950:  CALL   525
0951:  BSF    0A.3
0952:  MOVF   78,W
0953:  MOVWF  55
0954:  INCF   55,W
0955:  BCF    0A.3
0956:  CALL   065
0957:  BSF    0A.3
0958:  MOVWF  7A
0959:  MOVF   55,W
095A:  BCF    0A.3
095B:  CALL   065
095C:  BSF    0A.3
095D:  MOVWF  2C
095E:  MOVF   7A,W
095F:  MOVWF  2D
.................... 				break; 
0960:  GOTO   348
.................... 			case 57: 
.................... 				rgb_bits.green = number_upper[h_low][1]; 
0961:  MOVF   47,W
0962:  MOVWF  55
0963:  MOVLW  06
0964:  MOVWF  56
0965:  BCF    0A.3
0966:  CALL   525
0967:  BSF    0A.3
0968:  MOVLW  02
0969:  ADDWF  78,W
096A:  MOVWF  55
096B:  INCF   55,W
096C:  BCF    0A.3
096D:  CALL   065
096E:  BSF    0A.3
096F:  MOVWF  7A
0970:  MOVF   55,W
0971:  BCF    0A.3
0972:  CALL   065
0973:  BSF    0A.3
0974:  MOVWF  2C
0975:  MOVF   7A,W
0976:  MOVWF  2D
.................... 				break; 
0977:  GOTO   348
.................... 			case 58: 
.................... 				rgb_bits.green = number_upper[h_low][2]; 
0978:  MOVF   47,W
0979:  MOVWF  55
097A:  MOVLW  06
097B:  MOVWF  56
097C:  BCF    0A.3
097D:  CALL   525
097E:  BSF    0A.3
097F:  MOVLW  04
0980:  ADDWF  78,W
0981:  MOVWF  55
0982:  INCF   55,W
0983:  BCF    0A.3
0984:  CALL   065
0985:  BSF    0A.3
0986:  MOVWF  7A
0987:  MOVF   55,W
0988:  BCF    0A.3
0989:  CALL   065
098A:  BSF    0A.3
098B:  MOVWF  2C
098C:  MOVF   7A,W
098D:  MOVWF  2D
.................... 				break; 
098E:  GOTO   348
.................... 			case 2: 
.................... 				rgb_bits.green = number_upper[m_high][0]; 
098F:  MOVF   48,W
0990:  MOVWF  55
0991:  MOVLW  06
0992:  MOVWF  56
0993:  BCF    0A.3
0994:  CALL   525
0995:  BSF    0A.3
0996:  MOVF   78,W
0997:  MOVWF  55
0998:  INCF   55,W
0999:  BCF    0A.3
099A:  CALL   065
099B:  BSF    0A.3
099C:  MOVWF  7A
099D:  MOVF   55,W
099E:  BCF    0A.3
099F:  CALL   065
09A0:  BSF    0A.3
09A1:  MOVWF  2C
09A2:  MOVF   7A,W
09A3:  MOVWF  2D
.................... 				break; 
09A4:  GOTO   348
.................... 			case 3: 
.................... 				rgb_bits.green = number_upper[m_high][1]; 
09A5:  MOVF   48,W
09A6:  MOVWF  55
09A7:  MOVLW  06
09A8:  MOVWF  56
09A9:  BCF    0A.3
09AA:  CALL   525
09AB:  BSF    0A.3
09AC:  MOVLW  02
09AD:  ADDWF  78,W
09AE:  MOVWF  55
09AF:  INCF   55,W
09B0:  BCF    0A.3
09B1:  CALL   065
09B2:  BSF    0A.3
09B3:  MOVWF  7A
09B4:  MOVF   55,W
09B5:  BCF    0A.3
09B6:  CALL   065
09B7:  BSF    0A.3
09B8:  MOVWF  2C
09B9:  MOVF   7A,W
09BA:  MOVWF  2D
.................... 				break; 
09BB:  GOTO   348
.................... 			case 4: 
.................... 				rgb_bits.green = number_upper[m_high][2]; 
09BC:  MOVF   48,W
09BD:  MOVWF  55
09BE:  MOVLW  06
09BF:  MOVWF  56
09C0:  BCF    0A.3
09C1:  CALL   525
09C2:  BSF    0A.3
09C3:  MOVLW  04
09C4:  ADDWF  78,W
09C5:  MOVWF  55
09C6:  INCF   55,W
09C7:  BCF    0A.3
09C8:  CALL   065
09C9:  BSF    0A.3
09CA:  MOVWF  7A
09CB:  MOVF   55,W
09CC:  BCF    0A.3
09CD:  CALL   065
09CE:  BSF    0A.3
09CF:  MOVWF  2C
09D0:  MOVF   7A,W
09D1:  MOVWF  2D
.................... 				break; 
09D2:  GOTO   348
.................... 			case 6: 
.................... 				rgb_bits.green = number_upper[m_low][0]; 
09D3:  MOVF   49,W
09D4:  MOVWF  55
09D5:  MOVLW  06
09D6:  MOVWF  56
09D7:  BCF    0A.3
09D8:  CALL   525
09D9:  BSF    0A.3
09DA:  MOVF   78,W
09DB:  MOVWF  55
09DC:  INCF   55,W
09DD:  BCF    0A.3
09DE:  CALL   065
09DF:  BSF    0A.3
09E0:  MOVWF  7A
09E1:  MOVF   55,W
09E2:  BCF    0A.3
09E3:  CALL   065
09E4:  BSF    0A.3
09E5:  MOVWF  2C
09E6:  MOVF   7A,W
09E7:  MOVWF  2D
.................... 				break; 
09E8:  GOTO   348
.................... 			case 7: 
.................... 				rgb_bits.green = number_upper[m_low][1]; 
09E9:  MOVF   49,W
09EA:  MOVWF  55
09EB:  MOVLW  06
09EC:  MOVWF  56
09ED:  BCF    0A.3
09EE:  CALL   525
09EF:  BSF    0A.3
09F0:  MOVLW  02
09F1:  ADDWF  78,W
09F2:  MOVWF  55
09F3:  INCF   55,W
09F4:  BCF    0A.3
09F5:  CALL   065
09F6:  BSF    0A.3
09F7:  MOVWF  7A
09F8:  MOVF   55,W
09F9:  BCF    0A.3
09FA:  CALL   065
09FB:  BSF    0A.3
09FC:  MOVWF  2C
09FD:  MOVF   7A,W
09FE:  MOVWF  2D
.................... 				break; 
09FF:  GOTO   348
.................... 			case 8: 
.................... 				rgb_bits.green = number_upper[m_low][2]; 
0A00:  MOVF   49,W
0A01:  MOVWF  55
0A02:  MOVLW  06
0A03:  MOVWF  56
0A04:  BCF    0A.3
0A05:  CALL   525
0A06:  BSF    0A.3
0A07:  MOVLW  04
0A08:  ADDWF  78,W
0A09:  MOVWF  55
0A0A:  INCF   55,W
0A0B:  BCF    0A.3
0A0C:  CALL   065
0A0D:  BSF    0A.3
0A0E:  MOVWF  7A
0A0F:  MOVF   55,W
0A10:  BCF    0A.3
0A11:  CALL   065
0A12:  BSF    0A.3
0A13:  MOVWF  2C
0A14:  MOVF   7A,W
0A15:  MOVWF  2D
.................... 				break; 
0A16:  GOTO   348
.................... 			case 60: 
.................... 				if(digit_sec < 10) 
0A17:  MOVF   45,W
0A18:  SUBLW  09
0A19:  BTFSS  03.0
0A1A:  GOTO   21F
.................... 					rgb_bits.green = 0x00A0; 
0A1B:  CLRF   2D
0A1C:  MOVLW  A0
0A1D:  MOVWF  2C
0A1E:  GOTO   221
.................... 				else 
.................... 					rgb_bits.green = 0x0000; 
0A1F:  CLRF   2D
0A20:  CLRF   2C
.................... 				if(digit_sec == 30) 
0A21:  MOVF   45,W
0A22:  SUBLW  1E
0A23:  BTFSS  03.2
0A24:  GOTO   226
.................... 					digit_sec = 0; 
0A25:  CLRF   45
.................... 				break; 
0A26:  GOTO   348
.................... 			  	 
.................... 			case 39: 
.................... 				rgb_bits.blue = number_lower[day_h][2]; 
0A27:  MOVF   4B,W
0A28:  MOVWF  55
0A29:  MOVLW  06
0A2A:  MOVWF  56
0A2B:  BCF    0A.3
0A2C:  CALL   525
0A2D:  BSF    0A.3
0A2E:  MOVLW  04
0A2F:  ADDWF  78,W
0A30:  MOVWF  55
0A31:  INCF   55,W
0A32:  BCF    0A.3
0A33:  CALL   0A5
0A34:  BSF    0A.3
0A35:  MOVWF  7A
0A36:  MOVF   55,W
0A37:  BCF    0A.3
0A38:  CALL   0A5
0A39:  BSF    0A.3
0A3A:  MOVWF  28
0A3B:  MOVF   7A,W
0A3C:  MOVWF  29
.................... 				break; 
0A3D:  GOTO   348
.................... 			case 38: 
.................... 				rgb_bits.blue = number_lower[day_h][1]; 
0A3E:  MOVF   4B,W
0A3F:  MOVWF  55
0A40:  MOVLW  06
0A41:  MOVWF  56
0A42:  BCF    0A.3
0A43:  CALL   525
0A44:  BSF    0A.3
0A45:  MOVLW  02
0A46:  ADDWF  78,W
0A47:  MOVWF  55
0A48:  INCF   55,W
0A49:  BCF    0A.3
0A4A:  CALL   0A5
0A4B:  BSF    0A.3
0A4C:  MOVWF  7A
0A4D:  MOVF   55,W
0A4E:  BCF    0A.3
0A4F:  CALL   0A5
0A50:  BSF    0A.3
0A51:  MOVWF  28
0A52:  MOVF   7A,W
0A53:  MOVWF  29
.................... 				break; 
0A54:  GOTO   348
.................... 			case 37: 
.................... 				rgb_bits.blue = number_lower[day_h][0]; 
0A55:  MOVF   4B,W
0A56:  MOVWF  55
0A57:  MOVLW  06
0A58:  MOVWF  56
0A59:  BCF    0A.3
0A5A:  CALL   525
0A5B:  BSF    0A.3
0A5C:  MOVF   78,W
0A5D:  MOVWF  55
0A5E:  INCF   55,W
0A5F:  BCF    0A.3
0A60:  CALL   0A5
0A61:  BSF    0A.3
0A62:  MOVWF  7A
0A63:  MOVF   55,W
0A64:  BCF    0A.3
0A65:  CALL   0A5
0A66:  BSF    0A.3
0A67:  MOVWF  28
0A68:  MOVF   7A,W
0A69:  MOVWF  29
.................... 				break; 
0A6A:  GOTO   348
.................... 			case 35: 
.................... 				rgb_bits.blue = number_lower[day_l][2]; 
0A6B:  MOVF   4C,W
0A6C:  MOVWF  55
0A6D:  MOVLW  06
0A6E:  MOVWF  56
0A6F:  BCF    0A.3
0A70:  CALL   525
0A71:  BSF    0A.3
0A72:  MOVLW  04
0A73:  ADDWF  78,W
0A74:  MOVWF  55
0A75:  INCF   55,W
0A76:  BCF    0A.3
0A77:  CALL   0A5
0A78:  BSF    0A.3
0A79:  MOVWF  7A
0A7A:  MOVF   55,W
0A7B:  BCF    0A.3
0A7C:  CALL   0A5
0A7D:  BSF    0A.3
0A7E:  MOVWF  28
0A7F:  MOVF   7A,W
0A80:  MOVWF  29
.................... 				break; 
0A81:  GOTO   348
.................... 			case 34: 
.................... 				rgb_bits.blue = number_lower[day_l][1]; 
0A82:  MOVF   4C,W
0A83:  MOVWF  55
0A84:  MOVLW  06
0A85:  MOVWF  56
0A86:  BCF    0A.3
0A87:  CALL   525
0A88:  BSF    0A.3
0A89:  MOVLW  02
0A8A:  ADDWF  78,W
0A8B:  MOVWF  55
0A8C:  INCF   55,W
0A8D:  BCF    0A.3
0A8E:  CALL   0A5
0A8F:  BSF    0A.3
0A90:  MOVWF  7A
0A91:  MOVF   55,W
0A92:  BCF    0A.3
0A93:  CALL   0A5
0A94:  BSF    0A.3
0A95:  MOVWF  28
0A96:  MOVF   7A,W
0A97:  MOVWF  29
.................... 				break; 
0A98:  GOTO   348
.................... 			case 33: 
.................... 				rgb_bits.blue = number_lower[day_l][0]; 
0A99:  MOVF   4C,W
0A9A:  MOVWF  55
0A9B:  MOVLW  06
0A9C:  MOVWF  56
0A9D:  BCF    0A.3
0A9E:  CALL   525
0A9F:  BSF    0A.3
0AA0:  MOVF   78,W
0AA1:  MOVWF  55
0AA2:  INCF   55,W
0AA3:  BCF    0A.3
0AA4:  CALL   0A5
0AA5:  BSF    0A.3
0AA6:  MOVWF  7A
0AA7:  MOVF   55,W
0AA8:  BCF    0A.3
0AA9:  CALL   0A5
0AAA:  BSF    0A.3
0AAB:  MOVWF  28
0AAC:  MOVF   7A,W
0AAD:  MOVWF  29
.................... 				break; 
0AAE:  GOTO   348
.................... 			case 27: 
.................... 				rgb_bits.blue = number_lower[month_h][2]; 
0AAF:  MOVF   4D,W
0AB0:  MOVWF  55
0AB1:  MOVLW  06
0AB2:  MOVWF  56
0AB3:  BCF    0A.3
0AB4:  CALL   525
0AB5:  BSF    0A.3
0AB6:  MOVLW  04
0AB7:  ADDWF  78,W
0AB8:  MOVWF  55
0AB9:  INCF   55,W
0ABA:  BCF    0A.3
0ABB:  CALL   0A5
0ABC:  BSF    0A.3
0ABD:  MOVWF  7A
0ABE:  MOVF   55,W
0ABF:  BCF    0A.3
0AC0:  CALL   0A5
0AC1:  BSF    0A.3
0AC2:  MOVWF  28
0AC3:  MOVF   7A,W
0AC4:  MOVWF  29
.................... 				break; 
0AC5:  GOTO   348
.................... 			case 26: 
.................... 				rgb_bits.blue = number_lower[month_h][1]; 
0AC6:  MOVF   4D,W
0AC7:  MOVWF  55
0AC8:  MOVLW  06
0AC9:  MOVWF  56
0ACA:  BCF    0A.3
0ACB:  CALL   525
0ACC:  BSF    0A.3
0ACD:  MOVLW  02
0ACE:  ADDWF  78,W
0ACF:  MOVWF  55
0AD0:  INCF   55,W
0AD1:  BCF    0A.3
0AD2:  CALL   0A5
0AD3:  BSF    0A.3
0AD4:  MOVWF  7A
0AD5:  MOVF   55,W
0AD6:  BCF    0A.3
0AD7:  CALL   0A5
0AD8:  BSF    0A.3
0AD9:  MOVWF  28
0ADA:  MOVF   7A,W
0ADB:  MOVWF  29
.................... 				break; 
0ADC:  GOTO   348
.................... 			case 25: 
.................... 				rgb_bits.blue = number_lower[month_h][0]; 
0ADD:  MOVF   4D,W
0ADE:  MOVWF  55
0ADF:  MOVLW  06
0AE0:  MOVWF  56
0AE1:  BCF    0A.3
0AE2:  CALL   525
0AE3:  BSF    0A.3
0AE4:  MOVF   78,W
0AE5:  MOVWF  55
0AE6:  INCF   55,W
0AE7:  BCF    0A.3
0AE8:  CALL   0A5
0AE9:  BSF    0A.3
0AEA:  MOVWF  7A
0AEB:  MOVF   55,W
0AEC:  BCF    0A.3
0AED:  CALL   0A5
0AEE:  BSF    0A.3
0AEF:  MOVWF  28
0AF0:  MOVF   7A,W
0AF1:  MOVWF  29
.................... 				break; 
0AF2:  GOTO   348
.................... 			case 23: 
.................... 				rgb_bits.blue = number_lower[month_l][2]; 
0AF3:  MOVF   4E,W
0AF4:  MOVWF  55
0AF5:  MOVLW  06
0AF6:  MOVWF  56
0AF7:  BCF    0A.3
0AF8:  CALL   525
0AF9:  BSF    0A.3
0AFA:  MOVLW  04
0AFB:  ADDWF  78,W
0AFC:  MOVWF  55
0AFD:  INCF   55,W
0AFE:  BCF    0A.3
0AFF:  CALL   0A5
0B00:  BSF    0A.3
0B01:  MOVWF  7A
0B02:  MOVF   55,W
0B03:  BCF    0A.3
0B04:  CALL   0A5
0B05:  BSF    0A.3
0B06:  MOVWF  28
0B07:  MOVF   7A,W
0B08:  MOVWF  29
.................... 				break; 
0B09:  GOTO   348
.................... 			case 22: 
.................... 				rgb_bits.blue = number_lower[month_l][1]; 
0B0A:  MOVF   4E,W
0B0B:  MOVWF  55
0B0C:  MOVLW  06
0B0D:  MOVWF  56
0B0E:  BCF    0A.3
0B0F:  CALL   525
0B10:  BSF    0A.3
0B11:  MOVLW  02
0B12:  ADDWF  78,W
0B13:  MOVWF  55
0B14:  INCF   55,W
0B15:  BCF    0A.3
0B16:  CALL   0A5
0B17:  BSF    0A.3
0B18:  MOVWF  7A
0B19:  MOVF   55,W
0B1A:  BCF    0A.3
0B1B:  CALL   0A5
0B1C:  BSF    0A.3
0B1D:  MOVWF  28
0B1E:  MOVF   7A,W
0B1F:  MOVWF  29
.................... 				break; 
0B20:  GOTO   348
.................... 			case 21: 
.................... 				rgb_bits.blue = number_lower[month_l][0]; 
0B21:  MOVF   4E,W
0B22:  MOVWF  55
0B23:  MOVLW  06
0B24:  MOVWF  56
0B25:  BCF    0A.3
0B26:  CALL   525
0B27:  BSF    0A.3
0B28:  MOVF   78,W
0B29:  MOVWF  55
0B2A:  INCF   55,W
0B2B:  BCF    0A.3
0B2C:  CALL   0A5
0B2D:  BSF    0A.3
0B2E:  MOVWF  7A
0B2F:  MOVF   55,W
0B30:  BCF    0A.3
0B31:  CALL   0A5
0B32:  BSF    0A.3
0B33:  MOVWF  28
0B34:  MOVF   7A,W
0B35:  MOVWF  29
.................... 				break; 
0B36:  GOTO   348
.................... 			case 29: 
.................... 				rgb_bits.blue = 0x0040; 
0B37:  CLRF   29
0B38:  MOVLW  40
0B39:  MOVWF  28
.................... 				break; 
0B3A:  GOTO   348
.................... 			case 30: 
.................... 				rgb_bits.blue = 0x0040; 
0B3B:  CLRF   29
0B3C:  MOVLW  40
0B3D:  MOVWF  28
.................... 				break; 
0B3E:  GOTO   348
.................... 			case 31: 
.................... 				rgb_bits.blue = 0x0040; 
0B3F:  CLRF   29
0B40:  MOVLW  40
0B41:  MOVWF  28
.................... 				break; 
0B42:  GOTO   348
.................... 			default: 
.................... 				rgb_bits.green = 0x0000; 
0B43:  CLRF   2D
0B44:  CLRF   2C
.................... 				rgb_bits.blue = 0x0000; 
0B45:  CLRF   29
0B46:  CLRF   28
.................... 				break; 
0B47:  GOTO   348
.................... 		}  	 
.................... 	} 
0B48:  GOTO   378
.................... 	else if (mode == MODE_D) 
0B49:  MOVF   3C,W
0B4A:  SUBLW  05
0B4B:  BTFSS  03.2
0B4C:  GOTO   378
.................... 	{ 
.................... 		//rgb_bits.blue = asterisk[ast_count][0]; 
.................... 		//rgb_bits.red = asterisk[ast_count][1]; 
.................... 		//rgb_bits.green = asterisk[ast_count][2]; 
.................... 		//if (ast_count > 8){ ast_count=0;} else ast_count++; 
.................... 	  	 
.................... 		rgb_bits.blue = 0x0000; 
0B4D:  CLRF   29
0B4E:  CLRF   28
.................... 		rgb_bits.red = 0x0000; 
0B4F:  CLRF   2B
0B50:  CLRF   2A
.................... 		rgb_bits.green = 0x0000; 
0B51:  CLRF   2D
0B52:  CLRF   2C
.................... 	  	 
.................... 		if (section_count == pled_position) 
0B53:  MOVF   50,W
0B54:  SUBWF  38,W
0B55:  BTFSS  03.2
0B56:  GOTO   35C
.................... 		{ 
.................... 			pled_on = 1; 
0B57:  MOVLW  01
0B58:  MOVWF  53
.................... 			pled_count = 14; 
0B59:  MOVLW  0E
0B5A:  MOVWF  52
.................... 		} 
0B5B:  GOTO   362
.................... 		else if (section_count == pled_position - 15) 
0B5C:  MOVLW  0F
0B5D:  SUBWF  50,W
0B5E:  SUBWF  38,W
0B5F:  BTFSS  03.2
0B60:  GOTO   362
.................... 		{ 
.................... 			pled_on = 0; 
0B61:  CLRF   53
.................... 		} 
.................... 		if (pled_on == 1) 
0B62:  DECFSZ 53,W
0B63:  GOTO   378
.................... 		{ 
.................... 			if(pled_count >=0 && pled_count < 15)rgb_bits.red = pled[pled_count]; 
0B64:  MOVF   52,W
0B65:  SUBLW  0E
0B66:  BTFSS  03.0
0B67:  GOTO   377
0B68:  BCF    03.0
0B69:  RLF    52,W
0B6A:  MOVWF  55
0B6B:  INCF   55,W
0B6C:  BCF    0A.3
0B6D:  CALL   256
0B6E:  BSF    0A.3
0B6F:  MOVWF  7A
0B70:  MOVF   55,W
0B71:  BCF    0A.3
0B72:  CALL   256
0B73:  BSF    0A.3
0B74:  MOVWF  2A
0B75:  MOVF   7A,W
0B76:  MOVWF  2B
.................... 			pled_count--; 
0B77:  DECF   52,F
.................... 		} 
.................... 	} 
0B78:  BCF    0A.3
0B79:  BSF    0A.4
0B7A:  GOTO   529 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
