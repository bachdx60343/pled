#include <16F887.h>
#device ADC=16

#FUSES HS
#FUSES NOWDT                    //No Watch Dog Timer
#FUSES PUT                      //Power Up Timer
#FUSES MCLR
#FUSES NOPROTECT
#FUSES NOCPD
#FUSES NOBROWNOUT               //No brownout reset
//#FUSES BROWNOUT
//#FUSES BORV40

#FUSES IESO
#FUSES FCMEN
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES NODEBUG
//configuration bits: 2007-2CE2(); 2008-0700(FFFF)

#use delay(crystal=20000000)
#use FIXED_IO( E_outputs=PIN_E2,PIN_E1,PIN_E0 )
#use rs232(baud=19200,parity=E,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1)
//#use i2c(Master,Slow,sda=PIN_C4,scl=PIN_C3)

#OPT 1

#define MAX_SECTION 60
#define MODE_A 2
#define MODE_B 3
#define MODE_C 4
#define MODE_D 5

//#INLINE
void fetch_data();

struct
{
	int16 blue;
	int16 red;
	int16 green;
} rgb_bits;

const int16 number_upper[10][3] = 
{
	{0x03F8, 0x0208, 0x03F8}, // 0
	{0x0040, 0x0020, 0x03F8}, // 1
	{0x03C8, 0x0248, 0x0278}, // 2
	{0x0248, 0x0248, 0x03F8}, // 3
	{0x0078, 0x0040, 0x03F8}, // 4
	{0x0278, 0x0248, 0x03C8}, // 5
	{0x03F8, 0x0248, 0x03C8}, // 6
	{0x0008, 0x0008, 0x03F8}, // 7
	{0x03F8, 0x0248, 0x03F8}, // 8
	{0x0278, 0x0248, 0x03F8}  // 9
};

const int16 number_lower[10][3] = 
{
	{0x03F8, 0x0208, 0x03F8}, // 0
	{0x03F8, 0x0100, 0x0080}, // 1
	{0x03C8, 0x0248, 0x0278}, // 2
	{0x03F8, 0x0248, 0x0248}, // 3
	{0x03F8, 0x0040, 0x03C0}, // 4
	{0x0278, 0x0248, 0x03C8}, // 5
	{0x0278, 0x0248, 0x03F8}, // 6
	{0x03F8, 0x0200, 0x0200}, // 7
	{0x03F8, 0x0248, 0x03F8}, // 8
	{0x03F8, 0x0248, 0x03C8}  // 9
};

const int16 fpt[180] = 
{
	0xE000, 0xE0D8, 0x0000, 0xC000, 0xC070, 0x0000,
	0x8000, 0x8000, 0x0018, 0x8000, 0x8000, 0x0018,
	0x8000, 0x8000, 0x07F8, 0xC000, 0xC000, 0x07F8,
	0xE000, 0xE000, 0x0018, 0xC000, 0xC000, 0x0018,
	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000,
	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000,
	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000,
	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000,
	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000,
	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000,
	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000,
	0x8001, 0x8000, 0x0001, 0xC003, 0xC000, 0x0003,
	0xE007, 0xE000, 0x0007, 0xC00F, 0xC000, 0x000F,
	0x801F, 0x8000, 0x001F, 0x803F, 0x8000, 0x003F,
	0x807F, 0x8000, 0x007F, 0xC0FF, 0xC000, 0x00FF,
	0xE1FF, 0xE000, 0x01FF, 0xC0FF, 0xC000, 0x00FF,
	0x807F, 0x8000, 0x007F, 0x803F, 0x8000, 0x003F,
	0x801F, 0x8000, 0x001F, 0xC00F, 0xC000, 0x000F,
	0xE007, 0xE000, 0x0007, 0xC003, 0xC000, 0x0003,
	0x8001, 0x8000, 0x0001, 0x8000, 0x8000, 0x0000,
	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000,
	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000,
	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000,
	0x8000, 0x8000, 0x0000, 0xC000, 0xC000, 0x0000,
	0xE000, 0xE000, 0x0000, 0xC000, 0xC000, 0x0000,
	0x8000, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000,
	0x8000, 0x8000, 0x0000, 0xC7F8, 0xC000, 0x0000,
	0xE7F8, 0xE000, 0x0000, 0xC0D8, 0xC000, 0x0000,
	0x80D8, 0x8000, 0x0000, 0x8018, 0x8000, 0x0000,
	0x8000, 0x87F8, 0x0000, 0xC000, 0xC7F8, 0x0000
};

const int16 pled[15] = 
{
0x01F0, 0x0208, 0x03F8, 0x0000,
0x0248, 0x0248, 0x03F8, 0x0000,
0x0008, 0x0008, 0x03F8, 0x0000,
0x0040, 0x00A0, 0x00F8
};

const int16 asterisk[11][3] =
{
   {0x0000, 0x8000, 0x8000},
	{0x0000, 0xA000, 0xA000},
	{0x0000, 0xFE00, 0xFE00},
	{0x0000, 0xEB00, 0xEB00},
	{0x0000, 0xC181, 0xC181},
	{0x0000, 0x8043, 0x8043},
	{0x0000, 0x803C, 0x803C},
	{0x0000, 0x8000, 0x8000},
	{0x0000, 0x0000, 0x0000},
	{0x0000, 0x0000, 0x0000},
	{0x0000, 0x0000, 0x0000},
};
