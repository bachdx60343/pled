CCS PCM C Compiler, Version 5.015, 5967               22-Apr-14 12:50

               Filename:   C:\Users\LongNT\SVN\03. Engineering\034. Implementation\pLED_code\pLED.lst

               ROM used:   5810 words (71%)
                           Largest free fragment is 2048
               RAM used:   62 (17%) at main() level
                           104 (28%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.2
001C:  GOTO   01F
001D:  BTFSC  0C.2
001E:  GOTO   056
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   059
0023:  BTFSS  0B.4
0024:  GOTO   027
0025:  BTFSC  0B.1
0026:  GOTO   04D
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04A
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.5
002E:  GOTO   031
002F:  BTFSC  0C.5
0030:  GOTO   050
0031:  MOVLW  8C
0032:  MOVWF  04
0033:  BTFSS  00.0
0034:  GOTO   037
0035:  BTFSC  0C.0
0036:  GOTO   053
0037:  MOVF   22,W
0038:  MOVWF  04
0039:  MOVF   23,W
003A:  MOVWF  77
003B:  MOVF   24,W
003C:  MOVWF  78
003D:  MOVF   25,W
003E:  MOVWF  79
003F:  MOVF   26,W
0040:  MOVWF  7A
0041:  MOVF   27,W
0042:  MOVWF  7B
0043:  MOVF   20,W
0044:  MOVWF  0A
0045:  SWAPF  21,W
0046:  MOVWF  03
0047:  SWAPF  7F,F
0048:  SWAPF  7F,W
0049:  RETFIE
004A:  BCF    0A.3
004B:  BCF    0A.4
004C:  GOTO   57A
004D:  BCF    0A.3
004E:  BCF    0A.4
004F:  GOTO   573
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   5C6
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   630
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   635
0059:  BCF    0A.3
005A:  BCF    0A.4
005B:  GOTO   6A4
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... // 		Main function, framework for the program                            || 
.................... //                                                                           || 
.................... //   Last edited: 13 - April - 2014                                          || 
.................... //                                                                           || 
.................... //   void var_init() - Initialize global variables' values                   || 
.................... //   void main() - main program, called when the Microcontroller start       || 
.................... //																									  || 
.................... //   There are six Interrupt Service Routine (ISR):                          || 
.................... //					- INT_TIMER1: timer1 interrupt, circle timing                 || 
.................... //					- INT_CCP1: CCP1 interrupt, circle timing                     || 
.................... //					- INT_TIMER0: timer0 interrupt, section timing                || 
.................... //					- INT_EXT: external interrupt, receive clock's SQW/OUT        || 
.................... //					- INT_RB: RB2-RB3-RB4-RB5 input change interrupt, RF signal   || 
.................... //					- INT_RDA: RS232 receive interrupt, for update date, time     || 
.................... //																									  || 
.................... //===========================================================================|| 
....................  
.................... #include "pLED.h" 
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... //		   Header file for pLED project                                        || 
.................... //                                                                           || 
.................... //   Last edited: 13 - April - 2014                                          || 
.................... //                                                                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
005C:  BCF    0A.0
005D:  BCF    0A.1
005E:  BCF    0A.2
005F:  ADDWF  02,F
0060:  RETLW  F8
0061:  RETLW  03
0062:  RETLW  08
0063:  RETLW  02
0064:  RETLW  F8
0065:  RETLW  03
0066:  RETLW  40
0067:  RETLW  00
0068:  RETLW  20
0069:  RETLW  00
006A:  RETLW  F8
006B:  RETLW  03
006C:  RETLW  C8
006D:  RETLW  03
006E:  RETLW  48
006F:  RETLW  02
0070:  RETLW  78
0071:  RETLW  02
0072:  RETLW  48
0073:  RETLW  02
0074:  RETLW  48
0075:  RETLW  02
0076:  RETLW  F8
0077:  RETLW  03
0078:  RETLW  78
0079:  RETLW  00
007A:  RETLW  40
007B:  RETLW  00
007C:  RETLW  F8
007D:  RETLW  03
007E:  RETLW  78
007F:  RETLW  02
0080:  RETLW  48
0081:  RETLW  02
0082:  RETLW  C8
0083:  RETLW  03
0084:  RETLW  F8
0085:  RETLW  03
0086:  RETLW  48
0087:  RETLW  02
0088:  RETLW  C8
0089:  RETLW  03
008A:  RETLW  08
008B:  RETLW  00
008C:  RETLW  08
008D:  RETLW  00
008E:  RETLW  F8
008F:  RETLW  03
0090:  RETLW  F8
0091:  RETLW  03
0092:  RETLW  48
0093:  RETLW  02
0094:  RETLW  F8
0095:  RETLW  03
0096:  RETLW  78
0097:  RETLW  02
0098:  RETLW  48
0099:  RETLW  02
009A:  RETLW  F8
009B:  RETLW  03
009C:  BCF    0A.0
009D:  BCF    0A.1
009E:  BCF    0A.2
009F:  ADDWF  02,F
00A0:  RETLW  F8
00A1:  RETLW  03
00A2:  RETLW  08
00A3:  RETLW  02
00A4:  RETLW  F8
00A5:  RETLW  03
00A6:  RETLW  F8
00A7:  RETLW  03
00A8:  RETLW  00
00A9:  RETLW  01
00AA:  RETLW  80
00AB:  RETLW  00
00AC:  RETLW  C8
00AD:  RETLW  03
00AE:  RETLW  48
00AF:  RETLW  02
00B0:  RETLW  78
00B1:  RETLW  02
00B2:  RETLW  F8
00B3:  RETLW  03
00B4:  RETLW  48
00B5:  RETLW  02
00B6:  RETLW  48
00B7:  RETLW  02
00B8:  RETLW  F8
00B9:  RETLW  03
00BA:  RETLW  40
00BB:  RETLW  00
00BC:  RETLW  C0
00BD:  RETLW  03
00BE:  RETLW  78
00BF:  RETLW  02
00C0:  RETLW  48
00C1:  RETLW  02
00C2:  RETLW  C8
00C3:  RETLW  03
00C4:  RETLW  78
00C5:  RETLW  02
00C6:  RETLW  48
00C7:  RETLW  02
00C8:  RETLW  F8
00C9:  RETLW  03
00CA:  RETLW  F8
00CB:  RETLW  03
00CC:  RETLW  00
00CD:  RETLW  02
00CE:  RETLW  00
00CF:  RETLW  02
00D0:  RETLW  F8
00D1:  RETLW  03
00D2:  RETLW  48
00D3:  RETLW  02
00D4:  RETLW  F8
00D5:  RETLW  03
00D6:  RETLW  F8
00D7:  RETLW  03
00D8:  RETLW  48
00D9:  RETLW  02
00DA:  RETLW  C8
00DB:  RETLW  03
00DC:  MOVWF  7B
00DD:  MOVLW  00
00DE:  ADDWF  7A,W
00DF:  MOVWF  0A
00E0:  MOVF   7B,W
00E1:  ADDLW  E5
00E2:  BTFSC  03.0
00E3:  INCF   0A,F
00E4:  MOVWF  02
00E5:  RETLW  00
00E6:  RETLW  E0
00E7:  RETLW  D8
00E8:  RETLW  E0
00E9:  RETLW  00
00EA:  RETLW  00
00EB:  RETLW  00
00EC:  RETLW  C0
00ED:  RETLW  70
00EE:  RETLW  C0
00EF:  RETLW  00
00F0:  RETLW  00
00F1:  RETLW  00
00F2:  RETLW  80
00F3:  RETLW  00
00F4:  RETLW  80
00F5:  RETLW  18
00F6:  RETLW  00
00F7:  RETLW  00
00F8:  RETLW  80
00F9:  RETLW  00
00FA:  RETLW  80
00FB:  RETLW  18
00FC:  RETLW  00
00FD:  RETLW  00
00FE:  RETLW  80
00FF:  RETLW  00
0100:  RETLW  80
0101:  RETLW  F8
0102:  RETLW  07
0103:  RETLW  00
0104:  RETLW  C0
0105:  RETLW  00
0106:  RETLW  C0
0107:  RETLW  F8
0108:  RETLW  07
0109:  RETLW  00
010A:  RETLW  E0
010B:  RETLW  00
010C:  RETLW  E0
010D:  RETLW  18
010E:  RETLW  00
010F:  RETLW  00
0110:  RETLW  C0
0111:  RETLW  00
0112:  RETLW  C0
0113:  RETLW  18
0114:  RETLW  00
0115:  RETLW  00
0116:  RETLW  80
0117:  RETLW  00
0118:  RETLW  80
0119:  RETLW  00
011A:  RETLW  00
011B:  RETLW  00
011C:  RETLW  80
011D:  RETLW  00
011E:  RETLW  80
011F:  RETLW  00
0120:  RETLW  00
0121:  RETLW  00
0122:  RETLW  80
0123:  RETLW  00
0124:  RETLW  80
0125:  RETLW  00
0126:  RETLW  00
0127:  RETLW  00
0128:  RETLW  C0
0129:  RETLW  00
012A:  RETLW  C0
012B:  RETLW  00
012C:  RETLW  00
012D:  RETLW  00
012E:  RETLW  E0
012F:  RETLW  00
0130:  RETLW  E0
0131:  RETLW  00
0132:  RETLW  00
0133:  RETLW  00
0134:  RETLW  C0
0135:  RETLW  00
0136:  RETLW  C0
0137:  RETLW  00
0138:  RETLW  00
0139:  RETLW  00
013A:  RETLW  80
013B:  RETLW  00
013C:  RETLW  80
013D:  RETLW  00
013E:  RETLW  00
013F:  RETLW  00
0140:  RETLW  80
0141:  RETLW  00
0142:  RETLW  80
0143:  RETLW  00
0144:  RETLW  00
0145:  RETLW  00
0146:  RETLW  80
0147:  RETLW  00
0148:  RETLW  80
0149:  RETLW  00
014A:  RETLW  00
014B:  RETLW  00
014C:  RETLW  C0
014D:  RETLW  00
014E:  RETLW  C0
014F:  RETLW  00
0150:  RETLW  00
0151:  RETLW  00
0152:  RETLW  E0
0153:  RETLW  00
0154:  RETLW  E0
0155:  RETLW  00
0156:  RETLW  00
0157:  RETLW  00
0158:  RETLW  C0
0159:  RETLW  00
015A:  RETLW  C0
015B:  RETLW  00
015C:  RETLW  00
015D:  RETLW  00
015E:  RETLW  80
015F:  RETLW  00
0160:  RETLW  80
0161:  RETLW  00
0162:  RETLW  00
0163:  RETLW  00
0164:  RETLW  80
0165:  RETLW  00
0166:  RETLW  80
0167:  RETLW  00
0168:  RETLW  00
0169:  RETLW  01
016A:  RETLW  80
016B:  RETLW  00
016C:  RETLW  80
016D:  RETLW  01
016E:  RETLW  00
016F:  RETLW  03
0170:  RETLW  C0
0171:  RETLW  00
0172:  RETLW  C0
0173:  RETLW  03
0174:  RETLW  00
0175:  RETLW  07
0176:  RETLW  E0
0177:  RETLW  00
0178:  RETLW  E0
0179:  RETLW  07
017A:  RETLW  00
017B:  RETLW  0F
017C:  RETLW  C0
017D:  RETLW  00
017E:  RETLW  C0
017F:  RETLW  0F
0180:  RETLW  00
0181:  RETLW  1F
0182:  RETLW  80
0183:  RETLW  00
0184:  RETLW  80
0185:  RETLW  1F
0186:  RETLW  00
0187:  RETLW  3F
0188:  RETLW  80
0189:  RETLW  00
018A:  RETLW  80
018B:  RETLW  3F
018C:  RETLW  00
018D:  RETLW  7F
018E:  RETLW  80
018F:  RETLW  00
0190:  RETLW  80
0191:  RETLW  7F
0192:  RETLW  00
0193:  RETLW  FF
0194:  RETLW  C0
0195:  RETLW  00
0196:  RETLW  C0
0197:  RETLW  FF
0198:  RETLW  00
0199:  RETLW  7F
019A:  RETLW  E0
019B:  RETLW  00
019C:  RETLW  E0
019D:  RETLW  7F
019E:  RETLW  00
019F:  RETLW  3F
01A0:  RETLW  C0
01A1:  RETLW  00
01A2:  RETLW  C0
01A3:  RETLW  3F
01A4:  RETLW  00
01A5:  RETLW  1F
01A6:  RETLW  80
01A7:  RETLW  00
01A8:  RETLW  80
01A9:  RETLW  1F
01AA:  RETLW  00
01AB:  RETLW  0F
01AC:  RETLW  80
01AD:  RETLW  00
01AE:  RETLW  80
01AF:  RETLW  0F
01B0:  RETLW  00
01B1:  RETLW  07
01B2:  RETLW  80
01B3:  RETLW  00
01B4:  RETLW  80
01B5:  RETLW  07
01B6:  RETLW  00
01B7:  RETLW  03
01B8:  RETLW  C0
01B9:  RETLW  00
01BA:  RETLW  C0
01BB:  RETLW  03
01BC:  RETLW  00
01BD:  RETLW  01
01BE:  RETLW  E0
01BF:  RETLW  00
01C0:  RETLW  E0
01C1:  RETLW  01
01C2:  RETLW  00
01C3:  RETLW  00
01C4:  RETLW  C0
01C5:  RETLW  00
01C6:  RETLW  C0
01C7:  RETLW  00
01C8:  RETLW  00
01C9:  RETLW  00
01CA:  RETLW  80
01CB:  RETLW  00
01CC:  RETLW  80
01CD:  RETLW  00
01CE:  RETLW  00
01CF:  RETLW  00
01D0:  RETLW  80
01D1:  RETLW  00
01D2:  RETLW  80
01D3:  RETLW  00
01D4:  RETLW  00
01D5:  RETLW  00
01D6:  RETLW  80
01D7:  RETLW  00
01D8:  RETLW  80
01D9:  RETLW  00
01DA:  RETLW  00
01DB:  RETLW  00
01DC:  RETLW  C0
01DD:  RETLW  00
01DE:  RETLW  C0
01DF:  RETLW  00
01E0:  RETLW  00
01E1:  RETLW  00
01E2:  RETLW  E0
01E3:  RETLW  00
01E4:  RETLW  E0
01E5:  RETLW  00
01E6:  RETLW  00
01E7:  RETLW  00
01E8:  RETLW  C0
01E9:  RETLW  00
01EA:  RETLW  C0
01EB:  RETLW  00
01EC:  RETLW  00
01ED:  RETLW  00
01EE:  RETLW  80
01EF:  RETLW  00
01F0:  RETLW  80
01F1:  RETLW  00
01F2:  RETLW  00
01F3:  RETLW  00
01F4:  RETLW  80
01F5:  RETLW  00
01F6:  RETLW  80
01F7:  RETLW  00
01F8:  RETLW  00
01F9:  RETLW  00
01FA:  RETLW  80
01FB:  RETLW  00
01FC:  RETLW  80
01FD:  RETLW  00
01FE:  RETLW  00
01FF:  RETLW  00
0200:  RETLW  C0
0201:  RETLW  00
0202:  RETLW  C0
0203:  RETLW  00
0204:  RETLW  00
0205:  RETLW  00
0206:  RETLW  E0
0207:  RETLW  00
0208:  RETLW  E0
0209:  RETLW  00
020A:  RETLW  00
020B:  RETLW  00
020C:  RETLW  C0
020D:  RETLW  00
020E:  RETLW  C0
020F:  RETLW  00
0210:  RETLW  00
0211:  RETLW  00
0212:  RETLW  80
0213:  RETLW  00
0214:  RETLW  80
0215:  RETLW  00
0216:  RETLW  00
0217:  RETLW  00
0218:  RETLW  80
0219:  RETLW  00
021A:  RETLW  80
021B:  RETLW  00
021C:  RETLW  00
021D:  RETLW  00
021E:  RETLW  80
021F:  RETLW  00
0220:  RETLW  80
0221:  RETLW  00
0222:  RETLW  00
0223:  RETLW  F8
0224:  RETLW  C7
0225:  RETLW  00
0226:  RETLW  C0
0227:  RETLW  00
0228:  RETLW  00
0229:  RETLW  F8
022A:  RETLW  E7
022B:  RETLW  00
022C:  RETLW  E0
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  D8
0230:  RETLW  C0
0231:  RETLW  00
0232:  RETLW  C0
0233:  RETLW  00
0234:  RETLW  00
0235:  RETLW  D8
0236:  RETLW  80
0237:  RETLW  00
0238:  RETLW  80
0239:  RETLW  00
023A:  RETLW  00
023B:  RETLW  18
023C:  RETLW  80
023D:  RETLW  00
023E:  RETLW  80
023F:  RETLW  00
0240:  RETLW  00
0241:  RETLW  00
0242:  RETLW  80
0243:  RETLW  F8
0244:  RETLW  87
0245:  RETLW  00
0246:  RETLW  00
0247:  RETLW  00
0248:  RETLW  C0
0249:  RETLW  F8
024A:  RETLW  C7
024B:  RETLW  00
024C:  RETLW  00
024D:  BCF    0A.0
024E:  BSF    0A.1
024F:  BCF    0A.2
0250:  ADDWF  02,F
0251:  RETLW  F0
0252:  RETLW  01
0253:  RETLW  08
0254:  RETLW  02
0255:  RETLW  F8
0256:  RETLW  03
0257:  RETLW  00
0258:  RETLW  00
0259:  RETLW  48
025A:  RETLW  02
025B:  RETLW  48
025C:  RETLW  02
025D:  RETLW  F8
025E:  RETLW  03
025F:  RETLW  00
0260:  RETLW  00
0261:  RETLW  08
0262:  RETLW  00
0263:  RETLW  08
0264:  RETLW  00
0265:  RETLW  F8
0266:  RETLW  03
0267:  RETLW  00
0268:  RETLW  00
0269:  RETLW  40
026A:  RETLW  00
026B:  RETLW  A0
026C:  RETLW  00
026D:  RETLW  F8
026E:  RETLW  00
026F:  BCF    0A.0
0270:  BSF    0A.1
0271:  BCF    0A.2
0272:  ADDWF  02,F
0273:  RETLW  C8
0274:  RETLW  03
0275:  RETLW  48
0276:  RETLW  02
0277:  RETLW  78
0278:  RETLW  02
0279:  RETLW  00
027A:  RETLW  00
027B:  RETLW  F8
027C:  RETLW  03
027D:  RETLW  08
027E:  RETLW  02
027F:  RETLW  F8
0280:  RETLW  03
0281:  RETLW  00
0282:  RETLW  00
0283:  RETLW  40
0284:  RETLW  00
0285:  RETLW  20
0286:  RETLW  00
0287:  RETLW  F8
0288:  RETLW  03
0289:  RETLW  00
028A:  RETLW  00
028B:  RETLW  78
028C:  RETLW  00
028D:  RETLW  40
028E:  RETLW  00
028F:  RETLW  F8
0290:  RETLW  03
0291:  MOVWF  7B
0292:  MOVLW  02
0293:  ADDWF  7A,W
0294:  MOVWF  0A
0295:  MOVF   7B,W
0296:  ADDLW  9A
0297:  BTFSC  03.0
0298:  INCF   0A,F
0299:  MOVWF  02
029A:  RETLW  00
029B:  RETLW  03
029C:  RETLW  00
029D:  RETLW  FE
029E:  RETLW  00
029F:  RETLW  FE
02A0:  RETLW  00
02A1:  RETLW  03
02A2:  RETLW  00
02A3:  RETLW  FE
02A4:  RETLW  00
02A5:  RETLW  FE
02A6:  RETLW  00
02A7:  RETLW  03
02A8:  RETLW  00
02A9:  RETLW  FE
02AA:  RETLW  00
02AB:  RETLW  FE
02AC:  RETLW  00
02AD:  RETLW  0F
02AE:  RETLW  00
02AF:  RETLW  F0
02B0:  RETLW  00
02B1:  RETLW  F0
02B2:  RETLW  00
02B3:  RETLW  1F
02B4:  RETLW  00
02B5:  RETLW  EE
02B6:  RETLW  00
02B7:  RETLW  EE
02B8:  RETLW  00
02B9:  RETLW  3F
02BA:  RETLW  00
02BB:  RETLW  DE
02BC:  RETLW  00
02BD:  RETLW  DE
02BE:  RETLW  00
02BF:  RETLW  3F
02C0:  RETLW  00
02C1:  RETLW  DE
02C2:  RETLW  00
02C3:  RETLW  DE
02C4:  RETLW  80
02C5:  RETLW  3F
02C6:  RETLW  00
02C7:  RETLW  DF
02C8:  RETLW  00
02C9:  RETLW  DF
02CA:  RETLW  80
02CB:  RETLW  3F
02CC:  RETLW  80
02CD:  RETLW  DF
02CE:  RETLW  80
02CF:  RETLW  DF
02D0:  RETLW  80
02D1:  RETLW  3F
02D2:  RETLW  80
02D3:  RETLW  DF
02D4:  RETLW  80
02D5:  RETLW  DF
02D6:  RETLW  80
02D7:  RETLW  3F
02D8:  RETLW  80
02D9:  RETLW  DD
02DA:  RETLW  80
02DB:  RETLW  DD
02DC:  RETLW  80
02DD:  RETLW  3F
02DE:  RETLW  80
02DF:  RETLW  DD
02E0:  RETLW  80
02E1:  RETLW  DD
02E2:  RETLW  80
02E3:  RETLW  3F
02E4:  RETLW  80
02E5:  RETLW  DD
02E6:  RETLW  80
02E7:  RETLW  DD
02E8:  RETLW  80
02E9:  RETLW  3F
02EA:  RETLW  80
02EB:  RETLW  DF
02EC:  RETLW  80
02ED:  RETLW  DF
02EE:  RETLW  80
02EF:  RETLW  3F
02F0:  RETLW  80
02F1:  RETLW  DF
02F2:  RETLW  80
02F3:  RETLW  DF
02F4:  RETLW  00
02F5:  RETLW  3C
02F6:  RETLW  E0
02F7:  RETLW  DF
02F8:  RETLW  00
02F9:  RETLW  DC
02FA:  RETLW  00
02FB:  RETLW  18
02FC:  RETLW  F0
02FD:  RETLW  FF
02FE:  RETLW  00
02FF:  RETLW  F8
0300:  RETLW  00
0301:  RETLW  10
0302:  RETLW  80
0303:  RETLW  FF
0304:  RETLW  00
0305:  RETLW  F0
0306:  RETLW  00
0307:  RETLW  00
0308:  RETLW  70
0309:  RETLW  FE
030A:  RETLW  00
030B:  RETLW  E0
030C:  RETLW  00
030D:  RETLW  00
030E:  RETLW  E0
030F:  RETLW  FF
0310:  RETLW  00
0311:  RETLW  E0
0312:  RETLW  00
0313:  RETLW  00
0314:  RETLW  C0
0315:  RETLW  FF
0316:  RETLW  00
0317:  RETLW  E0
0318:  RETLW  80
0319:  RETLW  00
031A:  RETLW  00
031B:  RETLW  FF
031C:  RETLW  00
031D:  RETLW  E1
031E:  RETLW  00
031F:  RETLW  01
0320:  RETLW  00
0321:  RETLW  FE
0322:  RETLW  00
0323:  RETLW  F2
0324:  RETLW  00
0325:  RETLW  01
0326:  RETLW  00
0327:  RETLW  FE
0328:  RETLW  00
0329:  RETLW  FE
032A:  RETLW  00
032B:  RETLW  02
032C:  RETLW  00
032D:  RETLW  FC
032E:  RETLW  00
032F:  RETLW  FC
0330:  RETLW  00
0331:  RETLW  02
0332:  RETLW  00
0333:  RETLW  FC
0334:  RETLW  00
0335:  RETLW  FC
0336:  RETLW  00
0337:  RETLW  02
0338:  RETLW  00
0339:  RETLW  FC
033A:  RETLW  00
033B:  RETLW  FC
033C:  RETLW  00
033D:  RETLW  02
033E:  RETLW  00
033F:  RETLW  FC
0340:  RETLW  00
0341:  RETLW  FC
0342:  RETLW  00
0343:  RETLW  02
0344:  RETLW  00
0345:  RETLW  FC
0346:  RETLW  00
0347:  RETLW  FC
0348:  RETLW  00
0349:  RETLW  02
034A:  RETLW  00
034B:  RETLW  FC
034C:  RETLW  00
034D:  RETLW  FC
034E:  RETLW  00
034F:  RETLW  02
0350:  RETLW  00
0351:  RETLW  FC
0352:  RETLW  00
0353:  RETLW  FC
0354:  RETLW  00
0355:  RETLW  02
0356:  RETLW  00
0357:  RETLW  FC
0358:  RETLW  00
0359:  RETLW  FC
035A:  RETLW  00
035B:  RETLW  02
035C:  RETLW  00
035D:  RETLW  FC
035E:  RETLW  00
035F:  RETLW  FC
0360:  RETLW  00
0361:  RETLW  02
0362:  RETLW  00
0363:  RETLW  FC
0364:  RETLW  00
0365:  RETLW  FC
0366:  RETLW  00
0367:  RETLW  02
0368:  RETLW  00
0369:  RETLW  FC
036A:  RETLW  00
036B:  RETLW  FC
036C:  RETLW  00
036D:  RETLW  02
036E:  RETLW  00
036F:  RETLW  FC
0370:  RETLW  00
0371:  RETLW  FC
0372:  RETLW  00
0373:  RETLW  02
0374:  RETLW  00
0375:  RETLW  FC
0376:  RETLW  00
0377:  RETLW  FC
0378:  RETLW  00
0379:  RETLW  02
037A:  RETLW  00
037B:  RETLW  FC
037C:  RETLW  00
037D:  RETLW  FC
037E:  RETLW  00
037F:  RETLW  1A
0380:  RETLW  00
0381:  RETLW  E4
0382:  RETLW  00
0383:  RETLW  E4
0384:  RETLW  00
0385:  RETLW  17
0386:  RETLW  00
0387:  RETLW  E8
0388:  RETLW  00
0389:  RETLW  E8
038A:  RETLW  00
038B:  RETLW  11
038C:  RETLW  00
038D:  RETLW  EE
038E:  RETLW  00
038F:  RETLW  EE
0390:  RETLW  80
0391:  RETLW  1C
0392:  RETLW  00
0393:  RETLW  FF
0394:  RETLW  00
0395:  RETLW  FF
0396:  RETLW  40
0397:  RETLW  3E
0398:  RETLW  80
0399:  RETLW  FF
039A:  RETLW  80
039B:  RETLW  FF
039C:  RETLW  40
039D:  RETLW  3F
039E:  RETLW  80
039F:  RETLW  FF
03A0:  RETLW  80
03A1:  RETLW  FF
03A2:  RETLW  C0
03A3:  RETLW  1F
03A4:  RETLW  80
03A5:  RETLW  FF
03A6:  RETLW  80
03A7:  RETLW  FF
03A8:  RETLW  C0
03A9:  RETLW  1F
03AA:  RETLW  80
03AB:  RETLW  FF
03AC:  RETLW  80
03AD:  RETLW  FF
03AE:  RETLW  C0
03AF:  RETLW  1F
03B0:  RETLW  00
03B1:  RETLW  FF
03B2:  RETLW  00
03B3:  RETLW  FF
03B4:  RETLW  00
03B5:  RETLW  1F
03B6:  RETLW  00
03B7:  RETLW  E0
03B8:  RETLW  00
03B9:  RETLW  E0
03BA:  RETLW  00
03BB:  RETLW  03
03BC:  RETLW  00
03BD:  RETLW  FC
03BE:  RETLW  00
03BF:  RETLW  FC
03C0:  RETLW  00
03C1:  RETLW  03
03C2:  RETLW  00
03C3:  RETLW  FE
03C4:  RETLW  00
03C5:  RETLW  FE
03C6:  RETLW  00
03C7:  RETLW  03
03C8:  RETLW  00
03C9:  RETLW  FE
03CA:  RETLW  00
03CB:  RETLW  FE
03CC:  RETLW  00
03CD:  RETLW  03
03CE:  RETLW  00
03CF:  RETLW  FE
03D0:  RETLW  00
03D1:  RETLW  FE
03D2:  RETLW  00
03D3:  RETLW  03
03D4:  RETLW  00
03D5:  RETLW  FE
03D6:  RETLW  00
03D7:  RETLW  FE
03D8:  RETLW  00
03D9:  RETLW  03
03DA:  RETLW  00
03DB:  RETLW  FE
03DC:  RETLW  00
03DD:  RETLW  FE
03DE:  RETLW  00
03DF:  RETLW  03
03E0:  RETLW  00
03E1:  RETLW  FE
03E2:  RETLW  00
03E3:  RETLW  FE
03E4:  RETLW  00
03E5:  RETLW  03
03E6:  RETLW  00
03E7:  RETLW  FE
03E8:  RETLW  00
03E9:  RETLW  FE
03EA:  RETLW  00
03EB:  RETLW  03
03EC:  RETLW  00
03ED:  RETLW  FC
03EE:  RETLW  00
03EF:  RETLW  FC
03F0:  RETLW  00
03F1:  RETLW  03
03F2:  RETLW  00
03F3:  RETLW  FC
03F4:  RETLW  00
03F5:  RETLW  FC
03F6:  RETLW  00
03F7:  RETLW  03
03F8:  RETLW  00
03F9:  RETLW  FE
03FA:  RETLW  00
03FB:  RETLW  FE
03FC:  RETLW  00
03FD:  RETLW  03
03FE:  RETLW  00
03FF:  RETLW  FE
0400:  RETLW  00
0401:  RETLW  FE
0402:  MOVWF  7B
0403:  MOVLW  04
0404:  ADDWF  7A,W
0405:  MOVWF  0A
0406:  MOVF   7B,W
0407:  ADDLW  0B
0408:  BTFSC  03.0
0409:  INCF   0A,F
040A:  MOVWF  02
040B:  RETLW  00
040C:  RETLW  03
040D:  RETLW  00
040E:  RETLW  FE
040F:  RETLW  00
0410:  RETLW  FE
0411:  RETLW  00
0412:  RETLW  03
0413:  RETLW  00
0414:  RETLW  FE
0415:  RETLW  00
0416:  RETLW  FE
0417:  RETLW  00
0418:  RETLW  03
0419:  RETLW  00
041A:  RETLW  FE
041B:  RETLW  00
041C:  RETLW  FE
041D:  RETLW  00
041E:  RETLW  0F
041F:  RETLW  00
0420:  RETLW  F0
0421:  RETLW  00
0422:  RETLW  F0
0423:  RETLW  00
0424:  RETLW  1F
0425:  RETLW  00
0426:  RETLW  EE
0427:  RETLW  00
0428:  RETLW  EE
0429:  RETLW  00
042A:  RETLW  3F
042B:  RETLW  00
042C:  RETLW  DE
042D:  RETLW  00
042E:  RETLW  DE
042F:  RETLW  00
0430:  RETLW  3F
0431:  RETLW  00
0432:  RETLW  DE
0433:  RETLW  00
0434:  RETLW  DE
0435:  RETLW  80
0436:  RETLW  3F
0437:  RETLW  00
0438:  RETLW  DF
0439:  RETLW  00
043A:  RETLW  DF
043B:  RETLW  80
043C:  RETLW  3F
043D:  RETLW  80
043E:  RETLW  DF
043F:  RETLW  80
0440:  RETLW  DF
0441:  RETLW  80
0442:  RETLW  3F
0443:  RETLW  80
0444:  RETLW  DF
0445:  RETLW  80
0446:  RETLW  DF
0447:  RETLW  80
0448:  RETLW  3F
0449:  RETLW  80
044A:  RETLW  DD
044B:  RETLW  80
044C:  RETLW  DD
044D:  RETLW  80
044E:  RETLW  3F
044F:  RETLW  80
0450:  RETLW  DD
0451:  RETLW  80
0452:  RETLW  DD
0453:  RETLW  80
0454:  RETLW  3F
0455:  RETLW  80
0456:  RETLW  DD
0457:  RETLW  80
0458:  RETLW  DD
0459:  RETLW  80
045A:  RETLW  3F
045B:  RETLW  80
045C:  RETLW  DF
045D:  RETLW  80
045E:  RETLW  DF
045F:  RETLW  80
0460:  RETLW  3F
0461:  RETLW  80
0462:  RETLW  DF
0463:  RETLW  80
0464:  RETLW  DF
0465:  RETLW  00
0466:  RETLW  3C
0467:  RETLW  E0
0468:  RETLW  DF
0469:  RETLW  00
046A:  RETLW  DC
046B:  RETLW  00
046C:  RETLW  18
046D:  RETLW  F0
046E:  RETLW  FF
046F:  RETLW  00
0470:  RETLW  F8
0471:  RETLW  00
0472:  RETLW  10
0473:  RETLW  80
0474:  RETLW  FF
0475:  RETLW  00
0476:  RETLW  F0
0477:  RETLW  00
0478:  RETLW  00
0479:  RETLW  70
047A:  RETLW  FE
047B:  RETLW  00
047C:  RETLW  E0
047D:  RETLW  00
047E:  RETLW  00
047F:  RETLW  E0
0480:  RETLW  FF
0481:  RETLW  00
0482:  RETLW  E0
0483:  RETLW  00
0484:  RETLW  00
0485:  RETLW  C0
0486:  RETLW  FF
0487:  RETLW  00
0488:  RETLW  E0
0489:  RETLW  80
048A:  RETLW  00
048B:  RETLW  00
048C:  RETLW  FF
048D:  RETLW  00
048E:  RETLW  E1
048F:  RETLW  00
0490:  RETLW  01
0491:  RETLW  00
0492:  RETLW  FE
0493:  RETLW  00
0494:  RETLW  F2
0495:  RETLW  00
0496:  RETLW  01
0497:  RETLW  00
0498:  RETLW  FE
0499:  RETLW  00
049A:  RETLW  FE
049B:  RETLW  00
049C:  RETLW  02
049D:  RETLW  00
049E:  RETLW  FC
049F:  RETLW  00
04A0:  RETLW  FC
04A1:  RETLW  00
04A2:  RETLW  02
04A3:  RETLW  00
04A4:  RETLW  FC
04A5:  RETLW  00
04A6:  RETLW  FC
04A7:  RETLW  00
04A8:  RETLW  02
04A9:  RETLW  00
04AA:  RETLW  FC
04AB:  RETLW  00
04AC:  RETLW  FC
04AD:  RETLW  00
04AE:  RETLW  02
04AF:  RETLW  00
04B0:  RETLW  FC
04B1:  RETLW  00
04B2:  RETLW  FC
04B3:  RETLW  00
04B4:  RETLW  02
04B5:  RETLW  00
04B6:  RETLW  FC
04B7:  RETLW  00
04B8:  RETLW  FC
04B9:  RETLW  00
04BA:  RETLW  02
04BB:  RETLW  00
04BC:  RETLW  FC
04BD:  RETLW  00
04BE:  RETLW  FC
04BF:  RETLW  00
04C0:  RETLW  02
04C1:  RETLW  00
04C2:  RETLW  FC
04C3:  RETLW  00
04C4:  RETLW  FC
04C5:  RETLW  00
04C6:  RETLW  02
04C7:  RETLW  00
04C8:  RETLW  FC
04C9:  RETLW  00
04CA:  RETLW  FC
04CB:  RETLW  00
04CC:  RETLW  02
04CD:  RETLW  00
04CE:  RETLW  FC
04CF:  RETLW  00
04D0:  RETLW  FC
04D1:  RETLW  00
04D2:  RETLW  02
04D3:  RETLW  00
04D4:  RETLW  FC
04D5:  RETLW  00
04D6:  RETLW  FC
04D7:  RETLW  00
04D8:  RETLW  02
04D9:  RETLW  00
04DA:  RETLW  FC
04DB:  RETLW  00
04DC:  RETLW  FC
04DD:  RETLW  00
04DE:  RETLW  02
04DF:  RETLW  00
04E0:  RETLW  FC
04E1:  RETLW  00
04E2:  RETLW  FC
04E3:  RETLW  00
04E4:  RETLW  02
04E5:  RETLW  00
04E6:  RETLW  FC
04E7:  RETLW  00
04E8:  RETLW  FC
04E9:  RETLW  00
04EA:  RETLW  02
04EB:  RETLW  00
04EC:  RETLW  FC
04ED:  RETLW  00
04EE:  RETLW  FC
04EF:  RETLW  00
04F0:  RETLW  02
04F1:  RETLW  00
04F2:  RETLW  FC
04F3:  RETLW  00
04F4:  RETLW  FC
04F5:  RETLW  00
04F6:  RETLW  02
04F7:  RETLW  00
04F8:  RETLW  FC
04F9:  RETLW  00
04FA:  RETLW  FC
04FB:  RETLW  00
04FC:  RETLW  02
04FD:  RETLW  00
04FE:  RETLW  FC
04FF:  RETLW  00
0500:  RETLW  FC
0501:  RETLW  00
0502:  RETLW  02
0503:  RETLW  00
0504:  RETLW  FC
0505:  RETLW  00
0506:  RETLW  FC
0507:  RETLW  00
0508:  RETLW  0A
0509:  RETLW  00
050A:  RETLW  F4
050B:  RETLW  00
050C:  RETLW  F4
050D:  RETLW  00
050E:  RETLW  1E
050F:  RETLW  00
0510:  RETLW  E0
0511:  RETLW  00
0512:  RETLW  E0
0513:  RETLW  00
0514:  RETLW  12
0515:  RETLW  00
0516:  RETLW  EC
0517:  RETLW  00
0518:  RETLW  EC
0519:  RETLW  80
051A:  RETLW  21
051B:  RETLW  00
051C:  RETLW  FE
051D:  RETLW  00
051E:  RETLW  FE
051F:  RETLW  40
0520:  RETLW  3C
0521:  RETLW  80
0522:  RETLW  FF
0523:  RETLW  80
0524:  RETLW  FF
0525:  RETLW  40
0526:  RETLW  1F
0527:  RETLW  80
0528:  RETLW  FF
0529:  RETLW  80
052A:  RETLW  FF
052B:  RETLW  C0
052C:  RETLW  1F
052D:  RETLW  80
052E:  RETLW  FF
052F:  RETLW  80
0530:  RETLW  FF
0531:  RETLW  80
0532:  RETLW  1F
0533:  RETLW  00
0534:  RETLW  EE
0535:  RETLW  00
0536:  RETLW  EE
0537:  RETLW  00
0538:  RETLW  1F
0539:  RETLW  00
053A:  RETLW  E0
053B:  RETLW  00
053C:  RETLW  E0
053D:  RETLW  00
053E:  RETLW  03
053F:  RETLW  00
0540:  RETLW  FE
0541:  RETLW  00
0542:  RETLW  FE
0543:  RETLW  00
0544:  RETLW  03
0545:  RETLW  00
0546:  RETLW  FE
0547:  RETLW  00
0548:  RETLW  FE
0549:  RETLW  00
054A:  RETLW  03
054B:  RETLW  00
054C:  RETLW  FE
054D:  RETLW  00
054E:  RETLW  FE
054F:  RETLW  00
0550:  RETLW  03
0551:  RETLW  00
0552:  RETLW  FE
0553:  RETLW  00
0554:  RETLW  FE
0555:  RETLW  00
0556:  RETLW  03
0557:  RETLW  00
0558:  RETLW  FE
0559:  RETLW  00
055A:  RETLW  FE
055B:  RETLW  00
055C:  RETLW  03
055D:  RETLW  00
055E:  RETLW  FC
055F:  RETLW  00
0560:  RETLW  FC
0561:  RETLW  00
0562:  RETLW  03
0563:  RETLW  00
0564:  RETLW  FC
0565:  RETLW  00
0566:  RETLW  FC
0567:  RETLW  00
0568:  RETLW  03
0569:  RETLW  00
056A:  RETLW  FE
056B:  RETLW  00
056C:  RETLW  FE
056D:  RETLW  00
056E:  RETLW  03
056F:  RETLW  00
0570:  RETLW  FE
0571:  RETLW  00
0572:  RETLW  FE
*
064A:  MOVLW  20
064B:  BSF    03.5
064C:  MOVWF  2C
064D:  CLRF   28
064E:  CLRF   29
064F:  CLRF   2A
0650:  CLRF   2B
0651:  MOVF   23,W
0652:  MOVWF  7A
0653:  MOVF   22,W
0654:  MOVWF  79
0655:  MOVF   21,W
0656:  MOVWF  78
0657:  MOVF   20,W
0658:  MOVWF  77
0659:  BCF    03.5
065A:  BCF    03.0
065B:  BTFSS  77.0
065C:  GOTO   66D
065D:  BSF    03.5
065E:  MOVF   24,W
065F:  ADDWF  28,F
0660:  MOVF   25,W
0661:  BTFSC  03.0
0662:  INCFSZ 25,W
0663:  ADDWF  29,F
0664:  MOVF   26,W
0665:  BTFSC  03.0
0666:  INCFSZ 26,W
0667:  ADDWF  2A,F
0668:  MOVF   27,W
0669:  BTFSC  03.0
066A:  INCFSZ 27,W
066B:  ADDWF  2B,F
066C:  BCF    03.5
066D:  BSF    03.5
066E:  RRF    2B,F
066F:  RRF    2A,F
0670:  RRF    29,F
0671:  RRF    28,F
0672:  RRF    7A,F
0673:  RRF    79,F
0674:  RRF    78,F
0675:  RRF    77,F
0676:  DECFSZ 2C,F
0677:  GOTO   67A
0678:  GOTO   67C
0679:  BCF    03.5
067A:  BCF    03.5
067B:  GOTO   65A
067C:  BCF    03.5
*
078A:  MOVF   5B,W
078B:  CLRF   78
078C:  SUBWF  5A,W
078D:  BTFSC  03.0
078E:  GOTO   792
078F:  MOVF   5A,W
0790:  MOVWF  77
0791:  GOTO   79E
0792:  CLRF   77
0793:  MOVLW  08
0794:  MOVWF  5C
0795:  RLF    5A,F
0796:  RLF    77,F
0797:  MOVF   5B,W
0798:  SUBWF  77,W
0799:  BTFSC  03.0
079A:  MOVWF  77
079B:  RLF    78,F
079C:  DECFSZ 5C,F
079D:  GOTO   795
079E:  RETURN
079F:  CLRF   77
07A0:  CLRF   78
07A1:  MOVF   5A,W
07A2:  BCF    03.0
07A3:  BTFSC  5B.0
07A4:  ADDWF  77,F
07A5:  RRF    77,F
07A6:  RRF    78,F
07A7:  BTFSC  5B.1
07A8:  ADDWF  77,F
07A9:  RRF    77,F
07AA:  RRF    78,F
07AB:  BTFSC  5B.2
07AC:  ADDWF  77,F
07AD:  RRF    77,F
07AE:  RRF    78,F
07AF:  BTFSC  5B.3
07B0:  ADDWF  77,F
07B1:  RRF    77,F
07B2:  RRF    78,F
07B3:  BTFSC  5B.4
07B4:  ADDWF  77,F
07B5:  RRF    77,F
07B6:  RRF    78,F
07B7:  BTFSC  5B.5
07B8:  ADDWF  77,F
07B9:  RRF    77,F
07BA:  RRF    78,F
07BB:  BTFSC  5B.6
07BC:  ADDWF  77,F
07BD:  RRF    77,F
07BE:  RRF    78,F
07BF:  BTFSC  5B.7
07C0:  ADDWF  77,F
07C1:  RRF    77,F
07C2:  RRF    78,F
07C3:  RETURN
*
0A6C:  BTFSC  03.1
0A6D:  GOTO   271
0A6E:  MOVLW  5E
0A6F:  MOVWF  04
0A70:  BCF    03.7
0A71:  CLRF   77
0A72:  CLRF   78
0A73:  CLRF   79
0A74:  CLRF   7A
0A75:  CLRF   5E
0A76:  CLRF   5F
0A77:  CLRF   60
0A78:  CLRF   61
0A79:  MOVF   5D,W
0A7A:  IORWF  5C,W
0A7B:  IORWF  5B,W
0A7C:  IORWF  5A,W
0A7D:  BTFSC  03.2
0A7E:  GOTO   2AF
0A7F:  MOVLW  20
0A80:  MOVWF  62
0A81:  BCF    03.0
0A82:  RLF    56,F
0A83:  RLF    57,F
0A84:  RLF    58,F
0A85:  RLF    59,F
0A86:  RLF    5E,F
0A87:  RLF    5F,F
0A88:  RLF    60,F
0A89:  RLF    61,F
0A8A:  MOVF   5D,W
0A8B:  SUBWF  61,W
0A8C:  BTFSS  03.2
0A8D:  GOTO   298
0A8E:  MOVF   5C,W
0A8F:  SUBWF  60,W
0A90:  BTFSS  03.2
0A91:  GOTO   298
0A92:  MOVF   5B,W
0A93:  SUBWF  5F,W
0A94:  BTFSS  03.2
0A95:  GOTO   298
0A96:  MOVF   5A,W
0A97:  SUBWF  5E,W
0A98:  BTFSS  03.0
0A99:  GOTO   2A9
0A9A:  MOVF   5A,W
0A9B:  SUBWF  5E,F
0A9C:  MOVF   5B,W
0A9D:  BTFSS  03.0
0A9E:  INCFSZ 5B,W
0A9F:  SUBWF  5F,F
0AA0:  MOVF   5C,W
0AA1:  BTFSS  03.0
0AA2:  INCFSZ 5C,W
0AA3:  SUBWF  60,F
0AA4:  MOVF   5D,W
0AA5:  BTFSS  03.0
0AA6:  INCFSZ 5D,W
0AA7:  SUBWF  61,F
0AA8:  BSF    03.0
0AA9:  RLF    77,F
0AAA:  RLF    78,F
0AAB:  RLF    79,F
0AAC:  RLF    7A,F
0AAD:  DECFSZ 62,F
0AAE:  GOTO   281
0AAF:  MOVF   5E,W
0AB0:  MOVWF  00
0AB1:  INCF   04,F
0AB2:  MOVF   5F,W
0AB3:  MOVWF  00
0AB4:  INCF   04,F
0AB5:  MOVF   60,W
0AB6:  MOVWF  00
0AB7:  INCF   04,F
0AB8:  MOVF   61,W
0AB9:  MOVWF  00
0ABA:  BCF    0A.3
0ABB:  BSF    0A.4
0ABC:  GOTO   5E7 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES MCLR 
.................... #FUSES NOPROTECT 
.................... #FUSES NOCPD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO 
.................... #FUSES FCMEN 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG 
.................... //configuration bits: 2007-2CE2(); 2008-0700(FFFF) 
....................  
.................... #use delay(crystal=20000000) 
*
07DC:  MOVLW  56
07DD:  MOVWF  04
07DE:  BCF    03.7
07DF:  MOVF   00,W
07E0:  BTFSC  03.2
07E1:  GOTO   7EF
07E2:  MOVLW  06
07E3:  MOVWF  78
07E4:  CLRF   77
07E5:  DECFSZ 77,F
07E6:  GOTO   7E5
07E7:  DECFSZ 78,F
07E8:  GOTO   7E4
07E9:  MOVLW  7B
07EA:  MOVWF  77
07EB:  DECFSZ 77,F
07EC:  GOTO   7EB
07ED:  DECFSZ 00,F
07EE:  GOTO   7E2
07EF:  RETURN
.................... #use FIXED_IO( E_outputs=PIN_E2,PIN_E1,PIN_E0 ) 
.................... #use rs232(baud=19200,parity=E,xmit=PIN_C6,rcv=PIN_C7,bits=8,stop=1,stream=PORT1) 
*
07C4:  MOVLW  08
07C5:  MOVWF  78
07C6:  CLRF   57
07C7:  MOVF   56,W
07C8:  MOVWF  77
07C9:  MOVF   77,W
07CA:  XORWF  57,F
07CB:  RRF    77,F
07CC:  DECFSZ 78,F
07CD:  GOTO   7C9
07CE:  BTFSS  0C.4
07CF:  GOTO   7CE
07D0:  MOVLW  FE
07D1:  BSF    03.5
07D2:  ANDWF  18,F
07D3:  BCF    03.5
07D4:  BTFSS  57.0
07D5:  GOTO   7D9
07D6:  BSF    03.5
07D7:  BSF    18.0
07D8:  BCF    03.5
07D9:  MOVF   56,W
07DA:  MOVWF  19
07DB:  RETURN
....................  
.................... #OPT 1 
....................  
.................... #define MAX_SECTION 60 
.................... #define MODE_A 2 
.................... #define MODE_B 3 
.................... #define MODE_C 4 
.................... #define MODE_D 5 
....................  
.................... //variables for CCP1 interrupt 
.................... int8 timer1_overflow; 
.................... int32 sigHall_timer; 
.................... //variables for display routine 
.................... int8 circle_trigger; 
.................... int8 section_trigger; 
.................... int8 section_count; 
.................... int16 section_timer; 
.................... signed int8 tuning; 
.................... //variables for RB interrupt, RF input 
.................... BYTE port_b, last_b; 
.................... int8 mode, smode; 
.................... //variables for date, time values 
.................... int8 day, month, year, dow; 
.................... int8 hour, min, sec; 
.................... int8 tick, digit_sec; 
.................... //variables for digital clock 
.................... int8 hour_h, hour_l, min_h, min_l, anal_hour; 
.................... int8 day_h, day_l, month_h, month_l; 
.................... //variables for MODE_D, running letters 
.................... int8 pled_position; 
.................... signed int8 pled_direction; 
.................... int16 pled_count; 
.................... //variables for RS232 communication 
.................... int8 rc, rs232_status; 
....................  
.................... //leds' values at one moment 
.................... struct 
.................... { 
.................... 	int16 blue; 
.................... 	int16 red; 
.................... 	int16 green; 
.................... } rgb_bits; 
....................  
.................... //number to display at upper position (hour-minute) 
.................... const int16 number_upper[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x0040, 0x0020, 0x03F8}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x0248, 0x0248, 0x03F8}, // 3 
.................... 	{0x0078, 0x0040, 0x03F8}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x03F8, 0x0248, 0x03C8}, // 6 
.................... 	{0x0008, 0x0008, 0x03F8}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x0278, 0x0248, 0x03F8}  // 9 
.................... }; 
.................... //number to display at lower position (day-month) 
.................... const int16 number_lower[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x03F8, 0x0100, 0x0080}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x03F8, 0x0248, 0x0248}, // 3 
.................... 	{0x03F8, 0x0040, 0x03C0}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x0278, 0x0248, 0x03F8}, // 6 
.................... 	{0x03F8, 0x0200, 0x0200}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x03F8, 0x0248, 0x03C8}  // 9 
.................... }; 
....................  
.................... //data for MODE_C, FPT logo 
.................... const int16 fpt[180] =  
.................... { 
.................... 	0xE000, 0xE0D8, 0x0000,	0xC000, 0xC070, 0x0000, 
.................... 	0x8000, 0x8000, 0x0018,	0x8000, 0x8000, 0x0018, 
.................... 	0x8000, 0x8000, 0x07F8,	0xC000, 0xC000, 0x07F8, 
.................... 	0xE000, 0xE000, 0x0018,	0xC000, 0xC000, 0x0018, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8001, 0x8000, 0x0001,	0xC003, 0xC000, 0x0003, 
.................... 	0xE007, 0xE000, 0x0007,	0xC00F, 0xC000, 0x000F, 
.................... 	0x801F, 0x8000, 0x001F,	0x803F, 0x8000, 0x003F, 
.................... 	0x807F, 0x8000, 0x007F,	0xC0FF, 0xC000, 0x00FF, 
.................... 	0xE07F, 0xE000, 0x007F,	0xC03F, 0xC000, 0x003F, 
.................... 	0x801F, 0x8000, 0x001F,	0x800F, 0x8000, 0x000F, 
.................... 	0x8007, 0x8000, 0x0007,	0xC003, 0xC000, 0x0003, 
.................... 	0xE001, 0xE000, 0x0001,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC7F8, 0xC000, 0x0000, 
.................... 	0xE7F8, 0xE000, 0x0000,	0xC0D8, 0xC000, 0x0000, 
.................... 	0x80D8, 0x8000, 0x0000,	0x8018, 0x8000, 0x0000, 
.................... 	0x8000, 0x87F8, 0x0000,	0xC000, 0xC7F8, 0x0000, 
.................... }; 
....................  
.................... //data for MODE_D, running letters 
.................... const int16 pled_inward[15] =  
.................... { 
.................... 	0x01F0, 0x0208, 0x03F8, 0x0000, 
.................... 	0x0248, 0x0248, 0x03F8, 0x0000, 
.................... 	0x0008, 0x0008, 0x03F8, 0x0000, 
.................... 	0x0040, 0x00A0, 0x00F8 
.................... }; 
....................  
.................... const int16 year_2014[15] =  
.................... { 
.................... 	0x03C8, 0x0248, 0x0278, 0x0000, 
.................... 	0x03F8, 0x0208, 0x03F8, 0x0000, 
.................... 	0x0040, 0x0020, 0x03F8, 0x0000, 
.................... 	0x0078, 0x0040, 0x03F8 
.................... }; 
....................  
.................... const int16 flappy1[180] =  
.................... { 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0F00, 0xF000, 0xF000, 
.................... 	0x1F00, 0xEE00, 0xEE00,	0x3F00, 0xDE00, 0xDE00, 
.................... 	0x3F00, 0xDE00, 0xDE00,	0x3F80, 0xDF00, 0xDF00, 
.................... 	0x3F80, 0xDF80, 0xDF80,	0x3F80, 0xDF80, 0xDF80, 
.................... 	0x3F80, 0xDD80, 0xDD80,	0x3F80, 0xDD80, 0xDD80, 
.................... 	0x3F80, 0xDD80, 0xDD80,	0x3F80, 0xDF80, 0xDF80, 
.................... 	0x3F80, 0xDF80, 0xDF80,	0x3C00, 0xDFE0, 0xDC00, 
.................... 	0x1800, 0xFFF0, 0xF800,	0x1000, 0xFF80, 0xF000, 
.................... 	0x0000, 0xFE70, 0xE000,	0x0000, 0xFFE0, 0xE000, 
.................... 	0x0000, 0xFFC0, 0xE000,	0x0080, 0xFF00, 0xE100, 
.................... 	0x0100, 0xFE00, 0xF200,	0x0100, 0xFE00, 0xFE00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x1A00, 0xE400, 0xE400,	0x1700, 0xE800, 0xE800, 
.................... 	0x1100, 0xEE00, 0xEE00,	0x1C80, 0xFF00, 0xFF00, 
.................... 	0x3E40, 0xFF80, 0xFF80,	0x3F40, 0xFF80, 0xFF80, 
.................... 	0x1FC0, 0xFF80, 0xFF80,	0x1FC0, 0xFF80, 0xFF80, 
.................... 	0x1FC0, 0xFF00, 0xFF00,	0x1F00, 0xE000, 0xE000, 
.................... 	0x0300, 0xFC00, 0xFC00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFC00, 0xFC00,	0x0300, 0xFC00, 0xFC00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00 
.................... }; 
....................  
.................... const int16 flappy2[180] =  
.................... { 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0F00, 0xF000, 0xF000, 
.................... 	0x1F00, 0xEE00, 0xEE00,	0x3F00, 0xDE00, 0xDE00, 
.................... 	0x3F00, 0xDE00, 0xDE00,	0x3F80, 0xDF00, 0xDF00, 
.................... 	0x3F80, 0xDF80, 0xDF80,	0x3F80, 0xDF80, 0xDF80, 
.................... 	0x3F80, 0xDD80, 0xDD80,	0x3F80, 0xDD80, 0xDD80, 
.................... 	0x3F80, 0xDD80, 0xDD80,	0x3F80, 0xDF80, 0xDF80, 
.................... 	0x3F80, 0xDF80, 0xDF80,	0x3C00, 0xDFE0, 0xDC00, 
.................... 	0x1800, 0xFFF0, 0xF800,	0x1000, 0xFF80, 0xF000, 
.................... 	0x0000, 0xFE70, 0xE000,	0x0000, 0xFFE0, 0xE000, 
.................... 	0x0000, 0xFFC0, 0xE000,	0x0080, 0xFF00, 0xE100, 
.................... 	0x0100, 0xFE00, 0xF200,	0x0100, 0xFE00, 0xFE00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0200, 0xFC00, 0xFC00,	0x0200, 0xFC00, 0xFC00, 
.................... 	0x0A00, 0xF400, 0xF400,	0x1E00, 0xE000, 0xE000, 
.................... 	0x1200, 0xEC00, 0xEC00,	0x2180, 0xFE00, 0xFE00, 
.................... 	0x3C40, 0xFF80, 0xFF80,	0x1F40, 0xFF80, 0xFF80, 
.................... 	0x1FC0, 0xFF80, 0xFF80,	0x1F80, 0xEE00, 0xEE00, 
.................... 	0x1F00, 0xE000, 0xE000,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00, 
.................... 	0x0300, 0xFC00, 0xFC00,	0x0300, 0xFC00, 0xFC00, 
.................... 	0x0300, 0xFE00, 0xFE00,	0x0300, 0xFE00, 0xFE00 
.................... }; 
....................  
.................... #include "24256.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC256 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   32768 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    while(status==1) 
....................    { 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    } 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... #include "74595.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for latch 74HC595 - Base on source code from CCS library         || 
.................... //   Last edited: 1 - April - 2014                                           || 
.................... //                                                                           || 
.................... // void latch_write(int16 blue, int16 red, int16 green)                      || 
.................... //                  Writes 48 bits to the 6 chips                            || 
.................... //                                                                           || 
.................... // void latch_ClearAll()      turn off all the leds                          || 
.................... //                                                                           || 
.................... // void latch_SetAll()        turn on all the leds                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #IFNDEF EXP_OUT_ENABLE 
....................  
.................... #define EXP_OUT_ENABLE  PIN_E2 
.................... #define EXP_OUT_CLOCK   PIN_E1 
.................... #define EXP_OUT_DO      PIN_E0 
.................... #define NUMBER_OF_74595 6 
....................  
.................... #ENDIF 
....................  
.................... #INLINE 
.................... void latch_write(int16 blue, int16 red, int16 green) 
.................... { 
.................... 	BYTE i; 
.................... 	output_low(EXP_OUT_CLOCK); 
*
1063:  MOVLW  E8
1064:  BSF    03.5
1065:  MOVWF  09
1066:  BCF    03.5
1067:  BCF    09.1
*
128D:  MOVLW  E8
128E:  BSF    03.5
128F:  MOVWF  09
1290:  BCF    03.5
1291:  BCF    09.1
*
161B:  MOVLW  E8
161C:  BSF    03.5
161D:  MOVWF  09
161E:  BCF    03.5
161F:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1068:  MOVLW  E8
1069:  BSF    03.5
106A:  MOVWF  09
106B:  BCF    03.5
106C:  BCF    09.2
*
1292:  MOVLW  E8
1293:  BSF    03.5
1294:  MOVWF  09
1295:  BCF    03.5
1296:  BCF    09.2
*
1620:  MOVLW  E8
1621:  BSF    03.5
1622:  MOVWF  09
1623:  BCF    03.5
1624:  BCF    09.2
....................   	 
.................... 	for(i = 16; i > 0; i--) 
*
106D:  MOVLW  10
106E:  MOVWF  5C
106F:  MOVF   5C,F
1070:  BTFSC  03.2
1071:  GOTO   0D4
*
1297:  MOVLW  10
1298:  MOVWF  5C
1299:  MOVF   5C,F
129A:  BTFSC  03.2
129B:  GOTO   2FE
*
1625:  MOVLW  10
1626:  MOVWF  5C
1627:  MOVF   5C,F
1628:  BTFSC  03.2
1629:  GOTO   68C
.................... 	{ 
.................... 		//write green led first, the first bit output will be on the last latch 
.................... 		if(green & 0x01) 
*
1072:  MOVF   5A,W
1073:  ANDLW  01
1074:  MOVWF  77
1075:  CLRF   7A
1076:  MOVF   77,W
1077:  IORWF  7A,W
1078:  BTFSC  03.2
1079:  GOTO   080
*
129C:  MOVF   5A,W
129D:  ANDLW  01
129E:  MOVWF  77
129F:  CLRF   7A
12A0:  MOVF   77,W
12A1:  IORWF  7A,W
12A2:  BTFSC  03.2
12A3:  GOTO   2AA
*
162A:  MOVF   5A,W
162B:  ANDLW  01
162C:  MOVWF  77
162D:  CLRF   7A
162E:  MOVF   77,W
162F:  IORWF  7A,W
1630:  BTFSC  03.2
1631:  GOTO   638
.................... 			output_high(EXP_OUT_DO); 
*
107A:  MOVLW  E8
107B:  BSF    03.5
107C:  MOVWF  09
107D:  BCF    03.5
107E:  BSF    09.0
107F:  GOTO   085
*
12A4:  MOVLW  E8
12A5:  BSF    03.5
12A6:  MOVWF  09
12A7:  BCF    03.5
12A8:  BSF    09.0
12A9:  GOTO   2AF
*
1632:  MOVLW  E8
1633:  BSF    03.5
1634:  MOVWF  09
1635:  BCF    03.5
1636:  BSF    09.0
1637:  GOTO   63D
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
1080:  MOVLW  E8
1081:  BSF    03.5
1082:  MOVWF  09
1083:  BCF    03.5
1084:  BCF    09.0
*
12AA:  MOVLW  E8
12AB:  BSF    03.5
12AC:  MOVWF  09
12AD:  BCF    03.5
12AE:  BCF    09.0
*
1638:  MOVLW  E8
1639:  BSF    03.5
163A:  MOVWF  09
163B:  BCF    03.5
163C:  BCF    09.0
.................... 		shift_right(&green, 2, 0); 
*
1085:  BCF    03.0
1086:  RRF    5B,F
1087:  RRF    5A,F
*
12AF:  BCF    03.0
12B0:  RRF    5B,F
12B1:  RRF    5A,F
*
163D:  BCF    03.0
163E:  RRF    5B,F
163F:  RRF    5A,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
1088:  MOVLW  E8
1089:  BSF    03.5
108A:  MOVWF  09
108B:  BCF    03.5
108C:  BSF    09.1
*
12B2:  MOVLW  E8
12B3:  BSF    03.5
12B4:  MOVWF  09
12B5:  BCF    03.5
12B6:  BSF    09.1
*
1640:  MOVLW  E8
1641:  BSF    03.5
1642:  MOVWF  09
1643:  BCF    03.5
1644:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
108D:  MOVLW  E8
108E:  BSF    03.5
108F:  MOVWF  09
1090:  BCF    03.5
1091:  BCF    09.1
*
12B7:  MOVLW  E8
12B8:  BSF    03.5
12B9:  MOVWF  09
12BA:  BCF    03.5
12BB:  BCF    09.1
*
1645:  MOVLW  E8
1646:  BSF    03.5
1647:  MOVWF  09
1648:  BCF    03.5
1649:  BCF    09.1
.................... 	  	 
.................... 		//output red 
.................... 		if(red & 0x01) 
*
1092:  MOVF   58,W
1093:  ANDLW  01
1094:  MOVWF  77
1095:  CLRF   7A
1096:  MOVF   77,W
1097:  IORWF  7A,W
1098:  BTFSC  03.2
1099:  GOTO   0A0
*
12BC:  MOVF   58,W
12BD:  ANDLW  01
12BE:  MOVWF  77
12BF:  CLRF   7A
12C0:  MOVF   77,W
12C1:  IORWF  7A,W
12C2:  BTFSC  03.2
12C3:  GOTO   2CA
*
164A:  MOVF   58,W
164B:  ANDLW  01
164C:  MOVWF  77
164D:  CLRF   7A
164E:  MOVF   77,W
164F:  IORWF  7A,W
1650:  BTFSC  03.2
1651:  GOTO   658
.................... 			output_high(EXP_OUT_DO); 
*
109A:  MOVLW  E8
109B:  BSF    03.5
109C:  MOVWF  09
109D:  BCF    03.5
109E:  BSF    09.0
109F:  GOTO   0A5
*
12C4:  MOVLW  E8
12C5:  BSF    03.5
12C6:  MOVWF  09
12C7:  BCF    03.5
12C8:  BSF    09.0
12C9:  GOTO   2CF
*
1652:  MOVLW  E8
1653:  BSF    03.5
1654:  MOVWF  09
1655:  BCF    03.5
1656:  BSF    09.0
1657:  GOTO   65D
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
10A0:  MOVLW  E8
10A1:  BSF    03.5
10A2:  MOVWF  09
10A3:  BCF    03.5
10A4:  BCF    09.0
*
12CA:  MOVLW  E8
12CB:  BSF    03.5
12CC:  MOVWF  09
12CD:  BCF    03.5
12CE:  BCF    09.0
*
1658:  MOVLW  E8
1659:  BSF    03.5
165A:  MOVWF  09
165B:  BCF    03.5
165C:  BCF    09.0
.................... 		shift_right(&red, 2, 0); 
*
10A5:  BCF    03.0
10A6:  RRF    59,F
10A7:  RRF    58,F
*
12CF:  BCF    03.0
12D0:  RRF    59,F
12D1:  RRF    58,F
*
165D:  BCF    03.0
165E:  RRF    59,F
165F:  RRF    58,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10A8:  MOVLW  E8
10A9:  BSF    03.5
10AA:  MOVWF  09
10AB:  BCF    03.5
10AC:  BSF    09.1
*
12D2:  MOVLW  E8
12D3:  BSF    03.5
12D4:  MOVWF  09
12D5:  BCF    03.5
12D6:  BSF    09.1
*
1660:  MOVLW  E8
1661:  BSF    03.5
1662:  MOVWF  09
1663:  BCF    03.5
1664:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10AD:  MOVLW  E8
10AE:  BSF    03.5
10AF:  MOVWF  09
10B0:  BCF    03.5
10B1:  BCF    09.1
*
12D7:  MOVLW  E8
12D8:  BSF    03.5
12D9:  MOVWF  09
12DA:  BCF    03.5
12DB:  BCF    09.1
*
1665:  MOVLW  E8
1666:  BSF    03.5
1667:  MOVWF  09
1668:  BCF    03.5
1669:  BCF    09.1
.................... 	  	 
.................... 		//output blue 
.................... 		if(blue & 0x01) 
*
10B2:  MOVF   56,W
10B3:  ANDLW  01
10B4:  MOVWF  77
10B5:  CLRF   7A
10B6:  MOVF   77,W
10B7:  IORWF  7A,W
10B8:  BTFSC  03.2
10B9:  GOTO   0C0
*
12DC:  MOVF   56,W
12DD:  ANDLW  01
12DE:  MOVWF  77
12DF:  CLRF   7A
12E0:  MOVF   77,W
12E1:  IORWF  7A,W
12E2:  BTFSC  03.2
12E3:  GOTO   2EA
*
166A:  MOVF   56,W
166B:  ANDLW  01
166C:  MOVWF  77
166D:  CLRF   7A
166E:  MOVF   77,W
166F:  IORWF  7A,W
1670:  BTFSC  03.2
1671:  GOTO   678
.................... 			output_high(EXP_OUT_DO); 
*
10BA:  MOVLW  E8
10BB:  BSF    03.5
10BC:  MOVWF  09
10BD:  BCF    03.5
10BE:  BSF    09.0
10BF:  GOTO   0C5
*
12E4:  MOVLW  E8
12E5:  BSF    03.5
12E6:  MOVWF  09
12E7:  BCF    03.5
12E8:  BSF    09.0
12E9:  GOTO   2EF
*
1672:  MOVLW  E8
1673:  BSF    03.5
1674:  MOVWF  09
1675:  BCF    03.5
1676:  BSF    09.0
1677:  GOTO   67D
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
10C0:  MOVLW  E8
10C1:  BSF    03.5
10C2:  MOVWF  09
10C3:  BCF    03.5
10C4:  BCF    09.0
*
12EA:  MOVLW  E8
12EB:  BSF    03.5
12EC:  MOVWF  09
12ED:  BCF    03.5
12EE:  BCF    09.0
*
1678:  MOVLW  E8
1679:  BSF    03.5
167A:  MOVWF  09
167B:  BCF    03.5
167C:  BCF    09.0
.................... 		shift_right(&blue, 2, 0); 
*
10C5:  BCF    03.0
10C6:  RRF    57,F
10C7:  RRF    56,F
*
12EF:  BCF    03.0
12F0:  RRF    57,F
12F1:  RRF    56,F
*
167D:  BCF    03.0
167E:  RRF    57,F
167F:  RRF    56,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10C8:  MOVLW  E8
10C9:  BSF    03.5
10CA:  MOVWF  09
10CB:  BCF    03.5
10CC:  BSF    09.1
*
12F2:  MOVLW  E8
12F3:  BSF    03.5
12F4:  MOVWF  09
12F5:  BCF    03.5
12F6:  BSF    09.1
*
1680:  MOVLW  E8
1681:  BSF    03.5
1682:  MOVWF  09
1683:  BCF    03.5
1684:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10CD:  MOVLW  E8
10CE:  BSF    03.5
10CF:  MOVWF  09
10D0:  BCF    03.5
10D1:  BCF    09.1
10D2:  DECF   5C,F
10D3:  GOTO   06F
*
12F7:  MOVLW  E8
12F8:  BSF    03.5
12F9:  MOVWF  09
12FA:  BCF    03.5
12FB:  BCF    09.1
12FC:  DECF   5C,F
12FD:  GOTO   299
*
1685:  MOVLW  E8
1686:  BSF    03.5
1687:  MOVWF  09
1688:  BCF    03.5
1689:  BCF    09.1
168A:  DECF   5C,F
168B:  GOTO   627
.................... 	} 
....................   	 
.................... 	output_high(EXP_OUT_ENABLE); 
*
10D4:  MOVLW  E8
10D5:  BSF    03.5
10D6:  MOVWF  09
10D7:  BCF    03.5
10D8:  BSF    09.2
*
12FE:  MOVLW  E8
12FF:  BSF    03.5
1300:  MOVWF  09
1301:  BCF    03.5
1302:  BSF    09.2
*
168C:  MOVLW  E8
168D:  BSF    03.5
168E:  MOVWF  09
168F:  BCF    03.5
1690:  BSF    09.2
.................... 	output_low(EXP_OUT_ENABLE); 
*
10D9:  MOVLW  E8
10DA:  BSF    03.5
10DB:  MOVWF  09
10DC:  BCF    03.5
10DD:  BCF    09.2
*
1303:  MOVLW  E8
1304:  BSF    03.5
1305:  MOVWF  09
1306:  BCF    03.5
1307:  BCF    09.2
*
1691:  MOVLW  E8
1692:  BSF    03.5
1693:  MOVWF  09
1694:  BCF    03.5
1695:  BCF    09.2
.................... } 
....................  
.................... #INLINE 
.................... void latch_ClearAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
*
1330:  MOVLW  E8
1331:  BSF    03.5
1332:  MOVWF  09
1333:  BCF    03.5
1334:  BCF    09.1
*
15A6:  MOVLW  E8
15A7:  BSF    03.5
15A8:  MOVWF  09
15A9:  BCF    03.5
15AA:  BCF    09.1
*
169F:  MOVLW  E8
16A0:  BSF    03.5
16A1:  MOVWF  09
16A2:  BCF    03.5
16A3:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1335:  MOVLW  E8
1336:  BSF    03.5
1337:  MOVWF  09
1338:  BCF    03.5
1339:  BCF    09.2
*
15AB:  MOVLW  E8
15AC:  BSF    03.5
15AD:  MOVWF  09
15AE:  BCF    03.5
15AF:  BCF    09.2
*
16A4:  MOVLW  E8
16A5:  BSF    03.5
16A6:  MOVWF  09
16A7:  BCF    03.5
16A8:  BCF    09.2
.................... 	output_low(EXP_OUT_DO); 
*
133A:  MOVLW  E8
133B:  BSF    03.5
133C:  MOVWF  09
133D:  BCF    03.5
133E:  BCF    09.0
*
15B0:  MOVLW  E8
15B1:  BSF    03.5
15B2:  MOVWF  09
15B3:  BCF    03.5
15B4:  BCF    09.0
*
16A9:  MOVLW  E8
16AA:  BSF    03.5
16AB:  MOVWF  09
16AC:  BCF    03.5
16AD:  BCF    09.0
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
*
133F:  MOVLW  30
1340:  MOVWF  56
1341:  MOVF   56,F
1342:  BTFSC  03.2
1343:  GOTO   350
*
15B5:  MOVLW  30
15B6:  MOVWF  56
15B7:  MOVF   56,F
15B8:  BTFSC  03.2
15B9:  GOTO   5C6
*
16AE:  MOVLW  30
16AF:  MOVWF  56
16B0:  MOVF   56,F
16B1:  BTFSC  03.2
16B2:  GOTO   6BF
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
*
1344:  MOVLW  E8
1345:  BSF    03.5
1346:  MOVWF  09
1347:  BCF    03.5
1348:  BSF    09.1
*
15BA:  MOVLW  E8
15BB:  BSF    03.5
15BC:  MOVWF  09
15BD:  BCF    03.5
15BE:  BSF    09.1
*
16B3:  MOVLW  E8
16B4:  BSF    03.5
16B5:  MOVWF  09
16B6:  BCF    03.5
16B7:  BSF    09.1
....................    	output_low(EXP_OUT_CLOCK); 
*
1349:  MOVLW  E8
134A:  BSF    03.5
134B:  MOVWF  09
134C:  BCF    03.5
134D:  BCF    09.1
134E:  DECF   56,F
134F:  GOTO   341
*
15BF:  MOVLW  E8
15C0:  BSF    03.5
15C1:  MOVWF  09
15C2:  BCF    03.5
15C3:  BCF    09.1
15C4:  DECF   56,F
15C5:  GOTO   5B7
*
16B8:  MOVLW  E8
16B9:  BSF    03.5
16BA:  MOVWF  09
16BB:  BCF    03.5
16BC:  BCF    09.1
16BD:  DECF   56,F
16BE:  GOTO   6B0
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
*
1350:  MOVLW  E8
1351:  BSF    03.5
1352:  MOVWF  09
1353:  BCF    03.5
1354:  BSF    09.2
*
15C6:  MOVLW  E8
15C7:  BSF    03.5
15C8:  MOVWF  09
15C9:  BCF    03.5
15CA:  BSF    09.2
*
16BF:  MOVLW  E8
16C0:  BSF    03.5
16C1:  MOVWF  09
16C2:  BCF    03.5
16C3:  BSF    09.2
....................    output_low(EXP_OUT_ENABLE); 
*
1355:  MOVLW  E8
1356:  BSF    03.5
1357:  MOVWF  09
1358:  BCF    03.5
1359:  BCF    09.2
*
15CB:  MOVLW  E8
15CC:  BSF    03.5
15CD:  MOVWF  09
15CE:  BCF    03.5
15CF:  BCF    09.2
*
16C4:  MOVLW  E8
16C5:  BSF    03.5
16C6:  MOVWF  09
16C7:  BCF    03.5
16C8:  BCF    09.2
.................... } 
....................  
.................... void latch_SetAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
.................... 	output_low(EXP_OUT_ENABLE); 
.................... 	output_high(EXP_OUT_DO); 
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
....................    	output_low(EXP_OUT_CLOCK); 
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
....................    output_low(EXP_OUT_ENABLE); 
.................... } 
....................  
....................  
.................... #include "ds1307.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for Real Time Clock - Base on source code from ccsinfo.com       || 
.................... //   Last edited: 20 - March - 2014                                          || 
.................... //                                                                           || 
.................... // ds1307_init() - Enable oscillator without clearing the seconds register   || 
.................... //                 used when PIC loses power and DS1307 run from 3V BAT      || 
.................... //               - Enable squarewave output with 1Hz frequency               || 
.................... //                                                                           || 
.................... // ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time    || 
.................... //                                                                           || 
.................... // ds1307_get_date(day,mth,year,dow)               Get the date              || 
.................... //                                                                           || 
.................... // ds1307_get_time(hr,min,sec)                     Get the time              || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL, slow)  
*
06C6:  MOVLW  08
06C7:  MOVWF  78
06C8:  MOVLW  04
06C9:  MOVWF  77
06CA:  DECFSZ 77,F
06CB:  GOTO   6CA
06CC:  BCF    07.3
06CD:  BCF    55.3
06CE:  MOVF   55,W
06CF:  BSF    03.5
06D0:  MOVWF  07
06D1:  MOVLW  03
06D2:  MOVWF  77
06D3:  BCF    03.5
06D4:  DECFSZ 77,F
06D5:  GOTO   6D4
06D6:  RLF    5E,F
06D7:  BCF    07.4
06D8:  BTFSS  03.0
06D9:  GOTO   6E0
06DA:  BSF    55.4
06DB:  MOVF   55,W
06DC:  BSF    03.5
06DD:  MOVWF  07
06DE:  BCF    03.5
06DF:  GOTO   6E5
06E0:  BCF    55.4
06E1:  MOVF   55,W
06E2:  BSF    03.5
06E3:  MOVWF  07
06E4:  BCF    03.5
06E5:  NOP
06E6:  BSF    55.3
06E7:  MOVF   55,W
06E8:  BSF    03.5
06E9:  MOVWF  07
06EA:  BCF    03.5
06EB:  BTFSS  07.3
06EC:  GOTO   6EB
06ED:  DECFSZ 78,F
06EE:  GOTO   6C8
06EF:  MOVLW  04
06F0:  MOVWF  77
06F1:  DECFSZ 77,F
06F2:  GOTO   6F1
06F3:  BCF    07.3
06F4:  BCF    55.3
06F5:  MOVF   55,W
06F6:  BSF    03.5
06F7:  MOVWF  07
06F8:  NOP
06F9:  BCF    03.5
06FA:  BSF    55.4
06FB:  MOVF   55,W
06FC:  BSF    03.5
06FD:  MOVWF  07
06FE:  MOVLW  03
06FF:  MOVWF  77
0700:  BCF    03.5
0701:  DECFSZ 77,F
0702:  GOTO   701
0703:  MOVLW  03
0704:  MOVWF  77
0705:  DECFSZ 77,F
0706:  GOTO   705
0707:  BSF    55.3
0708:  MOVF   55,W
0709:  BSF    03.5
070A:  MOVWF  07
070B:  BCF    03.5
070C:  BTFSS  07.3
070D:  GOTO   70C
070E:  CLRF   78
070F:  MOVLW  03
0710:  MOVWF  77
0711:  DECFSZ 77,F
0712:  GOTO   711
0713:  BTFSC  07.4
0714:  BSF    78.0
0715:  BCF    07.3
0716:  BCF    55.3
0717:  MOVF   55,W
0718:  BSF    03.5
0719:  MOVWF  07
071A:  BCF    03.5
071B:  BCF    07.4
071C:  BCF    55.4
071D:  MOVF   55,W
071E:  BSF    03.5
071F:  MOVWF  07
0720:  BCF    03.5
0721:  RETURN
0722:  MOVLW  08
0723:  MOVWF  5B
0724:  MOVF   77,W
0725:  MOVWF  5C
0726:  BSF    55.4
0727:  MOVF   55,W
0728:  BSF    03.5
0729:  MOVWF  07
072A:  MOVLW  03
072B:  MOVWF  77
072C:  BCF    03.5
072D:  DECFSZ 77,F
072E:  GOTO   72D
072F:  BSF    55.3
0730:  MOVF   55,W
0731:  BSF    03.5
0732:  MOVWF  07
0733:  BCF    03.5
0734:  BTFSS  07.3
0735:  GOTO   734
0736:  BTFSC  07.4
0737:  BSF    03.0
0738:  BTFSS  07.4
0739:  BCF    03.0
073A:  RLF    78,F
073B:  MOVLW  04
073C:  MOVWF  77
073D:  DECFSZ 77,F
073E:  GOTO   73D
073F:  BCF    55.3
0740:  MOVF   55,W
0741:  BSF    03.5
0742:  MOVWF  07
0743:  BCF    03.5
0744:  BCF    07.3
0745:  DECFSZ 5B,F
0746:  GOTO   726
0747:  BSF    55.4
0748:  MOVF   55,W
0749:  BSF    03.5
074A:  MOVWF  07
074B:  MOVLW  03
074C:  MOVWF  77
074D:  BCF    03.5
074E:  DECFSZ 77,F
074F:  GOTO   74E
0750:  BCF    07.4
0751:  MOVF   5C,W
0752:  BTFSC  03.2
0753:  GOTO   759
0754:  BCF    55.4
0755:  MOVF   55,W
0756:  BSF    03.5
0757:  MOVWF  07
0758:  BCF    03.5
0759:  NOP
075A:  BSF    55.3
075B:  MOVF   55,W
075C:  BSF    03.5
075D:  MOVWF  07
075E:  BCF    03.5
075F:  BTFSS  07.3
0760:  GOTO   75F
0761:  MOVLW  04
0762:  MOVWF  77
0763:  DECFSZ 77,F
0764:  GOTO   763
0765:  BCF    07.3
0766:  BCF    55.3
0767:  MOVF   55,W
0768:  BSF    03.5
0769:  MOVWF  07
076A:  MOVLW  03
076B:  MOVWF  77
076C:  BCF    03.5
076D:  DECFSZ 77,F
076E:  GOTO   76D
076F:  BCF    07.4
0770:  BCF    55.4
0771:  MOVF   55,W
0772:  BSF    03.5
0773:  MOVWF  07
0774:  BCF    03.5
0775:  RETURN
....................  
.................... int8 bin2bcd(int8 bin_value);  
.................... int8 bcd2bin(int8 bcd_value);  
....................  
.................... void ds1307_init(void)  
*
0800:  CLRF   56
.................... {  
....................    int8 byte0 = 0;  
....................  
....................    i2c_start();          // send start signal 
0801:  BSF    55.4
0802:  MOVF   55,W
0803:  BSF    03.5
0804:  MOVWF  07
0805:  MOVLW  04
0806:  MOVWF  77
0807:  BCF    03.5
0808:  DECFSZ 77,F
0809:  GOTO   008
080A:  BSF    55.3
080B:  MOVF   55,W
080C:  BSF    03.5
080D:  MOVWF  07
080E:  MOVLW  03
080F:  MOVWF  77
0810:  BCF    03.5
0811:  DECFSZ 77,F
0812:  GOTO   011
0813:  BCF    07.4
0814:  BCF    55.4
0815:  MOVF   55,W
0816:  BSF    03.5
0817:  MOVWF  07
0818:  MOVLW  04
0819:  MOVWF  77
081A:  BCF    03.5
081B:  DECFSZ 77,F
081C:  GOTO   01B
081D:  BCF    07.3
081E:  BCF    55.3
081F:  MOVF   55,W
0820:  BSF    03.5
0821:  MOVWF  07
....................    i2c_write(0xD0);      // indentification of I2C slave device with write operation 
0822:  MOVLW  D0
0823:  BCF    03.5
0824:  MOVWF  5E
0825:  BCF    0A.3
0826:  CALL   6C6
0827:  BSF    0A.3
....................    i2c_write(0x00);      // address of register 0 
0828:  CLRF   5E
0829:  BCF    0A.3
082A:  CALL   6C6
082B:  BSF    0A.3
....................    i2c_start(); 
082C:  BSF    55.4
082D:  MOVF   55,W
082E:  BSF    03.5
082F:  MOVWF  07
0830:  MOVLW  04
0831:  MOVWF  77
0832:  BCF    03.5
0833:  DECFSZ 77,F
0834:  GOTO   033
0835:  BSF    55.3
0836:  MOVF   55,W
0837:  BSF    03.5
0838:  MOVWF  07
0839:  MOVLW  03
083A:  MOVWF  77
083B:  BCF    03.5
083C:  DECFSZ 77,F
083D:  GOTO   03C
083E:  BTFSS  07.3
083F:  GOTO   03E
0840:  BCF    07.4
0841:  BCF    55.4
0842:  MOVF   55,W
0843:  BSF    03.5
0844:  MOVWF  07
0845:  MOVLW  04
0846:  MOVWF  77
0847:  BCF    03.5
0848:  DECFSZ 77,F
0849:  GOTO   048
084A:  BCF    07.3
084B:  BCF    55.3
084C:  MOVF   55,W
084D:  BSF    03.5
084E:  MOVWF  07
....................    i2c_write(0xD1);      // change operation to read 
084F:  MOVLW  D1
0850:  BCF    03.5
0851:  MOVWF  5E
0852:  BCF    0A.3
0853:  CALL   6C6
0854:  BSF    0A.3
....................    byte0 = i2c_read(0);  // read current first byte in DS1307, which stores seconds value and CH bit (Clock Halt) 
0855:  CLRF   77
0856:  BCF    0A.3
0857:  CALL   722
0858:  BSF    0A.3
0859:  MOVF   78,W
085A:  MOVWF  56
....................    i2c_stop();           // send stop signal 
085B:  BCF    55.4
085C:  MOVF   55,W
085D:  BSF    03.5
085E:  MOVWF  07
085F:  NOP
0860:  BCF    03.5
0861:  BSF    55.3
0862:  MOVF   55,W
0863:  BSF    03.5
0864:  MOVWF  07
0865:  BCF    03.5
0866:  BTFSS  07.3
0867:  GOTO   066
0868:  MOVLW  04
0869:  MOVWF  77
086A:  DECFSZ 77,F
086B:  GOTO   06A
086C:  GOTO   06D
086D:  NOP
086E:  BSF    55.4
086F:  MOVF   55,W
0870:  BSF    03.5
0871:  MOVWF  07
0872:  MOVLW  04
0873:  MOVWF  77
0874:  BCF    03.5
0875:  DECFSZ 77,F
0876:  GOTO   075
....................    bit_clear(byte0, 7);  // clear bit 7 to enable oscillator, needed for clock to run 
0877:  BCF    56.7
....................  
....................    delay_us(3);          // make sure another transmit is possible, base on datasheet 
0878:  MOVLW  04
0879:  MOVWF  77
087A:  DECFSZ 77,F
087B:  GOTO   07A
087C:  GOTO   07D
....................  
....................    i2c_start();  
087D:  BSF    55.4
087E:  MOVF   55,W
087F:  BSF    03.5
0880:  MOVWF  07
0881:  MOVLW  04
0882:  MOVWF  77
0883:  BCF    03.5
0884:  DECFSZ 77,F
0885:  GOTO   084
0886:  BSF    55.3
0887:  MOVF   55,W
0888:  BSF    03.5
0889:  MOVWF  07
088A:  MOVLW  03
088B:  MOVWF  77
088C:  BCF    03.5
088D:  DECFSZ 77,F
088E:  GOTO   08D
088F:  BCF    07.4
0890:  BCF    55.4
0891:  MOVF   55,W
0892:  BSF    03.5
0893:  MOVWF  07
0894:  MOVLW  04
0895:  MOVWF  77
0896:  BCF    03.5
0897:  DECFSZ 77,F
0898:  GOTO   097
0899:  BCF    07.3
089A:  BCF    55.3
089B:  MOVF   55,W
089C:  BSF    03.5
089D:  MOVWF  07
....................    i2c_write(0xD0);      // write to ds1307 
089E:  MOVLW  D0
089F:  BCF    03.5
08A0:  MOVWF  5E
08A1:  BCF    0A.3
08A2:  CALL   6C6
08A3:  BSF    0A.3
....................    i2c_write(0x00);      // register 0 
08A4:  CLRF   5E
08A5:  BCF    0A.3
08A6:  CALL   6C6
08A7:  BSF    0A.3
....................    i2c_write(byte0);     // write to register 0 with the same seconds and bit 7 cleared 
08A8:  MOVF   56,W
08A9:  MOVWF  5E
08AA:  BCF    0A.3
08AB:  CALL   6C6
08AC:  BSF    0A.3
....................    i2c_stop(); 
08AD:  BCF    55.4
08AE:  MOVF   55,W
08AF:  BSF    03.5
08B0:  MOVWF  07
08B1:  NOP
08B2:  BCF    03.5
08B3:  BSF    55.3
08B4:  MOVF   55,W
08B5:  BSF    03.5
08B6:  MOVWF  07
08B7:  BCF    03.5
08B8:  BTFSS  07.3
08B9:  GOTO   0B8
08BA:  MOVLW  04
08BB:  MOVWF  77
08BC:  DECFSZ 77,F
08BD:  GOTO   0BC
08BE:  GOTO   0BF
08BF:  NOP
08C0:  BSF    55.4
08C1:  MOVF   55,W
08C2:  BSF    03.5
08C3:  MOVWF  07
08C4:  MOVLW  04
08C5:  MOVWF  77
08C6:  BCF    03.5
08C7:  DECFSZ 77,F
08C8:  GOTO   0C7
....................     
....................    delay_us(3); 
08C9:  MOVLW  04
08CA:  MOVWF  77
08CB:  DECFSZ 77,F
08CC:  GOTO   0CB
08CD:  GOTO   0CE
....................     
....................    i2c_start(); 
08CE:  BSF    55.4
08CF:  MOVF   55,W
08D0:  BSF    03.5
08D1:  MOVWF  07
08D2:  MOVLW  04
08D3:  MOVWF  77
08D4:  BCF    03.5
08D5:  DECFSZ 77,F
08D6:  GOTO   0D5
08D7:  BSF    55.3
08D8:  MOVF   55,W
08D9:  BSF    03.5
08DA:  MOVWF  07
08DB:  MOVLW  03
08DC:  MOVWF  77
08DD:  BCF    03.5
08DE:  DECFSZ 77,F
08DF:  GOTO   0DE
08E0:  BCF    07.4
08E1:  BCF    55.4
08E2:  MOVF   55,W
08E3:  BSF    03.5
08E4:  MOVWF  07
08E5:  MOVLW  04
08E6:  MOVWF  77
08E7:  BCF    03.5
08E8:  DECFSZ 77,F
08E9:  GOTO   0E8
08EA:  BCF    07.3
08EB:  BCF    55.3
08EC:  MOVF   55,W
08ED:  BSF    03.5
08EE:  MOVWF  07
....................    i2c_write(0xD0); 
08EF:  MOVLW  D0
08F0:  BCF    03.5
08F1:  MOVWF  5E
08F2:  BCF    0A.3
08F3:  CALL   6C6
08F4:  BSF    0A.3
....................    i2c_write(0x07);      // Control Register  
08F5:  MOVLW  07
08F6:  MOVWF  5E
08F7:  BCF    0A.3
08F8:  CALL   6C6
08F9:  BSF    0A.3
....................    i2c_write(0x10);      // enable squarewave output pin with frequency 1Hz 
08FA:  MOVLW  10
08FB:  MOVWF  5E
08FC:  BCF    0A.3
08FD:  CALL   6C6
08FE:  BSF    0A.3
....................    i2c_stop();  
08FF:  BCF    55.4
0900:  MOVF   55,W
0901:  BSF    03.5
0902:  MOVWF  07
0903:  NOP
0904:  BCF    03.5
0905:  BSF    55.3
0906:  MOVF   55,W
0907:  BSF    03.5
0908:  MOVWF  07
0909:  BCF    03.5
090A:  BTFSS  07.3
090B:  GOTO   10A
090C:  MOVLW  04
090D:  MOVWF  77
090E:  DECFSZ 77,F
090F:  GOTO   10E
0910:  GOTO   111
0911:  NOP
0912:  BSF    55.4
0913:  MOVF   55,W
0914:  BSF    03.5
0915:  MOVWF  07
0916:  MOVLW  04
0917:  MOVWF  77
0918:  BCF    03.5
0919:  DECFSZ 77,F
091A:  GOTO   119
091B:  BCF    0A.3
091C:  BSF    0A.4
091D:  GOTO   04A (RETURN)
....................  
.................... }  
....................  
.................... void ds1307_set_date_time(int8 day, int8 mth, int8 year, int8 dow, int8 hr, int8 min, int8 sec)  
.................... {  
....................   sec &= 0x7F;           // clear CH bit 
*
09E0:  BCF    5C.7
....................   hr  &= 0x3F;           // set 24h time mode 
09E1:  MOVLW  3F
09E2:  ANDWF  5A,F
....................  
....................   i2c_start();  
09E3:  BSF    55.4
09E4:  MOVF   55,W
09E5:  BSF    03.5
09E6:  MOVWF  07
09E7:  MOVLW  04
09E8:  MOVWF  77
09E9:  BCF    03.5
09EA:  DECFSZ 77,F
09EB:  GOTO   1EA
09EC:  BSF    55.3
09ED:  MOVF   55,W
09EE:  BSF    03.5
09EF:  MOVWF  07
09F0:  MOVLW  03
09F1:  MOVWF  77
09F2:  BCF    03.5
09F3:  DECFSZ 77,F
09F4:  GOTO   1F3
09F5:  BCF    07.4
09F6:  BCF    55.4
09F7:  MOVF   55,W
09F8:  BSF    03.5
09F9:  MOVWF  07
09FA:  MOVLW  04
09FB:  MOVWF  77
09FC:  BCF    03.5
09FD:  DECFSZ 77,F
09FE:  GOTO   1FD
09FF:  BCF    07.3
0A00:  BCF    55.3
0A01:  MOVF   55,W
0A02:  BSF    03.5
0A03:  MOVWF  07
....................   i2c_write(0xD0);            // I2C write address  
0A04:  MOVLW  D0
0A05:  BCF    03.5
0A06:  MOVWF  5E
0A07:  BCF    0A.3
0A08:  CALL   6C6
0A09:  BSF    0A.3
....................   i2c_write(0x00);            // Start at REG 0 
0A0A:  CLRF   5E
0A0B:  BCF    0A.3
0A0C:  CALL   6C6
0A0D:  BSF    0A.3
....................   i2c_write(bin2bcd(sec));    // REG 0 - seconds 
0A0E:  MOVF   5C,W
0A0F:  MOVWF  5D
0A10:  CALL   11E
0A11:  MOVF   78,W
0A12:  MOVWF  5D
0A13:  MOVWF  5E
0A14:  BCF    0A.3
0A15:  CALL   6C6
0A16:  BSF    0A.3
....................   i2c_write(bin2bcd(min));    // REG 1 - minutes 
0A17:  MOVF   5B,W
0A18:  MOVWF  5D
0A19:  CALL   11E
0A1A:  MOVF   78,W
0A1B:  MOVWF  5D
0A1C:  MOVWF  5E
0A1D:  BCF    0A.3
0A1E:  CALL   6C6
0A1F:  BSF    0A.3
....................   i2c_write(bin2bcd(hr));     // REG 2 - hours 
0A20:  MOVF   5A,W
0A21:  MOVWF  5D
0A22:  CALL   11E
0A23:  MOVF   78,W
0A24:  MOVWF  5D
0A25:  MOVWF  5E
0A26:  BCF    0A.3
0A27:  CALL   6C6
0A28:  BSF    0A.3
....................   i2c_write(bin2bcd(dow));    // REG 3 - date of week 
0A29:  MOVF   59,W
0A2A:  MOVWF  5D
0A2B:  CALL   11E
0A2C:  MOVF   78,W
0A2D:  MOVWF  5D
0A2E:  MOVWF  5E
0A2F:  BCF    0A.3
0A30:  CALL   6C6
0A31:  BSF    0A.3
....................   i2c_write(bin2bcd(day));    // REG 4 - day of month 
0A32:  MOVF   56,W
0A33:  MOVWF  5D
0A34:  CALL   11E
0A35:  MOVF   78,W
0A36:  MOVWF  5D
0A37:  MOVWF  5E
0A38:  BCF    0A.3
0A39:  CALL   6C6
0A3A:  BSF    0A.3
....................   i2c_write(bin2bcd(mth));    // REG 5 - month 
0A3B:  MOVF   57,W
0A3C:  MOVWF  5D
0A3D:  CALL   11E
0A3E:  MOVF   78,W
0A3F:  MOVWF  5D
0A40:  MOVWF  5E
0A41:  BCF    0A.3
0A42:  CALL   6C6
0A43:  BSF    0A.3
....................   i2c_write(bin2bcd(year));   // REG 6 - year 
0A44:  MOVF   58,W
0A45:  MOVWF  5D
0A46:  CALL   11E
0A47:  MOVF   78,W
0A48:  MOVWF  5D
0A49:  MOVWF  5E
0A4A:  BCF    0A.3
0A4B:  CALL   6C6
0A4C:  BSF    0A.3
....................   //i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
....................   i2c_stop();  
0A4D:  BCF    55.4
0A4E:  MOVF   55,W
0A4F:  BSF    03.5
0A50:  MOVWF  07
0A51:  NOP
0A52:  BCF    03.5
0A53:  BSF    55.3
0A54:  MOVF   55,W
0A55:  BSF    03.5
0A56:  MOVWF  07
0A57:  BCF    03.5
0A58:  BTFSS  07.3
0A59:  GOTO   258
0A5A:  MOVLW  04
0A5B:  MOVWF  77
0A5C:  DECFSZ 77,F
0A5D:  GOTO   25C
0A5E:  GOTO   25F
0A5F:  NOP
0A60:  BSF    55.4
0A61:  MOVF   55,W
0A62:  BSF    03.5
0A63:  MOVWF  07
0A64:  MOVLW  04
0A65:  MOVWF  77
0A66:  BCF    03.5
0A67:  DECFSZ 77,F
0A68:  GOTO   267
0A69:  BCF    0A.3
0A6A:  BSF    0A.4
0A6B:  GOTO   31A (RETURN)
.................... }  
....................  
.................... void ds1307_get_date(int8 &day, int8 &mth, int8 &year, int8 &dow)  
.................... {  
....................   i2c_start();  
*
1177:  BSF    55.4
1178:  MOVF   55,W
1179:  BSF    03.5
117A:  MOVWF  07
117B:  MOVLW  04
117C:  MOVWF  77
117D:  BCF    03.5
117E:  DECFSZ 77,F
117F:  GOTO   17E
1180:  BSF    55.3
1181:  MOVF   55,W
1182:  BSF    03.5
1183:  MOVWF  07
1184:  MOVLW  03
1185:  MOVWF  77
1186:  BCF    03.5
1187:  DECFSZ 77,F
1188:  GOTO   187
1189:  BCF    07.4
118A:  BCF    55.4
118B:  MOVF   55,W
118C:  BSF    03.5
118D:  MOVWF  07
118E:  MOVLW  04
118F:  MOVWF  77
1190:  BCF    03.5
1191:  DECFSZ 77,F
1192:  GOTO   191
1193:  BCF    07.3
1194:  BCF    55.3
1195:  MOVF   55,W
1196:  BSF    03.5
1197:  MOVWF  07
*
13F7:  BSF    55.4
13F8:  MOVF   55,W
13F9:  BSF    03.5
13FA:  MOVWF  07
13FB:  MOVLW  04
13FC:  MOVWF  77
13FD:  BCF    03.5
13FE:  DECFSZ 77,F
13FF:  GOTO   3FE
1400:  BSF    55.3
1401:  MOVF   55,W
1402:  BSF    03.5
1403:  MOVWF  07
1404:  MOVLW  03
1405:  MOVWF  77
1406:  BCF    03.5
1407:  DECFSZ 77,F
1408:  GOTO   407
1409:  BCF    07.4
140A:  BCF    55.4
140B:  MOVF   55,W
140C:  BSF    03.5
140D:  MOVWF  07
140E:  MOVLW  04
140F:  MOVWF  77
1410:  BCF    03.5
1411:  DECFSZ 77,F
1412:  GOTO   411
1413:  BCF    07.3
1414:  BCF    55.3
1415:  MOVF   55,W
1416:  BSF    03.5
1417:  MOVWF  07
....................   i2c_write(0xD0);  
*
1198:  MOVLW  D0
1199:  BCF    03.5
119A:  MOVWF  5E
119B:  BCF    0A.4
119C:  CALL   6C6
119D:  BSF    0A.4
*
1418:  MOVLW  D0
1419:  BCF    03.5
141A:  MOVWF  5E
141B:  BCF    0A.4
141C:  CALL   6C6
141D:  BSF    0A.4
....................   i2c_write(0x03);            // Start at REG 3 
*
119E:  MOVLW  03
119F:  MOVWF  5E
11A0:  BCF    0A.4
11A1:  CALL   6C6
11A2:  BSF    0A.4
*
141E:  MOVLW  03
141F:  MOVWF  5E
1420:  BCF    0A.4
1421:  CALL   6C6
1422:  BSF    0A.4
....................   i2c_start();  
*
11A3:  BSF    55.4
11A4:  MOVF   55,W
11A5:  BSF    03.5
11A6:  MOVWF  07
11A7:  MOVLW  04
11A8:  MOVWF  77
11A9:  BCF    03.5
11AA:  DECFSZ 77,F
11AB:  GOTO   1AA
11AC:  BSF    55.3
11AD:  MOVF   55,W
11AE:  BSF    03.5
11AF:  MOVWF  07
11B0:  MOVLW  03
11B1:  MOVWF  77
11B2:  BCF    03.5
11B3:  DECFSZ 77,F
11B4:  GOTO   1B3
11B5:  BTFSS  07.3
11B6:  GOTO   1B5
11B7:  BCF    07.4
11B8:  BCF    55.4
11B9:  MOVF   55,W
11BA:  BSF    03.5
11BB:  MOVWF  07
11BC:  MOVLW  04
11BD:  MOVWF  77
11BE:  BCF    03.5
11BF:  DECFSZ 77,F
11C0:  GOTO   1BF
11C1:  BCF    07.3
11C2:  BCF    55.3
11C3:  MOVF   55,W
11C4:  BSF    03.5
11C5:  MOVWF  07
*
1423:  BSF    55.4
1424:  MOVF   55,W
1425:  BSF    03.5
1426:  MOVWF  07
1427:  MOVLW  04
1428:  MOVWF  77
1429:  BCF    03.5
142A:  DECFSZ 77,F
142B:  GOTO   42A
142C:  BSF    55.3
142D:  MOVF   55,W
142E:  BSF    03.5
142F:  MOVWF  07
1430:  MOVLW  03
1431:  MOVWF  77
1432:  BCF    03.5
1433:  DECFSZ 77,F
1434:  GOTO   433
1435:  BTFSS  07.3
1436:  GOTO   435
1437:  BCF    07.4
1438:  BCF    55.4
1439:  MOVF   55,W
143A:  BSF    03.5
143B:  MOVWF  07
143C:  MOVLW  04
143D:  MOVWF  77
143E:  BCF    03.5
143F:  DECFSZ 77,F
1440:  GOTO   43F
1441:  BCF    07.3
1442:  BCF    55.3
1443:  MOVF   55,W
1444:  BSF    03.5
1445:  MOVWF  07
....................   i2c_write(0xD1);            // change to read 
*
11C6:  MOVLW  D1
11C7:  BCF    03.5
11C8:  MOVWF  5E
11C9:  BCF    0A.4
11CA:  CALL   6C6
11CB:  BSF    0A.4
*
1446:  MOVLW  D1
1447:  BCF    03.5
1448:  MOVWF  5E
1449:  BCF    0A.4
144A:  CALL   6C6
144B:  BSF    0A.4
....................   dow  = bcd2bin(i2c_read(1) & 0x07);   // REG 3 - date of week  
*
11CC:  MOVLW  01
11CD:  MOVWF  77
11CE:  BCF    0A.4
11CF:  CALL   722
11D0:  BSF    0A.4
11D1:  MOVF   78,W
11D2:  ANDLW  07
11D3:  MOVWF  56
11D4:  MOVWF  5B
11D5:  BCF    0A.4
11D6:  CALL   776
11D7:  BSF    0A.4
11D8:  MOVF   78,W
11D9:  MOVWF  3A
*
144C:  MOVLW  01
144D:  MOVWF  77
144E:  BCF    0A.4
144F:  CALL   722
1450:  BSF    0A.4
1451:  MOVF   78,W
1452:  ANDLW  07
1453:  MOVWF  56
1454:  MOVWF  5B
1455:  BCF    0A.4
1456:  CALL   776
1457:  BSF    0A.4
1458:  MOVF   78,W
1459:  MOVWF  3A
....................   day  = bcd2bin(i2c_read(1) & 0x3f);   // REG 4 - day of month 
*
11DA:  MOVLW  01
11DB:  MOVWF  77
11DC:  BCF    0A.4
11DD:  CALL   722
11DE:  BSF    0A.4
11DF:  MOVF   78,W
11E0:  ANDLW  3F
11E1:  MOVWF  56
11E2:  MOVWF  5B
11E3:  BCF    0A.4
11E4:  CALL   776
11E5:  BSF    0A.4
11E6:  MOVF   78,W
11E7:  MOVWF  37
*
145A:  MOVLW  01
145B:  MOVWF  77
145C:  BCF    0A.4
145D:  CALL   722
145E:  BSF    0A.4
145F:  MOVF   78,W
1460:  ANDLW  3F
1461:  MOVWF  56
1462:  MOVWF  5B
1463:  BCF    0A.4
1464:  CALL   776
1465:  BSF    0A.4
1466:  MOVF   78,W
1467:  MOVWF  37
....................   mth  = bcd2bin(i2c_read(1) & 0x1f);   // REG 5 - month 
*
11E8:  MOVLW  01
11E9:  MOVWF  77
11EA:  BCF    0A.4
11EB:  CALL   722
11EC:  BSF    0A.4
11ED:  MOVF   78,W
11EE:  ANDLW  1F
11EF:  MOVWF  56
11F0:  MOVWF  5B
11F1:  BCF    0A.4
11F2:  CALL   776
11F3:  BSF    0A.4
11F4:  MOVF   78,W
11F5:  MOVWF  38
*
1468:  MOVLW  01
1469:  MOVWF  77
146A:  BCF    0A.4
146B:  CALL   722
146C:  BSF    0A.4
146D:  MOVF   78,W
146E:  ANDLW  1F
146F:  MOVWF  56
1470:  MOVWF  5B
1471:  BCF    0A.4
1472:  CALL   776
1473:  BSF    0A.4
1474:  MOVF   78,W
1475:  MOVWF  38
....................   year = bcd2bin(i2c_read(0));          // REG 6 - year 
*
11F6:  CLRF   77
11F7:  BCF    0A.4
11F8:  CALL   722
11F9:  BSF    0A.4
11FA:  MOVF   78,W
11FB:  MOVWF  56
11FC:  MOVWF  5B
11FD:  BCF    0A.4
11FE:  CALL   776
11FF:  BSF    0A.4
1200:  MOVF   78,W
1201:  MOVWF  39
*
1476:  CLRF   77
1477:  BCF    0A.4
1478:  CALL   722
1479:  BSF    0A.4
147A:  MOVF   78,W
147B:  MOVWF  56
147C:  MOVWF  5B
147D:  BCF    0A.4
147E:  CALL   776
147F:  BSF    0A.4
1480:  MOVF   78,W
1481:  MOVWF  39
....................   i2c_stop();  
*
1202:  BCF    55.4
1203:  MOVF   55,W
1204:  BSF    03.5
1205:  MOVWF  07
1206:  NOP
1207:  BCF    03.5
1208:  BSF    55.3
1209:  MOVF   55,W
120A:  BSF    03.5
120B:  MOVWF  07
120C:  BCF    03.5
120D:  BTFSS  07.3
120E:  GOTO   20D
120F:  MOVLW  04
1210:  MOVWF  77
1211:  DECFSZ 77,F
1212:  GOTO   211
1213:  GOTO   214
1214:  NOP
1215:  BSF    55.4
1216:  MOVF   55,W
1217:  BSF    03.5
1218:  MOVWF  07
1219:  MOVLW  04
121A:  MOVWF  77
121B:  BCF    03.5
121C:  DECFSZ 77,F
121D:  GOTO   21C
*
1482:  BCF    55.4
1483:  MOVF   55,W
1484:  BSF    03.5
1485:  MOVWF  07
1486:  NOP
1487:  BCF    03.5
1488:  BSF    55.3
1489:  MOVF   55,W
148A:  BSF    03.5
148B:  MOVWF  07
148C:  BCF    03.5
148D:  BTFSS  07.3
148E:  GOTO   48D
148F:  MOVLW  04
1490:  MOVWF  77
1491:  DECFSZ 77,F
1492:  GOTO   491
1493:  GOTO   494
1494:  NOP
1495:  BSF    55.4
1496:  MOVF   55,W
1497:  BSF    03.5
1498:  MOVWF  07
1499:  MOVLW  04
149A:  MOVWF  77
149B:  BCF    03.5
149C:  DECFSZ 77,F
149D:  GOTO   49C
.................... }  
....................  
.................... void ds1307_get_time(int8 &hr, int8 &min, int8 &sec)  
.................... {  
....................   i2c_start();  
*
10DE:  BSF    55.4
10DF:  MOVF   55,W
10E0:  BSF    03.5
10E1:  MOVWF  07
10E2:  MOVLW  04
10E3:  MOVWF  77
10E4:  BCF    03.5
10E5:  DECFSZ 77,F
10E6:  GOTO   0E5
10E7:  BSF    55.3
10E8:  MOVF   55,W
10E9:  BSF    03.5
10EA:  MOVWF  07
10EB:  MOVLW  03
10EC:  MOVWF  77
10ED:  BCF    03.5
10EE:  DECFSZ 77,F
10EF:  GOTO   0EE
10F0:  BCF    07.4
10F1:  BCF    55.4
10F2:  MOVF   55,W
10F3:  BSF    03.5
10F4:  MOVWF  07
10F5:  MOVLW  04
10F6:  MOVWF  77
10F7:  BCF    03.5
10F8:  DECFSZ 77,F
10F9:  GOTO   0F8
10FA:  BCF    07.3
10FB:  BCF    55.3
10FC:  MOVF   55,W
10FD:  BSF    03.5
10FE:  MOVWF  07
*
135E:  BSF    55.4
135F:  MOVF   55,W
1360:  BSF    03.5
1361:  MOVWF  07
1362:  MOVLW  04
1363:  MOVWF  77
1364:  BCF    03.5
1365:  DECFSZ 77,F
1366:  GOTO   365
1367:  BSF    55.3
1368:  MOVF   55,W
1369:  BSF    03.5
136A:  MOVWF  07
136B:  MOVLW  03
136C:  MOVWF  77
136D:  BCF    03.5
136E:  DECFSZ 77,F
136F:  GOTO   36E
1370:  BCF    07.4
1371:  BCF    55.4
1372:  MOVF   55,W
1373:  BSF    03.5
1374:  MOVWF  07
1375:  MOVLW  04
1376:  MOVWF  77
1377:  BCF    03.5
1378:  DECFSZ 77,F
1379:  GOTO   378
137A:  BCF    07.3
137B:  BCF    55.3
137C:  MOVF   55,W
137D:  BSF    03.5
137E:  MOVWF  07
*
14C6:  BSF    55.4
14C7:  MOVF   55,W
14C8:  BSF    03.5
14C9:  MOVWF  07
14CA:  MOVLW  04
14CB:  MOVWF  77
14CC:  BCF    03.5
14CD:  DECFSZ 77,F
14CE:  GOTO   4CD
14CF:  BSF    55.3
14D0:  MOVF   55,W
14D1:  BSF    03.5
14D2:  MOVWF  07
14D3:  MOVLW  03
14D4:  MOVWF  77
14D5:  BCF    03.5
14D6:  DECFSZ 77,F
14D7:  GOTO   4D6
14D8:  BCF    07.4
14D9:  BCF    55.4
14DA:  MOVF   55,W
14DB:  BSF    03.5
14DC:  MOVWF  07
14DD:  MOVLW  04
14DE:  MOVWF  77
14DF:  BCF    03.5
14E0:  DECFSZ 77,F
14E1:  GOTO   4E0
14E2:  BCF    07.3
14E3:  BCF    55.3
14E4:  MOVF   55,W
14E5:  BSF    03.5
14E6:  MOVWF  07
....................   i2c_write(0xD0);  
*
10FF:  MOVLW  D0
1100:  BCF    03.5
1101:  MOVWF  5E
1102:  BCF    0A.4
1103:  CALL   6C6
1104:  BSF    0A.4
*
137F:  MOVLW  D0
1380:  BCF    03.5
1381:  MOVWF  5E
1382:  BCF    0A.4
1383:  CALL   6C6
1384:  BSF    0A.4
*
14E7:  MOVLW  D0
14E8:  BCF    03.5
14E9:  MOVWF  5E
14EA:  BCF    0A.4
14EB:  CALL   6C6
14EC:  BSF    0A.4
....................   i2c_write(0x00);                    // Start at REG 0 
*
1105:  CLRF   5E
1106:  BCF    0A.4
1107:  CALL   6C6
1108:  BSF    0A.4
*
1385:  CLRF   5E
1386:  BCF    0A.4
1387:  CALL   6C6
1388:  BSF    0A.4
*
14ED:  CLRF   5E
14EE:  BCF    0A.4
14EF:  CALL   6C6
14F0:  BSF    0A.4
....................   i2c_start();  
*
1109:  BSF    55.4
110A:  MOVF   55,W
110B:  BSF    03.5
110C:  MOVWF  07
110D:  MOVLW  04
110E:  MOVWF  77
110F:  BCF    03.5
1110:  DECFSZ 77,F
1111:  GOTO   110
1112:  BSF    55.3
1113:  MOVF   55,W
1114:  BSF    03.5
1115:  MOVWF  07
1116:  MOVLW  03
1117:  MOVWF  77
1118:  BCF    03.5
1119:  DECFSZ 77,F
111A:  GOTO   119
111B:  BTFSS  07.3
111C:  GOTO   11B
111D:  BCF    07.4
111E:  BCF    55.4
111F:  MOVF   55,W
1120:  BSF    03.5
1121:  MOVWF  07
1122:  MOVLW  04
1123:  MOVWF  77
1124:  BCF    03.5
1125:  DECFSZ 77,F
1126:  GOTO   125
1127:  BCF    07.3
1128:  BCF    55.3
1129:  MOVF   55,W
112A:  BSF    03.5
112B:  MOVWF  07
*
1389:  BSF    55.4
138A:  MOVF   55,W
138B:  BSF    03.5
138C:  MOVWF  07
138D:  MOVLW  04
138E:  MOVWF  77
138F:  BCF    03.5
1390:  DECFSZ 77,F
1391:  GOTO   390
1392:  BSF    55.3
1393:  MOVF   55,W
1394:  BSF    03.5
1395:  MOVWF  07
1396:  MOVLW  03
1397:  MOVWF  77
1398:  BCF    03.5
1399:  DECFSZ 77,F
139A:  GOTO   399
139B:  BTFSS  07.3
139C:  GOTO   39B
139D:  BCF    07.4
139E:  BCF    55.4
139F:  MOVF   55,W
13A0:  BSF    03.5
13A1:  MOVWF  07
13A2:  MOVLW  04
13A3:  MOVWF  77
13A4:  BCF    03.5
13A5:  DECFSZ 77,F
13A6:  GOTO   3A5
13A7:  BCF    07.3
13A8:  BCF    55.3
13A9:  MOVF   55,W
13AA:  BSF    03.5
13AB:  MOVWF  07
*
14F1:  BSF    55.4
14F2:  MOVF   55,W
14F3:  BSF    03.5
14F4:  MOVWF  07
14F5:  MOVLW  04
14F6:  MOVWF  77
14F7:  BCF    03.5
14F8:  DECFSZ 77,F
14F9:  GOTO   4F8
14FA:  BSF    55.3
14FB:  MOVF   55,W
14FC:  BSF    03.5
14FD:  MOVWF  07
14FE:  MOVLW  03
14FF:  MOVWF  77
1500:  BCF    03.5
1501:  DECFSZ 77,F
1502:  GOTO   501
1503:  BTFSS  07.3
1504:  GOTO   503
1505:  BCF    07.4
1506:  BCF    55.4
1507:  MOVF   55,W
1508:  BSF    03.5
1509:  MOVWF  07
150A:  MOVLW  04
150B:  MOVWF  77
150C:  BCF    03.5
150D:  DECFSZ 77,F
150E:  GOTO   50D
150F:  BCF    07.3
1510:  BCF    55.3
1511:  MOVF   55,W
1512:  BSF    03.5
1513:  MOVWF  07
....................   i2c_write(0xD1);                    // read mode 
*
112C:  MOVLW  D1
112D:  BCF    03.5
112E:  MOVWF  5E
112F:  BCF    0A.4
1130:  CALL   6C6
1131:  BSF    0A.4
*
13AC:  MOVLW  D1
13AD:  BCF    03.5
13AE:  MOVWF  5E
13AF:  BCF    0A.4
13B0:  CALL   6C6
13B1:  BSF    0A.4
*
1514:  MOVLW  D1
1515:  BCF    03.5
1516:  MOVWF  5E
1517:  BCF    0A.4
1518:  CALL   6C6
1519:  BSF    0A.4
....................   sec = bcd2bin(i2c_read(1) & 0x7f);  // REG 0 - seconds, exclude CH bit 
*
1132:  MOVLW  01
1133:  MOVWF  77
1134:  BCF    0A.4
1135:  CALL   722
1136:  BSF    0A.4
1137:  MOVF   78,W
1138:  ANDLW  7F
1139:  MOVWF  56
113A:  MOVWF  5B
113B:  BCF    0A.4
113C:  CALL   776
113D:  BSF    0A.4
113E:  MOVF   78,W
113F:  MOVWF  3D
*
13B2:  MOVLW  01
13B3:  MOVWF  77
13B4:  BCF    0A.4
13B5:  CALL   722
13B6:  BSF    0A.4
13B7:  MOVF   78,W
13B8:  ANDLW  7F
13B9:  MOVWF  56
13BA:  MOVWF  5B
13BB:  BCF    0A.4
13BC:  CALL   776
13BD:  BSF    0A.4
13BE:  MOVF   78,W
13BF:  MOVWF  3D
*
151A:  MOVLW  01
151B:  MOVWF  77
151C:  BCF    0A.4
151D:  CALL   722
151E:  BSF    0A.4
151F:  MOVF   78,W
1520:  ANDLW  7F
1521:  MOVWF  56
1522:  MOVWF  5B
1523:  BCF    0A.4
1524:  CALL   776
1525:  BSF    0A.4
1526:  MOVF   78,W
1527:  MOVWF  3D
....................   min = bcd2bin(i2c_read(1) & 0x7f);  // REG 1 - minutes 
*
1140:  MOVLW  01
1141:  MOVWF  77
1142:  BCF    0A.4
1143:  CALL   722
1144:  BSF    0A.4
1145:  MOVF   78,W
1146:  ANDLW  7F
1147:  MOVWF  56
1148:  MOVWF  5B
1149:  BCF    0A.4
114A:  CALL   776
114B:  BSF    0A.4
114C:  MOVF   78,W
114D:  MOVWF  3C
*
13C0:  MOVLW  01
13C1:  MOVWF  77
13C2:  BCF    0A.4
13C3:  CALL   722
13C4:  BSF    0A.4
13C5:  MOVF   78,W
13C6:  ANDLW  7F
13C7:  MOVWF  56
13C8:  MOVWF  5B
13C9:  BCF    0A.4
13CA:  CALL   776
13CB:  BSF    0A.4
13CC:  MOVF   78,W
13CD:  MOVWF  3C
*
1528:  MOVLW  01
1529:  MOVWF  77
152A:  BCF    0A.4
152B:  CALL   722
152C:  BSF    0A.4
152D:  MOVF   78,W
152E:  ANDLW  7F
152F:  MOVWF  56
1530:  MOVWF  5B
1531:  BCF    0A.4
1532:  CALL   776
1533:  BSF    0A.4
1534:  MOVF   78,W
1535:  MOVWF  3C
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  // REG 2 - hours, 24h mode 
*
114E:  CLRF   77
114F:  BCF    0A.4
1150:  CALL   722
1151:  BSF    0A.4
1152:  MOVF   78,W
1153:  ANDLW  3F
1154:  MOVWF  56
1155:  MOVWF  5B
1156:  BCF    0A.4
1157:  CALL   776
1158:  BSF    0A.4
1159:  MOVF   78,W
115A:  MOVWF  3B
*
13CE:  CLRF   77
13CF:  BCF    0A.4
13D0:  CALL   722
13D1:  BSF    0A.4
13D2:  MOVF   78,W
13D3:  ANDLW  3F
13D4:  MOVWF  56
13D5:  MOVWF  5B
13D6:  BCF    0A.4
13D7:  CALL   776
13D8:  BSF    0A.4
13D9:  MOVF   78,W
13DA:  MOVWF  3B
*
1536:  CLRF   77
1537:  BCF    0A.4
1538:  CALL   722
1539:  BSF    0A.4
153A:  MOVF   78,W
153B:  ANDLW  3F
153C:  MOVWF  56
153D:  MOVWF  5B
153E:  BCF    0A.4
153F:  CALL   776
1540:  BSF    0A.4
1541:  MOVF   78,W
1542:  MOVWF  3B
....................   i2c_stop();  
*
115B:  BCF    55.4
115C:  MOVF   55,W
115D:  BSF    03.5
115E:  MOVWF  07
115F:  NOP
1160:  BCF    03.5
1161:  BSF    55.3
1162:  MOVF   55,W
1163:  BSF    03.5
1164:  MOVWF  07
1165:  BCF    03.5
1166:  BTFSS  07.3
1167:  GOTO   166
1168:  MOVLW  04
1169:  MOVWF  77
116A:  DECFSZ 77,F
116B:  GOTO   16A
116C:  GOTO   16D
116D:  NOP
116E:  BSF    55.4
116F:  MOVF   55,W
1170:  BSF    03.5
1171:  MOVWF  07
1172:  MOVLW  04
1173:  MOVWF  77
1174:  BCF    03.5
1175:  DECFSZ 77,F
1176:  GOTO   175
*
13DB:  BCF    55.4
13DC:  MOVF   55,W
13DD:  BSF    03.5
13DE:  MOVWF  07
13DF:  NOP
13E0:  BCF    03.5
13E1:  BSF    55.3
13E2:  MOVF   55,W
13E3:  BSF    03.5
13E4:  MOVWF  07
13E5:  BCF    03.5
13E6:  BTFSS  07.3
13E7:  GOTO   3E6
13E8:  MOVLW  04
13E9:  MOVWF  77
13EA:  DECFSZ 77,F
13EB:  GOTO   3EA
13EC:  GOTO   3ED
13ED:  NOP
13EE:  BSF    55.4
13EF:  MOVF   55,W
13F0:  BSF    03.5
13F1:  MOVWF  07
13F2:  MOVLW  04
13F3:  MOVWF  77
13F4:  BCF    03.5
13F5:  DECFSZ 77,F
13F6:  GOTO   3F5
*
1543:  BCF    55.4
1544:  MOVF   55,W
1545:  BSF    03.5
1546:  MOVWF  07
1547:  NOP
1548:  BCF    03.5
1549:  BSF    55.3
154A:  MOVF   55,W
154B:  BSF    03.5
154C:  MOVWF  07
154D:  BCF    03.5
154E:  BTFSS  07.3
154F:  GOTO   54E
1550:  MOVLW  04
1551:  MOVWF  77
1552:  DECFSZ 77,F
1553:  GOTO   552
1554:  GOTO   555
1555:  NOP
1556:  BSF    55.4
1557:  MOVF   55,W
1558:  BSF    03.5
1559:  MOVWF  07
155A:  MOVLW  04
155B:  MOVWF  77
155C:  BCF    03.5
155D:  DECFSZ 77,F
155E:  GOTO   55D
....................  
.................... }  
....................  
.................... //convert binary to BCD value using double dabble algorithm 
.................... int8 bin2bcd(int8 bin_value)  
.................... {  
....................   int32 dabble; 
....................   int8 hyaku, juu, ichi; 
....................   int8 i; 
....................  
....................   dabble = bin_value & 0x000000FF; 
*
091E:  MOVF   5D,W
091F:  MOVWF  5E
0920:  CLRF   5F
0921:  CLRF   60
0922:  CLRF   61
....................   for(i = 0; i < 8; i++) 
0923:  CLRF   65
0924:  MOVF   65,W
0925:  SUBLW  07
0926:  BTFSS  03.0
0927:  GOTO   1B8
....................   { 
....................     hyaku = (int8)(dabble >> 16) & 0x0F; 
0928:  MOVF   60,W
0929:  MOVWF  77
092A:  MOVF   61,W
092B:  MOVWF  78
092C:  CLRF   79
092D:  CLRF   7A
092E:  MOVF   77,W
092F:  ANDLW  0F
0930:  MOVWF  62
....................     juu   = (int8)(dabble >> 12) & 0x0F; 
0931:  CLRF   7A
0932:  RRF    61,W
0933:  MOVWF  79
0934:  RRF    60,W
0935:  MOVWF  78
0936:  RRF    5F,W
0937:  MOVWF  77
0938:  RRF    79,F
0939:  RRF    78,F
093A:  RRF    77,F
093B:  RRF    79,F
093C:  RRF    78,F
093D:  RRF    77,F
093E:  RRF    79,F
093F:  RRF    78,F
0940:  RRF    77,F
0941:  MOVLW  0F
0942:  ANDWF  79,F
0943:  MOVF   77,W
0944:  ANDLW  0F
0945:  MOVWF  63
....................     ichi  = (int8)(dabble >> 8)  & 0x0F; 
0946:  MOVF   5F,W
0947:  MOVWF  77
0948:  MOVF   60,W
0949:  MOVWF  78
094A:  MOVF   61,W
094B:  MOVWF  79
094C:  CLRF   7A
094D:  MOVF   77,W
094E:  ANDLW  0F
094F:  MOVWF  64
....................     if(hyaku >= 5) hyaku += 3; 
0950:  MOVF   62,W
0951:  SUBLW  04
0952:  BTFSC  03.0
0953:  GOTO   156
0954:  MOVLW  03
0955:  ADDWF  62,F
....................     if(juu   >= 5) juu   += 3; 
0956:  MOVF   63,W
0957:  SUBLW  04
0958:  BTFSC  03.0
0959:  GOTO   15C
095A:  MOVLW  03
095B:  ADDWF  63,F
....................     if(ichi  >= 5) ichi  += 3; 
095C:  MOVF   64,W
095D:  SUBLW  04
095E:  BTFSC  03.0
095F:  GOTO   162
0960:  MOVLW  03
0961:  ADDWF  64,F
....................     dabble = ((int32)hyaku << 16) | ((int32)juu << 12) | ((int32)ichi << 8) | (dabble & 0x000000FF); 
0962:  CLRF   69
0963:  CLRF   68
0964:  CLRF   67
0965:  MOVF   62,W
0966:  MOVWF  66
0967:  MOVF   67,W
0968:  MOVWF  69
0969:  MOVF   66,W
096A:  MOVWF  68
096B:  CLRF   66
096C:  CLRF   67
096D:  CLRF   6E
096E:  CLRF   6D
096F:  CLRF   6C
0970:  MOVF   63,W
0971:  MOVWF  6B
0972:  CLRF   77
0973:  RLF    6B,W
0974:  MOVWF  78
0975:  RLF    6C,W
0976:  MOVWF  79
0977:  RLF    6D,W
0978:  MOVWF  7A
0979:  RLF    78,F
097A:  RLF    79,F
097B:  RLF    7A,F
097C:  RLF    78,F
097D:  RLF    79,F
097E:  RLF    7A,F
097F:  RLF    78,F
0980:  RLF    79,F
0981:  RLF    7A,F
0982:  MOVLW  F0
0983:  ANDWF  78,F
0984:  MOVF   77,W
0985:  IORWF  66,F
0986:  MOVF   78,W
0987:  IORWF  67,F
0988:  MOVF   79,W
0989:  IORWF  68,F
098A:  MOVF   7A,W
098B:  IORWF  69,F
098C:  CLRF   6E
098D:  CLRF   6D
098E:  CLRF   6C
098F:  MOVF   64,W
0990:  MOVWF  6B
0991:  MOVF   6D,W
0992:  MOVWF  7A
0993:  MOVF   6C,W
0994:  MOVWF  79
0995:  MOVF   6B,W
0996:  MOVWF  78
0997:  CLRF   77
0998:  MOVF   77,W
0999:  IORWF  66,F
099A:  MOVF   78,W
099B:  IORWF  67,F
099C:  MOVF   79,W
099D:  IORWF  68,F
099E:  MOVF   7A,W
099F:  IORWF  69,F
09A0:  MOVF   5E,W
09A1:  MOVWF  77
09A2:  CLRF   78
09A3:  CLRF   79
09A4:  CLRF   7A
09A5:  MOVF   77,W
09A6:  IORWF  66,W
09A7:  MOVWF  5E
09A8:  MOVF   78,W
09A9:  IORWF  67,W
09AA:  MOVWF  5F
09AB:  MOVF   79,W
09AC:  IORWF  68,W
09AD:  MOVWF  60
09AE:  MOVF   7A,W
09AF:  IORWF  69,W
09B0:  MOVWF  61
....................     dabble <<= 1; 
09B1:  BCF    03.0
09B2:  RLF    5E,F
09B3:  RLF    5F,F
09B4:  RLF    60,F
09B5:  RLF    61,F
09B6:  INCF   65,F
09B7:  GOTO   124
....................   } 
....................   juu   = (int8)(dabble >> 12) & 0x0F; 
09B8:  CLRF   7A
09B9:  RRF    61,W
09BA:  MOVWF  79
09BB:  RRF    60,W
09BC:  MOVWF  78
09BD:  RRF    5F,W
09BE:  MOVWF  77
09BF:  RRF    79,F
09C0:  RRF    78,F
09C1:  RRF    77,F
09C2:  RRF    79,F
09C3:  RRF    78,F
09C4:  RRF    77,F
09C5:  RRF    79,F
09C6:  RRF    78,F
09C7:  RRF    77,F
09C8:  MOVLW  0F
09C9:  ANDWF  79,F
09CA:  MOVF   77,W
09CB:  ANDLW  0F
09CC:  MOVWF  63
....................   ichi  = (int8)(dabble >> 8)  & 0x0F; 
09CD:  MOVF   5F,W
09CE:  MOVWF  77
09CF:  MOVF   60,W
09D0:  MOVWF  78
09D1:  MOVF   61,W
09D2:  MOVWF  79
09D3:  CLRF   7A
09D4:  MOVF   77,W
09D5:  ANDLW  0F
09D6:  MOVWF  64
....................   return((juu << 4) | (ichi & 0x0F));  
09D7:  SWAPF  63,W
09D8:  MOVWF  66
09D9:  MOVLW  F0
09DA:  ANDWF  66,F
09DB:  MOVF   64,W
09DC:  ANDLW  0F
09DD:  IORWF  66,W
09DE:  MOVWF  78
09DF:  RETURN
.................... }  
....................  
....................  
.................... // BCD range 00 - 99 
.................... int8 bcd2bin(int8 bcd_value)  
.................... {  
....................   int8 temp; 
....................   temp = bcd_value; 
*
0776:  MOVF   5B,W
0777:  MOVWF  5C
....................   temp &= 0xF0; //get high nibble which store tens value 
0778:  MOVLW  F0
0779:  ANDWF  5C,F
....................   return((temp >> 1) + (temp >> 3) + (bcd_value & 0x0F)); //(tens * 8) + (tens * 2) + ones 
077A:  BCF    03.0
077B:  RRF    5C,W
077C:  MOVWF  5D
077D:  RRF    5C,W
077E:  MOVWF  77
077F:  RRF    77,F
0780:  RRF    77,F
0781:  MOVLW  1F
0782:  ANDWF  77,F
0783:  MOVF   77,W
0784:  ADDWF  5D,F
0785:  MOVF   5B,W
0786:  ANDLW  0F
0787:  ADDWF  5D,W
0788:  MOVWF  78
0789:  RETURN
.................... }  
....................  
.................... #include "data.c" 
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... // 		Function for fetching the data to rgb_bits structure                 || 
.................... //                                                                           || 
.................... //   Last edited: 13 - April - 2014                                          || 
.................... //                                                                           || 
.................... //   void fetch_data() - depend on chosen mode, the board position and timing|| 
.................... //                       fetch appropriate data to rgb_bits structure        || 
.................... // 																		 || 
.................... //   There are four modes:                                                   || 
.................... //					- MODE_A: data for analog clock                          || 
.................... //					- MODE_B: data for digital clock                         || 
.................... //					- MODE_C: data for an image, FPT logo                    || 
.................... //					- MODE_D: data for running letters, pLED                 || 
.................... //																			 || 
.................... //===========================================================================|| 
....................  
.................... void fetch_data() 
.................... { 
.................... 	if(mode == MODE_A) // display analog clock 
*
0ABD:  MOVF   35,W
0ABE:  SUBLW  02
0ABF:  BTFSS  03.2
0AC0:  GOTO   30B
.................... 	{ 
.................... 		// the section_count vary from 1-60 and need to adjust to 0-59 value of minute and second 
.................... 		int8 pos = section_count; 
0AC1:  MOVF   2F,W
0AC2:  MOVWF  56
.................... 		if (section_count == 60)	pos = 0; 
0AC3:  MOVF   2F,W
0AC4:  SUBLW  3C
0AC5:  BTFSS  03.2
0AC6:  GOTO   2C8
0AC7:  CLRF   56
.................... 		// set default value for normal section 
.................... 		rgb_bits.blue =  0x0001; 
0AC8:  CLRF   50
0AC9:  MOVLW  01
0ACA:  MOVWF  4F
.................... 		rgb_bits.red =   0x0001; 
0ACB:  CLRF   52
0ACC:  MOVLW  01
0ACD:  MOVWF  51
.................... 		rgb_bits.green = 0x0001; 
0ACE:  CLRF   54
0ACF:  MOVLW  01
0AD0:  MOVWF  53
.................... 		// leds' value for hour mark on analog clock 
.................... 		if((section_count % 5) == 0) 
0AD1:  MOVF   2F,W
0AD2:  MOVWF  5A
0AD3:  MOVLW  05
0AD4:  MOVWF  5B
0AD5:  BCF    0A.3
0AD6:  CALL   78A
0AD7:  BSF    0A.3
0AD8:  MOVF   77,F
0AD9:  BTFSS  03.2
0ADA:  GOTO   2E4
.................... 		{ 
.................... 			rgb_bits.blue =  0x0003; 
0ADB:  CLRF   50
0ADC:  MOVLW  03
0ADD:  MOVWF  4F
.................... 			rgb_bits.red =   0x0003; 
0ADE:  CLRF   52
0ADF:  MOVLW  03
0AE0:  MOVWF  51
.................... 			rgb_bits.green = 0x0003; 
0AE1:  CLRF   54
0AE2:  MOVLW  03
0AE3:  MOVWF  53
.................... 		} 
.................... 		// leds' value at 3-6-9-12 hour 
.................... 		if((section_count % 15) == 0) 
0AE4:  MOVF   2F,W
0AE5:  MOVWF  5A
0AE6:  MOVLW  0F
0AE7:  MOVWF  5B
0AE8:  BCF    0A.3
0AE9:  CALL   78A
0AEA:  BSF    0A.3
0AEB:  MOVF   77,F
0AEC:  BTFSS  03.2
0AED:  GOTO   2F4
.................... 		{ 
.................... 			rgb_bits.blue =  0x007; 
0AEE:  CLRF   50
0AEF:  MOVLW  07
0AF0:  MOVWF  4F
.................... 			rgb_bits.red =   0x007; 
0AF1:  CLRF   52
0AF2:  MOVLW  07
0AF3:  MOVWF  51
.................... 		} 
.................... 		// hour hand's position 
.................... 		if(pos == anal_hour) 
0AF4:  MOVF   44,W
0AF5:  SUBWF  56,W
0AF6:  BTFSS  03.2
0AF7:  GOTO   2FB
.................... 		{ 
.................... 			rgb_bits.blue = 0xFC00; 
0AF8:  MOVLW  FC
0AF9:  MOVWF  50
0AFA:  CLRF   4F
.................... 		} 
.................... 		// minute hand's position 
.................... 		if(pos == min) 
0AFB:  MOVF   3C,W
0AFC:  SUBWF  56,W
0AFD:  BTFSS  03.2
0AFE:  GOTO   302
.................... 		{ 
.................... 			rgb_bits.red = 0xFF00; 
0AFF:  MOVLW  FF
0B00:  MOVWF  52
0B01:  CLRF   51
.................... 		} 
.................... 		//second hand's position 
.................... 		if(pos == sec) 
0B02:  MOVF   3D,W
0B03:  SUBWF  56,W
0B04:  BTFSS  03.2
0B05:  GOTO   30A
.................... 		{ 
.................... 			rgb_bits.green = 0xFFF1; 
0B06:  MOVLW  FF
0B07:  MOVWF  54
0B08:  MOVLW  F1
0B09:  MOVWF  53
.................... 		} 
.................... 	} 
0B0A:  GOTO   7F2
.................... 	else if(mode == MODE_C) // display an image - FPT logo 
0B0B:  MOVF   35,W
0B0C:  SUBLW  04
0B0D:  BTFSS  03.2
0B0E:  GOTO   444
.................... 	{ 
.................... 		//the image data, which store information for entire circle, is an array 
.................... 		if (smode == 1 && section_count == 16) 
0B0F:  DECFSZ 36,W
0B10:  GOTO   316
0B11:  MOVF   2F,W
0B12:  SUBLW  10
0B13:  BTFSS  03.2
0B14:  GOTO   316
.................... 		{ 
.................... 		  section_count--; 
0B15:  DECF   2F,F
.................... 		} 
.................... 		if (smode < 2) 
0B16:  MOVF   36,W
0B17:  SUBLW  01
0B18:  BTFSS  03.0
0B19:  GOTO   371
.................... 		{ 
.................... 			rgb_bits.blue = fpt[section_count * 3 - 3]; 
0B1A:  MOVF   2F,W
0B1B:  MOVWF  5A
0B1C:  MOVLW  03
0B1D:  MOVWF  5B
0B1E:  BCF    0A.3
0B1F:  CALL   79F
0B20:  BSF    0A.3
0B21:  MOVLW  03
0B22:  SUBWF  78,W
0B23:  CLRF   7A
0B24:  MOVWF  79
0B25:  BCF    03.0
0B26:  RLF    79,F
0B27:  RLF    7A,F
0B28:  MOVF   79,W
0B29:  MOVWF  5A
0B2A:  BCF    0A.3
0B2B:  CALL   0DC
0B2C:  BSF    0A.3
0B2D:  MOVWF  77
0B2E:  INCF   5A,W
0B2F:  BCF    0A.3
0B30:  CALL   0DC
0B31:  BSF    0A.3
0B32:  MOVWF  7A
0B33:  MOVF   77,W
0B34:  MOVWF  4F
0B35:  MOVF   7A,W
0B36:  MOVWF  50
.................... 			rgb_bits.red = fpt[section_count * 3 - 2]; 
0B37:  MOVF   2F,W
0B38:  MOVWF  5A
0B39:  MOVLW  03
0B3A:  MOVWF  5B
0B3B:  BCF    0A.3
0B3C:  CALL   79F
0B3D:  BSF    0A.3
0B3E:  MOVLW  02
0B3F:  SUBWF  78,W
0B40:  CLRF   7A
0B41:  MOVWF  79
0B42:  BCF    03.0
0B43:  RLF    79,F
0B44:  RLF    7A,F
0B45:  MOVF   79,W
0B46:  MOVWF  5A
0B47:  BCF    0A.3
0B48:  CALL   0DC
0B49:  BSF    0A.3
0B4A:  MOVWF  77
0B4B:  INCF   5A,W
0B4C:  BCF    0A.3
0B4D:  CALL   0DC
0B4E:  BSF    0A.3
0B4F:  MOVWF  7A
0B50:  MOVF   77,W
0B51:  MOVWF  51
0B52:  MOVF   7A,W
0B53:  MOVWF  52
.................... 			rgb_bits.green = fpt[section_count * 3 - 1]; 
0B54:  MOVF   2F,W
0B55:  MOVWF  5A
0B56:  MOVLW  03
0B57:  MOVWF  5B
0B58:  BCF    0A.3
0B59:  CALL   79F
0B5A:  BSF    0A.3
0B5B:  MOVLW  01
0B5C:  SUBWF  78,W
0B5D:  CLRF   7A
0B5E:  MOVWF  79
0B5F:  BCF    03.0
0B60:  RLF    79,F
0B61:  RLF    7A,F
0B62:  MOVF   79,W
0B63:  MOVWF  5A
0B64:  BCF    0A.3
0B65:  CALL   0DC
0B66:  BSF    0A.3
0B67:  MOVWF  77
0B68:  INCF   5A,W
0B69:  BCF    0A.3
0B6A:  CALL   0DC
0B6B:  BSF    0A.3
0B6C:  MOVWF  7A
0B6D:  MOVF   77,W
0B6E:  MOVWF  53
0B6F:  MOVF   7A,W
0B70:  MOVWF  54
.................... 		} 
....................  
.................... 		if (smode > 1) 
0B71:  MOVF   36,W
0B72:  SUBLW  01
0B73:  BTFSC  03.0
0B74:  GOTO   443
.................... 		{ 
.................... 			if (section_count == 3) section_count--; 
0B75:  MOVF   2F,W
0B76:  SUBLW  03
0B77:  BTFSS  03.2
0B78:  GOTO   37A
0B79:  DECF   2F,F
.................... 			if(pled_count < 360) 
0B7A:  MOVF   4C,W
0B7B:  SUBLW  01
0B7C:  BTFSS  03.0
0B7D:  GOTO   3DC
0B7E:  BTFSS  03.2
0B7F:  GOTO   384
0B80:  MOVF   4B,W
0B81:  SUBLW  67
0B82:  BTFSS  03.0
0B83:  GOTO   3DC
.................... 			{ 
.................... 				rgb_bits.blue = flappy1[section_count * 3 - 3]; 
0B84:  MOVF   2F,W
0B85:  MOVWF  5A
0B86:  MOVLW  03
0B87:  MOVWF  5B
0B88:  BCF    0A.3
0B89:  CALL   79F
0B8A:  BSF    0A.3
0B8B:  MOVLW  03
0B8C:  SUBWF  78,W
0B8D:  CLRF   7A
0B8E:  MOVWF  79
0B8F:  BCF    03.0
0B90:  RLF    79,F
0B91:  RLF    7A,F
0B92:  MOVF   79,W
0B93:  MOVWF  5A
0B94:  BCF    0A.3
0B95:  CALL   291
0B96:  BSF    0A.3
0B97:  MOVWF  77
0B98:  INCF   5A,W
0B99:  BCF    0A.3
0B9A:  CALL   291
0B9B:  BSF    0A.3
0B9C:  MOVWF  7A
0B9D:  MOVF   77,W
0B9E:  MOVWF  4F
0B9F:  MOVF   7A,W
0BA0:  MOVWF  50
.................... 				rgb_bits.red = flappy1[section_count * 3 - 2]; 
0BA1:  MOVF   2F,W
0BA2:  MOVWF  5A
0BA3:  MOVLW  03
0BA4:  MOVWF  5B
0BA5:  BCF    0A.3
0BA6:  CALL   79F
0BA7:  BSF    0A.3
0BA8:  MOVLW  02
0BA9:  SUBWF  78,W
0BAA:  CLRF   7A
0BAB:  MOVWF  79
0BAC:  BCF    03.0
0BAD:  RLF    79,F
0BAE:  RLF    7A,F
0BAF:  MOVF   79,W
0BB0:  MOVWF  5A
0BB1:  BCF    0A.3
0BB2:  CALL   291
0BB3:  BSF    0A.3
0BB4:  MOVWF  77
0BB5:  INCF   5A,W
0BB6:  BCF    0A.3
0BB7:  CALL   291
0BB8:  BSF    0A.3
0BB9:  MOVWF  7A
0BBA:  MOVF   77,W
0BBB:  MOVWF  51
0BBC:  MOVF   7A,W
0BBD:  MOVWF  52
.................... 				rgb_bits.green = flappy1[section_count * 3 - 1]; 
0BBE:  MOVF   2F,W
0BBF:  MOVWF  5A
0BC0:  MOVLW  03
0BC1:  MOVWF  5B
0BC2:  BCF    0A.3
0BC3:  CALL   79F
0BC4:  BSF    0A.3
0BC5:  MOVLW  01
0BC6:  SUBWF  78,W
0BC7:  CLRF   7A
0BC8:  MOVWF  79
0BC9:  BCF    03.0
0BCA:  RLF    79,F
0BCB:  RLF    7A,F
0BCC:  MOVF   79,W
0BCD:  MOVWF  5A
0BCE:  BCF    0A.3
0BCF:  CALL   291
0BD0:  BSF    0A.3
0BD1:  MOVWF  77
0BD2:  INCF   5A,W
0BD3:  BCF    0A.3
0BD4:  CALL   291
0BD5:  BSF    0A.3
0BD6:  MOVWF  7A
0BD7:  MOVF   77,W
0BD8:  MOVWF  53
0BD9:  MOVF   7A,W
0BDA:  MOVWF  54
.................... 			} 
0BDB:  GOTO   433
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.blue = flappy2[section_count * 3 - 3]; 
0BDC:  MOVF   2F,W
0BDD:  MOVWF  5A
0BDE:  MOVLW  03
0BDF:  MOVWF  5B
0BE0:  BCF    0A.3
0BE1:  CALL   79F
0BE2:  BSF    0A.3
0BE3:  MOVLW  03
0BE4:  SUBWF  78,W
0BE5:  CLRF   7A
0BE6:  MOVWF  79
0BE7:  BCF    03.0
0BE8:  RLF    79,F
0BE9:  RLF    7A,F
0BEA:  MOVF   79,W
0BEB:  MOVWF  5A
0BEC:  BCF    0A.3
0BED:  CALL   402
0BEE:  BSF    0A.3
0BEF:  MOVWF  77
0BF0:  INCF   5A,W
0BF1:  BCF    0A.3
0BF2:  CALL   402
0BF3:  BSF    0A.3
0BF4:  MOVWF  7A
0BF5:  MOVF   77,W
0BF6:  MOVWF  4F
0BF7:  MOVF   7A,W
0BF8:  MOVWF  50
.................... 				rgb_bits.red = flappy2[section_count * 3 - 2]; 
0BF9:  MOVF   2F,W
0BFA:  MOVWF  5A
0BFB:  MOVLW  03
0BFC:  MOVWF  5B
0BFD:  BCF    0A.3
0BFE:  CALL   79F
0BFF:  BSF    0A.3
0C00:  MOVLW  02
0C01:  SUBWF  78,W
0C02:  CLRF   7A
0C03:  MOVWF  79
0C04:  BCF    03.0
0C05:  RLF    79,F
0C06:  RLF    7A,F
0C07:  MOVF   79,W
0C08:  MOVWF  5A
0C09:  BCF    0A.3
0C0A:  CALL   402
0C0B:  BSF    0A.3
0C0C:  MOVWF  77
0C0D:  INCF   5A,W
0C0E:  BCF    0A.3
0C0F:  CALL   402
0C10:  BSF    0A.3
0C11:  MOVWF  7A
0C12:  MOVF   77,W
0C13:  MOVWF  51
0C14:  MOVF   7A,W
0C15:  MOVWF  52
.................... 				rgb_bits.green = flappy2[section_count * 3 - 1]; 
0C16:  MOVF   2F,W
0C17:  MOVWF  5A
0C18:  MOVLW  03
0C19:  MOVWF  5B
0C1A:  BCF    0A.3
0C1B:  CALL   79F
0C1C:  BSF    0A.3
0C1D:  MOVLW  01
0C1E:  SUBWF  78,W
0C1F:  CLRF   7A
0C20:  MOVWF  79
0C21:  BCF    03.0
0C22:  RLF    79,F
0C23:  RLF    7A,F
0C24:  MOVF   79,W
0C25:  MOVWF  5A
0C26:  BCF    0A.3
0C27:  CALL   402
0C28:  BSF    0A.3
0C29:  MOVWF  77
0C2A:  INCF   5A,W
0C2B:  BCF    0A.3
0C2C:  CALL   402
0C2D:  BSF    0A.3
0C2E:  MOVWF  7A
0C2F:  MOVF   77,W
0C30:  MOVWF  53
0C31:  MOVF   7A,W
0C32:  MOVWF  54
.................... 			} 
.................... 			pled_count++; 
0C33:  INCF   4B,F
0C34:  BTFSC  03.2
0C35:  INCF   4C,F
.................... 			if (pled_count > 720) pled_count = 0; 
0C36:  MOVF   4C,W
0C37:  SUBLW  01
0C38:  BTFSC  03.0
0C39:  GOTO   443
0C3A:  XORLW  FF
0C3B:  BTFSS  03.2
0C3C:  GOTO   441
0C3D:  MOVF   4B,W
0C3E:  SUBLW  D0
0C3F:  BTFSC  03.0
0C40:  GOTO   443
0C41:  CLRF   4C
0C42:  CLRF   4B
.................... 		} 
.................... 	} 
0C43:  GOTO   7F2
.................... 	else if(mode == MODE_B) // display digital clock with format hour-minute, day-month 
0C44:  MOVF   35,W
0C45:  SUBLW  03
0C46:  BTFSS  03.2
0C47:  GOTO   6E3
.................... 	{ 
.................... 		rgb_bits.red = 0x8000; 
0C48:  MOVLW  80
0C49:  MOVWF  52
0C4A:  CLRF   51
.................... 		switch (section_count) 
0C4B:  MOVF   2F,W
0C4C:  XORLW  34
0C4D:  BTFSC  03.2
0C4E:  GOTO   4A1
0C4F:  XORLW  01
0C50:  BTFSC  03.2
0C51:  GOTO   4B7
0C52:  XORLW  03
0C53:  BTFSC  03.2
0C54:  GOTO   4CE
0C55:  XORLW  0E
0C56:  BTFSC  03.2
0C57:  GOTO   4E5
0C58:  XORLW  01
0C59:  BTFSC  03.2
0C5A:  GOTO   4FB
0C5B:  XORLW  03
0C5C:  BTFSC  03.2
0C5D:  GOTO   512
0C5E:  XORLW  38
0C5F:  BTFSC  03.2
0C60:  GOTO   529
0C61:  XORLW  01
0C62:  BTFSC  03.2
0C63:  GOTO   53F
0C64:  XORLW  07
0C65:  BTFSC  03.2
0C66:  GOTO   556
0C67:  XORLW  02
0C68:  BTFSC  03.2
0C69:  GOTO   56D
0C6A:  XORLW  01
0C6B:  BTFSC  03.2
0C6C:  GOTO   583
0C6D:  XORLW  0F
0C6E:  BTFSC  03.2
0C6F:  GOTO   59A
0C70:  XORLW  34
0C71:  BTFSC  03.2
0C72:  GOTO   5B1
0C73:  XORLW  1B
0C74:  BTFSC  03.2
0C75:  GOTO   5C1
0C76:  XORLW  01
0C77:  BTFSC  03.2
0C78:  GOTO   5D8
0C79:  XORLW  03
0C7A:  BTFSC  03.2
0C7B:  GOTO   5EF
0C7C:  XORLW  06
0C7D:  BTFSC  03.2
0C7E:  GOTO   605
0C7F:  XORLW  01
0C80:  BTFSC  03.2
0C81:  GOTO   61C
0C82:  XORLW  03
0C83:  BTFSC  03.2
0C84:  GOTO   633
0C85:  XORLW  3A
0C86:  BTFSC  03.2
0C87:  GOTO   649
0C88:  XORLW  01
0C89:  BTFSC  03.2
0C8A:  GOTO   660
0C8B:  XORLW  03
0C8C:  BTFSC  03.2
0C8D:  GOTO   677
0C8E:  XORLW  0E
0C8F:  BTFSC  03.2
0C90:  GOTO   68D
0C91:  XORLW  01
0C92:  BTFSC  03.2
0C93:  GOTO   6A4
0C94:  XORLW  03
0C95:  BTFSC  03.2
0C96:  GOTO   6BB
0C97:  XORLW  08
0C98:  BTFSC  03.2
0C99:  GOTO   6D1
0C9A:  XORLW  03
0C9B:  BTFSC  03.2
0C9C:  GOTO   6D5
0C9D:  XORLW  01
0C9E:  BTFSC  03.2
0C9F:  GOTO   6D9
0CA0:  GOTO   6DD
.................... 		{ 
.................... 			//section 52-54: display the ten of hour 
.................... 			case 52: 
.................... 				rgb_bits.green = number_upper[hour_h][0]; 
0CA1:  MOVF   40,W
0CA2:  MOVWF  5A
0CA3:  MOVLW  06
0CA4:  MOVWF  5B
0CA5:  BCF    0A.3
0CA6:  CALL   79F
0CA7:  BSF    0A.3
0CA8:  MOVF   78,W
0CA9:  MOVWF  5A
0CAA:  INCF   5A,W
0CAB:  BCF    0A.3
0CAC:  CALL   05C
0CAD:  BSF    0A.3
0CAE:  MOVWF  7A
0CAF:  MOVF   5A,W
0CB0:  BCF    0A.3
0CB1:  CALL   05C
0CB2:  BSF    0A.3
0CB3:  MOVWF  53
0CB4:  MOVF   7A,W
0CB5:  MOVWF  54
.................... 				break; 
0CB6:  GOTO   6E2
.................... 			case 53: 
.................... 				rgb_bits.green = number_upper[hour_h][1]; 
0CB7:  MOVF   40,W
0CB8:  MOVWF  5A
0CB9:  MOVLW  06
0CBA:  MOVWF  5B
0CBB:  BCF    0A.3
0CBC:  CALL   79F
0CBD:  BSF    0A.3
0CBE:  MOVLW  02
0CBF:  ADDWF  78,W
0CC0:  MOVWF  5A
0CC1:  INCF   5A,W
0CC2:  BCF    0A.3
0CC3:  CALL   05C
0CC4:  BSF    0A.3
0CC5:  MOVWF  7A
0CC6:  MOVF   5A,W
0CC7:  BCF    0A.3
0CC8:  CALL   05C
0CC9:  BSF    0A.3
0CCA:  MOVWF  53
0CCB:  MOVF   7A,W
0CCC:  MOVWF  54
.................... 				break; 
0CCD:  GOTO   6E2
.................... 			case 54: 
.................... 				rgb_bits.green = number_upper[hour_h][2]; 
0CCE:  MOVF   40,W
0CCF:  MOVWF  5A
0CD0:  MOVLW  06
0CD1:  MOVWF  5B
0CD2:  BCF    0A.3
0CD3:  CALL   79F
0CD4:  BSF    0A.3
0CD5:  MOVLW  04
0CD6:  ADDWF  78,W
0CD7:  MOVWF  5A
0CD8:  INCF   5A,W
0CD9:  BCF    0A.3
0CDA:  CALL   05C
0CDB:  BSF    0A.3
0CDC:  MOVWF  7A
0CDD:  MOVF   5A,W
0CDE:  BCF    0A.3
0CDF:  CALL   05C
0CE0:  BSF    0A.3
0CE1:  MOVWF  53
0CE2:  MOVF   7A,W
0CE3:  MOVWF  54
.................... 				break; 
0CE4:  GOTO   6E2
.................... 			//section 56-58: display the unit of hour 
.................... 			case 56: 
.................... 				rgb_bits.green = number_upper[hour_l][0]; 
0CE5:  MOVF   41,W
0CE6:  MOVWF  5A
0CE7:  MOVLW  06
0CE8:  MOVWF  5B
0CE9:  BCF    0A.3
0CEA:  CALL   79F
0CEB:  BSF    0A.3
0CEC:  MOVF   78,W
0CED:  MOVWF  5A
0CEE:  INCF   5A,W
0CEF:  BCF    0A.3
0CF0:  CALL   05C
0CF1:  BSF    0A.3
0CF2:  MOVWF  7A
0CF3:  MOVF   5A,W
0CF4:  BCF    0A.3
0CF5:  CALL   05C
0CF6:  BSF    0A.3
0CF7:  MOVWF  53
0CF8:  MOVF   7A,W
0CF9:  MOVWF  54
.................... 				break; 
0CFA:  GOTO   6E2
.................... 			case 57: 
.................... 				rgb_bits.green = number_upper[hour_l][1]; 
0CFB:  MOVF   41,W
0CFC:  MOVWF  5A
0CFD:  MOVLW  06
0CFE:  MOVWF  5B
0CFF:  BCF    0A.3
0D00:  CALL   79F
0D01:  BSF    0A.3
0D02:  MOVLW  02
0D03:  ADDWF  78,W
0D04:  MOVWF  5A
0D05:  INCF   5A,W
0D06:  BCF    0A.3
0D07:  CALL   05C
0D08:  BSF    0A.3
0D09:  MOVWF  7A
0D0A:  MOVF   5A,W
0D0B:  BCF    0A.3
0D0C:  CALL   05C
0D0D:  BSF    0A.3
0D0E:  MOVWF  53
0D0F:  MOVF   7A,W
0D10:  MOVWF  54
.................... 				break; 
0D11:  GOTO   6E2
.................... 			case 58: 
.................... 				rgb_bits.green = number_upper[hour_l][2]; 
0D12:  MOVF   41,W
0D13:  MOVWF  5A
0D14:  MOVLW  06
0D15:  MOVWF  5B
0D16:  BCF    0A.3
0D17:  CALL   79F
0D18:  BSF    0A.3
0D19:  MOVLW  04
0D1A:  ADDWF  78,W
0D1B:  MOVWF  5A
0D1C:  INCF   5A,W
0D1D:  BCF    0A.3
0D1E:  CALL   05C
0D1F:  BSF    0A.3
0D20:  MOVWF  7A
0D21:  MOVF   5A,W
0D22:  BCF    0A.3
0D23:  CALL   05C
0D24:  BSF    0A.3
0D25:  MOVWF  53
0D26:  MOVF   7A,W
0D27:  MOVWF  54
.................... 				break; 
0D28:  GOTO   6E2
.................... 			//section 2-4: display the ten of minute 
.................... 			case 2: 
.................... 				rgb_bits.green = number_upper[min_h][0]; 
0D29:  MOVF   42,W
0D2A:  MOVWF  5A
0D2B:  MOVLW  06
0D2C:  MOVWF  5B
0D2D:  BCF    0A.3
0D2E:  CALL   79F
0D2F:  BSF    0A.3
0D30:  MOVF   78,W
0D31:  MOVWF  5A
0D32:  INCF   5A,W
0D33:  BCF    0A.3
0D34:  CALL   05C
0D35:  BSF    0A.3
0D36:  MOVWF  7A
0D37:  MOVF   5A,W
0D38:  BCF    0A.3
0D39:  CALL   05C
0D3A:  BSF    0A.3
0D3B:  MOVWF  53
0D3C:  MOVF   7A,W
0D3D:  MOVWF  54
.................... 				break; 
0D3E:  GOTO   6E2
.................... 			case 3: 
.................... 				rgb_bits.green = number_upper[min_h][1]; 
0D3F:  MOVF   42,W
0D40:  MOVWF  5A
0D41:  MOVLW  06
0D42:  MOVWF  5B
0D43:  BCF    0A.3
0D44:  CALL   79F
0D45:  BSF    0A.3
0D46:  MOVLW  02
0D47:  ADDWF  78,W
0D48:  MOVWF  5A
0D49:  INCF   5A,W
0D4A:  BCF    0A.3
0D4B:  CALL   05C
0D4C:  BSF    0A.3
0D4D:  MOVWF  7A
0D4E:  MOVF   5A,W
0D4F:  BCF    0A.3
0D50:  CALL   05C
0D51:  BSF    0A.3
0D52:  MOVWF  53
0D53:  MOVF   7A,W
0D54:  MOVWF  54
.................... 				break; 
0D55:  GOTO   6E2
.................... 			case 4: 
.................... 				rgb_bits.green = number_upper[min_h][2]; 
0D56:  MOVF   42,W
0D57:  MOVWF  5A
0D58:  MOVLW  06
0D59:  MOVWF  5B
0D5A:  BCF    0A.3
0D5B:  CALL   79F
0D5C:  BSF    0A.3
0D5D:  MOVLW  04
0D5E:  ADDWF  78,W
0D5F:  MOVWF  5A
0D60:  INCF   5A,W
0D61:  BCF    0A.3
0D62:  CALL   05C
0D63:  BSF    0A.3
0D64:  MOVWF  7A
0D65:  MOVF   5A,W
0D66:  BCF    0A.3
0D67:  CALL   05C
0D68:  BSF    0A.3
0D69:  MOVWF  53
0D6A:  MOVF   7A,W
0D6B:  MOVWF  54
.................... 				break; 
0D6C:  GOTO   6E2
.................... 			//section 6-8: display the unit of minute 
.................... 			case 6: 
.................... 				rgb_bits.green = number_upper[min_l][0]; 
0D6D:  MOVF   43,W
0D6E:  MOVWF  5A
0D6F:  MOVLW  06
0D70:  MOVWF  5B
0D71:  BCF    0A.3
0D72:  CALL   79F
0D73:  BSF    0A.3
0D74:  MOVF   78,W
0D75:  MOVWF  5A
0D76:  INCF   5A,W
0D77:  BCF    0A.3
0D78:  CALL   05C
0D79:  BSF    0A.3
0D7A:  MOVWF  7A
0D7B:  MOVF   5A,W
0D7C:  BCF    0A.3
0D7D:  CALL   05C
0D7E:  BSF    0A.3
0D7F:  MOVWF  53
0D80:  MOVF   7A,W
0D81:  MOVWF  54
.................... 				break; 
0D82:  GOTO   6E2
.................... 			case 7: 
.................... 				rgb_bits.green = number_upper[min_l][1]; 
0D83:  MOVF   43,W
0D84:  MOVWF  5A
0D85:  MOVLW  06
0D86:  MOVWF  5B
0D87:  BCF    0A.3
0D88:  CALL   79F
0D89:  BSF    0A.3
0D8A:  MOVLW  02
0D8B:  ADDWF  78,W
0D8C:  MOVWF  5A
0D8D:  INCF   5A,W
0D8E:  BCF    0A.3
0D8F:  CALL   05C
0D90:  BSF    0A.3
0D91:  MOVWF  7A
0D92:  MOVF   5A,W
0D93:  BCF    0A.3
0D94:  CALL   05C
0D95:  BSF    0A.3
0D96:  MOVWF  53
0D97:  MOVF   7A,W
0D98:  MOVWF  54
.................... 				break; 
0D99:  GOTO   6E2
.................... 			case 8: 
.................... 				rgb_bits.green = number_upper[min_l][2]; 
0D9A:  MOVF   43,W
0D9B:  MOVWF  5A
0D9C:  MOVLW  06
0D9D:  MOVWF  5B
0D9E:  BCF    0A.3
0D9F:  CALL   79F
0DA0:  BSF    0A.3
0DA1:  MOVLW  04
0DA2:  ADDWF  78,W
0DA3:  MOVWF  5A
0DA4:  INCF   5A,W
0DA5:  BCF    0A.3
0DA6:  CALL   05C
0DA7:  BSF    0A.3
0DA8:  MOVWF  7A
0DA9:  MOVF   5A,W
0DAA:  BCF    0A.3
0DAB:  CALL   05C
0DAC:  BSF    0A.3
0DAD:  MOVWF  53
0DAE:  MOVF   7A,W
0DAF:  MOVWF  54
.................... 				break; 
0DB0:  GOTO   6E2
.................... 			////section 60: display the second mark, 0.5s on and 0.5s off 
.................... 			case 60: 
.................... 				if(digit_sec < 15) 
0DB1:  MOVF   3F,W
0DB2:  SUBLW  0E
0DB3:  BTFSS  03.0
0DB4:  GOTO   5B9
.................... 					rgb_bits.green = 0x00A0; 
0DB5:  CLRF   54
0DB6:  MOVLW  A0
0DB7:  MOVWF  53
0DB8:  GOTO   5BB
.................... 				else 
.................... 					rgb_bits.green = 0x0000; 
0DB9:  CLRF   54
0DBA:  CLRF   53
.................... 				if(digit_sec > 30) 
0DBB:  MOVF   3F,W
0DBC:  SUBLW  1E
0DBD:  BTFSC  03.0
0DBE:  GOTO   5C0
.................... 					digit_sec = 0; 
0DBF:  CLRF   3F
.................... 				break; 
0DC0:  GOTO   6E2
.................... 			//section 37-39: display the ten of day 
.................... 			case 39: 
.................... 				rgb_bits.blue = number_lower[day_h][2]; 
0DC1:  MOVF   45,W
0DC2:  MOVWF  5A
0DC3:  MOVLW  06
0DC4:  MOVWF  5B
0DC5:  BCF    0A.3
0DC6:  CALL   79F
0DC7:  BSF    0A.3
0DC8:  MOVLW  04
0DC9:  ADDWF  78,W
0DCA:  MOVWF  5A
0DCB:  INCF   5A,W
0DCC:  BCF    0A.3
0DCD:  CALL   09C
0DCE:  BSF    0A.3
0DCF:  MOVWF  7A
0DD0:  MOVF   5A,W
0DD1:  BCF    0A.3
0DD2:  CALL   09C
0DD3:  BSF    0A.3
0DD4:  MOVWF  4F
0DD5:  MOVF   7A,W
0DD6:  MOVWF  50
.................... 				break; 
0DD7:  GOTO   6E2
.................... 			case 38: 
.................... 				rgb_bits.blue = number_lower[day_h][1]; 
0DD8:  MOVF   45,W
0DD9:  MOVWF  5A
0DDA:  MOVLW  06
0DDB:  MOVWF  5B
0DDC:  BCF    0A.3
0DDD:  CALL   79F
0DDE:  BSF    0A.3
0DDF:  MOVLW  02
0DE0:  ADDWF  78,W
0DE1:  MOVWF  5A
0DE2:  INCF   5A,W
0DE3:  BCF    0A.3
0DE4:  CALL   09C
0DE5:  BSF    0A.3
0DE6:  MOVWF  7A
0DE7:  MOVF   5A,W
0DE8:  BCF    0A.3
0DE9:  CALL   09C
0DEA:  BSF    0A.3
0DEB:  MOVWF  4F
0DEC:  MOVF   7A,W
0DED:  MOVWF  50
.................... 				break; 
0DEE:  GOTO   6E2
.................... 			case 37: 
.................... 				rgb_bits.blue = number_lower[day_h][0]; 
0DEF:  MOVF   45,W
0DF0:  MOVWF  5A
0DF1:  MOVLW  06
0DF2:  MOVWF  5B
0DF3:  BCF    0A.3
0DF4:  CALL   79F
0DF5:  BSF    0A.3
0DF6:  MOVF   78,W
0DF7:  MOVWF  5A
0DF8:  INCF   5A,W
0DF9:  BCF    0A.3
0DFA:  CALL   09C
0DFB:  BSF    0A.3
0DFC:  MOVWF  7A
0DFD:  MOVF   5A,W
0DFE:  BCF    0A.3
0DFF:  CALL   09C
0E00:  BSF    0A.3
0E01:  MOVWF  4F
0E02:  MOVF   7A,W
0E03:  MOVWF  50
.................... 				break; 
0E04:  GOTO   6E2
.................... 			//section 33-35: display the unit of day 
.................... 			case 35: 
.................... 				rgb_bits.blue = number_lower[day_l][2]; 
0E05:  MOVF   46,W
0E06:  MOVWF  5A
0E07:  MOVLW  06
0E08:  MOVWF  5B
0E09:  BCF    0A.3
0E0A:  CALL   79F
0E0B:  BSF    0A.3
0E0C:  MOVLW  04
0E0D:  ADDWF  78,W
0E0E:  MOVWF  5A
0E0F:  INCF   5A,W
0E10:  BCF    0A.3
0E11:  CALL   09C
0E12:  BSF    0A.3
0E13:  MOVWF  7A
0E14:  MOVF   5A,W
0E15:  BCF    0A.3
0E16:  CALL   09C
0E17:  BSF    0A.3
0E18:  MOVWF  4F
0E19:  MOVF   7A,W
0E1A:  MOVWF  50
.................... 				break; 
0E1B:  GOTO   6E2
.................... 			case 34: 
.................... 				rgb_bits.blue = number_lower[day_l][1]; 
0E1C:  MOVF   46,W
0E1D:  MOVWF  5A
0E1E:  MOVLW  06
0E1F:  MOVWF  5B
0E20:  BCF    0A.3
0E21:  CALL   79F
0E22:  BSF    0A.3
0E23:  MOVLW  02
0E24:  ADDWF  78,W
0E25:  MOVWF  5A
0E26:  INCF   5A,W
0E27:  BCF    0A.3
0E28:  CALL   09C
0E29:  BSF    0A.3
0E2A:  MOVWF  7A
0E2B:  MOVF   5A,W
0E2C:  BCF    0A.3
0E2D:  CALL   09C
0E2E:  BSF    0A.3
0E2F:  MOVWF  4F
0E30:  MOVF   7A,W
0E31:  MOVWF  50
.................... 				break; 
0E32:  GOTO   6E2
.................... 			case 33: 
.................... 				rgb_bits.blue = number_lower[day_l][0]; 
0E33:  MOVF   46,W
0E34:  MOVWF  5A
0E35:  MOVLW  06
0E36:  MOVWF  5B
0E37:  BCF    0A.3
0E38:  CALL   79F
0E39:  BSF    0A.3
0E3A:  MOVF   78,W
0E3B:  MOVWF  5A
0E3C:  INCF   5A,W
0E3D:  BCF    0A.3
0E3E:  CALL   09C
0E3F:  BSF    0A.3
0E40:  MOVWF  7A
0E41:  MOVF   5A,W
0E42:  BCF    0A.3
0E43:  CALL   09C
0E44:  BSF    0A.3
0E45:  MOVWF  4F
0E46:  MOVF   7A,W
0E47:  MOVWF  50
.................... 				break; 
0E48:  GOTO   6E2
.................... 			//section 25-27: display the ten of month 
.................... 			case 27: 
.................... 				rgb_bits.blue = number_lower[month_h][2]; 
0E49:  MOVF   47,W
0E4A:  MOVWF  5A
0E4B:  MOVLW  06
0E4C:  MOVWF  5B
0E4D:  BCF    0A.3
0E4E:  CALL   79F
0E4F:  BSF    0A.3
0E50:  MOVLW  04
0E51:  ADDWF  78,W
0E52:  MOVWF  5A
0E53:  INCF   5A,W
0E54:  BCF    0A.3
0E55:  CALL   09C
0E56:  BSF    0A.3
0E57:  MOVWF  7A
0E58:  MOVF   5A,W
0E59:  BCF    0A.3
0E5A:  CALL   09C
0E5B:  BSF    0A.3
0E5C:  MOVWF  4F
0E5D:  MOVF   7A,W
0E5E:  MOVWF  50
.................... 				break; 
0E5F:  GOTO   6E2
.................... 			case 26: 
.................... 				rgb_bits.blue = number_lower[month_h][1]; 
0E60:  MOVF   47,W
0E61:  MOVWF  5A
0E62:  MOVLW  06
0E63:  MOVWF  5B
0E64:  BCF    0A.3
0E65:  CALL   79F
0E66:  BSF    0A.3
0E67:  MOVLW  02
0E68:  ADDWF  78,W
0E69:  MOVWF  5A
0E6A:  INCF   5A,W
0E6B:  BCF    0A.3
0E6C:  CALL   09C
0E6D:  BSF    0A.3
0E6E:  MOVWF  7A
0E6F:  MOVF   5A,W
0E70:  BCF    0A.3
0E71:  CALL   09C
0E72:  BSF    0A.3
0E73:  MOVWF  4F
0E74:  MOVF   7A,W
0E75:  MOVWF  50
.................... 				break; 
0E76:  GOTO   6E2
.................... 			case 25: 
.................... 				rgb_bits.blue = number_lower[month_h][0]; 
0E77:  MOVF   47,W
0E78:  MOVWF  5A
0E79:  MOVLW  06
0E7A:  MOVWF  5B
0E7B:  BCF    0A.3
0E7C:  CALL   79F
0E7D:  BSF    0A.3
0E7E:  MOVF   78,W
0E7F:  MOVWF  5A
0E80:  INCF   5A,W
0E81:  BCF    0A.3
0E82:  CALL   09C
0E83:  BSF    0A.3
0E84:  MOVWF  7A
0E85:  MOVF   5A,W
0E86:  BCF    0A.3
0E87:  CALL   09C
0E88:  BSF    0A.3
0E89:  MOVWF  4F
0E8A:  MOVF   7A,W
0E8B:  MOVWF  50
.................... 				break; 
0E8C:  GOTO   6E2
.................... 			//section 21-23: display the unit of month 
.................... 			case 23: 
.................... 				rgb_bits.blue = number_lower[month_l][2]; 
0E8D:  MOVF   48,W
0E8E:  MOVWF  5A
0E8F:  MOVLW  06
0E90:  MOVWF  5B
0E91:  BCF    0A.3
0E92:  CALL   79F
0E93:  BSF    0A.3
0E94:  MOVLW  04
0E95:  ADDWF  78,W
0E96:  MOVWF  5A
0E97:  INCF   5A,W
0E98:  BCF    0A.3
0E99:  CALL   09C
0E9A:  BSF    0A.3
0E9B:  MOVWF  7A
0E9C:  MOVF   5A,W
0E9D:  BCF    0A.3
0E9E:  CALL   09C
0E9F:  BSF    0A.3
0EA0:  MOVWF  4F
0EA1:  MOVF   7A,W
0EA2:  MOVWF  50
.................... 				break; 
0EA3:  GOTO   6E2
.................... 			case 22: 
.................... 				rgb_bits.blue = number_lower[month_l][1]; 
0EA4:  MOVF   48,W
0EA5:  MOVWF  5A
0EA6:  MOVLW  06
0EA7:  MOVWF  5B
0EA8:  BCF    0A.3
0EA9:  CALL   79F
0EAA:  BSF    0A.3
0EAB:  MOVLW  02
0EAC:  ADDWF  78,W
0EAD:  MOVWF  5A
0EAE:  INCF   5A,W
0EAF:  BCF    0A.3
0EB0:  CALL   09C
0EB1:  BSF    0A.3
0EB2:  MOVWF  7A
0EB3:  MOVF   5A,W
0EB4:  BCF    0A.3
0EB5:  CALL   09C
0EB6:  BSF    0A.3
0EB7:  MOVWF  4F
0EB8:  MOVF   7A,W
0EB9:  MOVWF  50
.................... 				break; 
0EBA:  GOTO   6E2
.................... 			case 21: 
.................... 				rgb_bits.blue = number_lower[month_l][0]; 
0EBB:  MOVF   48,W
0EBC:  MOVWF  5A
0EBD:  MOVLW  06
0EBE:  MOVWF  5B
0EBF:  BCF    0A.3
0EC0:  CALL   79F
0EC1:  BSF    0A.3
0EC2:  MOVF   78,W
0EC3:  MOVWF  5A
0EC4:  INCF   5A,W
0EC5:  BCF    0A.3
0EC6:  CALL   09C
0EC7:  BSF    0A.3
0EC8:  MOVWF  7A
0EC9:  MOVF   5A,W
0ECA:  BCF    0A.3
0ECB:  CALL   09C
0ECC:  BSF    0A.3
0ECD:  MOVWF  4F
0ECE:  MOVF   7A,W
0ECF:  MOVWF  50
.................... 				break; 
0ED0:  GOTO   6E2
.................... 			////section 29-31: display the hyphen 
.................... 			case 29: 
.................... 				rgb_bits.blue = 0x0040; 
0ED1:  CLRF   50
0ED2:  MOVLW  40
0ED3:  MOVWF  4F
.................... 				break; 
0ED4:  GOTO   6E2
.................... 			case 30: 
.................... 				rgb_bits.blue = 0x0040; 
0ED5:  CLRF   50
0ED6:  MOVLW  40
0ED7:  MOVWF  4F
.................... 				break; 
0ED8:  GOTO   6E2
.................... 			case 31: 
.................... 				rgb_bits.blue = 0x0040; 
0ED9:  CLRF   50
0EDA:  MOVLW  40
0EDB:  MOVWF  4F
.................... 				break; 
0EDC:  GOTO   6E2
.................... 			default: 
.................... 				rgb_bits.green = 0x0000; 
0EDD:  CLRF   54
0EDE:  CLRF   53
.................... 				rgb_bits.blue = 0x0000; 
0EDF:  CLRF   50
0EE0:  CLRF   4F
.................... 				break; 
0EE1:  GOTO   6E2
.................... 		} 	 
.................... 	} 
0EE2:  GOTO   7F2
.................... 	else if (mode == MODE_D) // display running letters 
0EE3:  MOVF   35,W
0EE4:  SUBLW  05
0EE5:  BTFSS  03.2
0EE6:  GOTO   7F2
.................... 	{ 	 
.................... 		rgb_bits.blue = 0x0000; 
0EE7:  CLRF   50
0EE8:  CLRF   4F
.................... 		rgb_bits.red = 0x0000; 
0EE9:  CLRF   52
0EEA:  CLRF   51
.................... 		rgb_bits.green = 0x0000; 
0EEB:  CLRF   54
0EEC:  CLRF   53
.................... 	  	 
.................... 		int8 pcount, ycount, year_position; 
.................... 		pcount = section_count - pled_position + 14; 
0EED:  MOVF   49,W
0EEE:  SUBWF  2F,W
0EEF:  ADDLW  0E
0EF0:  MOVWF  57
.................... 		if (pled_position < 31 ) year_position = pled_position + 30; 
0EF1:  MOVF   49,W
0EF2:  SUBLW  1E
0EF3:  BTFSS  03.0
0EF4:  GOTO   6F9
0EF5:  MOVLW  1E
0EF6:  ADDWF  49,W
0EF7:  MOVWF  59
0EF8:  GOTO   6FC
.................... 		else year_position = pled_position - 30; 
0EF9:  MOVLW  1E
0EFA:  SUBWF  49,W
0EFB:  MOVWF  59
.................... 		ycount = section_count - year_position + 14; 
0EFC:  MOVF   59,W
0EFD:  SUBWF  2F,W
0EFE:  ADDLW  0E
0EFF:  MOVWF  58
.................... 		if (pcount >= 60) 
0F00:  MOVF   57,W
0F01:  SUBLW  3B
0F02:  BTFSC  03.0
0F03:  GOTO   706
.................... 		{ 
.................... 			pcount = pcount - 60; 
0F04:  MOVLW  3C
0F05:  SUBWF  57,F
.................... 		} 
.................... 		if (ycount >= 60) 
0F06:  MOVF   58,W
0F07:  SUBLW  3B
0F08:  BTFSC  03.0
0F09:  GOTO   70C
.................... 		{ 
.................... 			ycount = ycount - 60; 
0F0A:  MOVLW  3C
0F0B:  SUBWF  58,F
.................... 		} 
.................... 		if (pcount >=0 && pcount < 15) 
0F0C:  MOVF   57,W
0F0D:  SUBLW  0E
0F0E:  BTFSS  03.0
0F0F:  GOTO   76A
.................... 		{ 
.................... 			if(pcount > 11) rgb_bits.blue = pled_inward[pcount]; 
0F10:  MOVF   57,W
0F11:  SUBLW  0B
0F12:  BTFSC  03.0
0F13:  GOTO   724
0F14:  BCF    03.0
0F15:  RLF    57,W
0F16:  MOVWF  5A
0F17:  INCF   5A,W
0F18:  BCF    0A.3
0F19:  CALL   24D
0F1A:  BSF    0A.3
0F1B:  MOVWF  7A
0F1C:  MOVF   5A,W
0F1D:  BCF    0A.3
0F1E:  CALL   24D
0F1F:  BSF    0A.3
0F20:  MOVWF  4F
0F21:  MOVF   7A,W
0F22:  MOVWF  50
0F23:  GOTO   76A
.................... 			else if(pcount > 7) rgb_bits.red = pled_inward[pcount]; 
0F24:  MOVF   57,W
0F25:  SUBLW  07
0F26:  BTFSC  03.0
0F27:  GOTO   738
0F28:  BCF    03.0
0F29:  RLF    57,W
0F2A:  MOVWF  5A
0F2B:  INCF   5A,W
0F2C:  BCF    0A.3
0F2D:  CALL   24D
0F2E:  BSF    0A.3
0F2F:  MOVWF  7A
0F30:  MOVF   5A,W
0F31:  BCF    0A.3
0F32:  CALL   24D
0F33:  BSF    0A.3
0F34:  MOVWF  51
0F35:  MOVF   7A,W
0F36:  MOVWF  52
0F37:  GOTO   76A
.................... 			else if(pcount > 3) rgb_bits.green = pled_inward[pcount]; 
0F38:  MOVF   57,W
0F39:  SUBLW  03
0F3A:  BTFSC  03.0
0F3B:  GOTO   74C
0F3C:  BCF    03.0
0F3D:  RLF    57,W
0F3E:  MOVWF  5A
0F3F:  INCF   5A,W
0F40:  BCF    0A.3
0F41:  CALL   24D
0F42:  BSF    0A.3
0F43:  MOVWF  7A
0F44:  MOVF   5A,W
0F45:  BCF    0A.3
0F46:  CALL   24D
0F47:  BSF    0A.3
0F48:  MOVWF  53
0F49:  MOVF   7A,W
0F4A:  MOVWF  54
0F4B:  GOTO   76A
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.red = pled_inward[pcount]; 
0F4C:  BCF    03.0
0F4D:  RLF    57,W
0F4E:  MOVWF  5A
0F4F:  INCF   5A,W
0F50:  BCF    0A.3
0F51:  CALL   24D
0F52:  BSF    0A.3
0F53:  MOVWF  7A
0F54:  MOVF   5A,W
0F55:  BCF    0A.3
0F56:  CALL   24D
0F57:  BSF    0A.3
0F58:  MOVWF  51
0F59:  MOVF   7A,W
0F5A:  MOVWF  52
.................... 				rgb_bits.green = pled_inward[pcount]; 
0F5B:  BCF    03.0
0F5C:  RLF    57,W
0F5D:  MOVWF  5A
0F5E:  INCF   5A,W
0F5F:  BCF    0A.3
0F60:  CALL   24D
0F61:  BSF    0A.3
0F62:  MOVWF  7A
0F63:  MOVF   5A,W
0F64:  BCF    0A.3
0F65:  CALL   24D
0F66:  BSF    0A.3
0F67:  MOVWF  53
0F68:  MOVF   7A,W
0F69:  MOVWF  54
.................... 			} 
.................... 		} 
.................... 		if (ycount >=0 && ycount < 15) 
0F6A:  MOVF   58,W
0F6B:  SUBLW  0E
0F6C:  BTFSS  03.0
0F6D:  GOTO   7D7
.................... 		{ 
.................... 			if(ycount > 11) rgb_bits.blue = year_2014[ycount]; 
0F6E:  MOVF   58,W
0F6F:  SUBLW  0B
0F70:  BTFSC  03.0
0F71:  GOTO   782
0F72:  BCF    03.0
0F73:  RLF    58,W
0F74:  MOVWF  5A
0F75:  INCF   5A,W
0F76:  BCF    0A.3
0F77:  CALL   26F
0F78:  BSF    0A.3
0F79:  MOVWF  7A
0F7A:  MOVF   5A,W
0F7B:  BCF    0A.3
0F7C:  CALL   26F
0F7D:  BSF    0A.3
0F7E:  MOVWF  4F
0F7F:  MOVF   7A,W
0F80:  MOVWF  50
0F81:  GOTO   7D7
.................... 			else if(ycount > 7) 
0F82:  MOVF   58,W
0F83:  SUBLW  07
0F84:  BTFSC  03.0
0F85:  GOTO   7A5
.................... 			{ 
.................... 				rgb_bits.blue = year_2014[ycount]; 
0F86:  BCF    03.0
0F87:  RLF    58,W
0F88:  MOVWF  5A
0F89:  INCF   5A,W
0F8A:  BCF    0A.3
0F8B:  CALL   26F
0F8C:  BSF    0A.3
0F8D:  MOVWF  7A
0F8E:  MOVF   5A,W
0F8F:  BCF    0A.3
0F90:  CALL   26F
0F91:  BSF    0A.3
0F92:  MOVWF  4F
0F93:  MOVF   7A,W
0F94:  MOVWF  50
.................... 				rgb_bits.green = year_2014[ycount]; 
0F95:  BCF    03.0
0F96:  RLF    58,W
0F97:  MOVWF  5A
0F98:  INCF   5A,W
0F99:  BCF    0A.3
0F9A:  CALL   26F
0F9B:  BSF    0A.3
0F9C:  MOVWF  7A
0F9D:  MOVF   5A,W
0F9E:  BCF    0A.3
0F9F:  CALL   26F
0FA0:  BSF    0A.3
0FA1:  MOVWF  53
0FA2:  MOVF   7A,W
0FA3:  MOVWF  54
.................... 			} 
0FA4:  GOTO   7D7
.................... 			else if(ycount > 3) rgb_bits.blue = year_2014[ycount]; 
0FA5:  MOVF   58,W
0FA6:  SUBLW  03
0FA7:  BTFSC  03.0
0FA8:  GOTO   7B9
0FA9:  BCF    03.0
0FAA:  RLF    58,W
0FAB:  MOVWF  5A
0FAC:  INCF   5A,W
0FAD:  BCF    0A.3
0FAE:  CALL   26F
0FAF:  BSF    0A.3
0FB0:  MOVWF  7A
0FB1:  MOVF   5A,W
0FB2:  BCF    0A.3
0FB3:  CALL   26F
0FB4:  BSF    0A.3
0FB5:  MOVWF  4F
0FB6:  MOVF   7A,W
0FB7:  MOVWF  50
0FB8:  GOTO   7D7
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.blue = year_2014[ycount]; 
0FB9:  BCF    03.0
0FBA:  RLF    58,W
0FBB:  MOVWF  5A
0FBC:  INCF   5A,W
0FBD:  BCF    0A.3
0FBE:  CALL   26F
0FBF:  BSF    0A.3
0FC0:  MOVWF  7A
0FC1:  MOVF   5A,W
0FC2:  BCF    0A.3
0FC3:  CALL   26F
0FC4:  BSF    0A.3
0FC5:  MOVWF  4F
0FC6:  MOVF   7A,W
0FC7:  MOVWF  50
.................... 				rgb_bits.green = year_2014[ycount]; 
0FC8:  BCF    03.0
0FC9:  RLF    58,W
0FCA:  MOVWF  5A
0FCB:  INCF   5A,W
0FCC:  BCF    0A.3
0FCD:  CALL   26F
0FCE:  BSF    0A.3
0FCF:  MOVWF  7A
0FD0:  MOVF   5A,W
0FD1:  BCF    0A.3
0FD2:  CALL   26F
0FD3:  BSF    0A.3
0FD4:  MOVWF  53
0FD5:  MOVF   7A,W
0FD6:  MOVWF  54
.................... 			} 
.................... 		} 
.................... 	  	 
.................... 		//change text's position 
.................... 		pled_count++; 
0FD7:  INCF   4B,F
0FD8:  BTFSC  03.2
0FD9:  INCF   4C,F
.................... 		if (pled_count > 120) 
0FDA:  MOVF   4C,F
0FDB:  BTFSS  03.2
0FDC:  GOTO   7E1
0FDD:  MOVF   4B,W
0FDE:  SUBLW  78
0FDF:  BTFSC  03.0
0FE0:  GOTO   7E6
.................... 		{ 
.................... 			pled_count = 0; 
0FE1:  CLRF   4C
0FE2:  CLRF   4B
.................... 			pled_position = pled_position + pled_direction; 
0FE3:  MOVF   4A,W
0FE4:  ADDWF  49,W
0FE5:  MOVWF  49
.................... 		} 
.................... 		if (pled_position == 0) pled_position = 60; 
0FE6:  MOVF   49,F
0FE7:  BTFSS  03.2
0FE8:  GOTO   7EC
0FE9:  MOVLW  3C
0FEA:  MOVWF  49
0FEB:  GOTO   7F2
.................... 		else if (pled_position == 61) pled_position = 1; 
0FEC:  MOVF   49,W
0FED:  SUBLW  3D
0FEE:  BTFSS  03.2
0FEF:  GOTO   7F2
0FF0:  MOVLW  01
0FF1:  MOVWF  49
.................... 	} 
0FF2:  BCF    0A.3
0FF3:  BSF    0A.4
0FF4:  GOTO   60D (RETURN)
.................... } 
....................  
....................  
.................... #PRIORITY INT_CCP1, INT_TIMER0, INT_EXT, INT_RB 
....................  
.................... #INT_EXT 
.................... void EXT_isr(){ 
.................... 	tick += 1; 
*
0573:  MOVLW  01
0574:  ADDWF  3E,F
.................... 	sec++; 
0575:  INCF   3D,F
.................... } 
....................  
0576:  BCF    0B.1
0577:  BCF    0A.3
0578:  BCF    0A.4
0579:  GOTO   037
.................... #INT_RB 
.................... void  RB_isr(void)  
.................... { 
....................    BYTE changes; 
....................    port_b = input_b(); 
057A:  MOVLW  FF
057B:  BSF    03.5
057C:  MOVWF  06
057D:  BCF    03.5
057E:  MOVF   06,W
057F:  MOVWF  33
....................    changes = last_b ^ port_b; 
0580:  MOVF   34,W
0581:  XORWF  33,W
0582:  MOVWF  71
....................    last_b = port_b; 
0583:  MOVF   33,W
0584:  MOVWF  34
....................    if(bit_test(changes, 2)) 
0585:  BTFSS  71.2
0586:  GOTO   58B
....................    { 
....................       mode = MODE_A; 
0587:  MOVLW  02
0588:  MOVWF  35
....................       smode = 1; 
0589:  MOVLW  01
058A:  MOVWF  36
....................    } 
....................    if(bit_test(changes, 3)) 
058B:  BTFSS  71.3
058C:  GOTO   591
....................    { 
....................       mode = MODE_B; 
058D:  MOVLW  03
058E:  MOVWF  35
....................       smode = 1; 
058F:  MOVLW  01
0590:  MOVWF  36
....................    } 
....................    if(bit_test(changes, 4)) 
0591:  BTFSS  71.4
0592:  GOTO   5AC
....................    { 
....................       mode = MODE_C; 
0593:  MOVLW  04
0594:  MOVWF  35
....................       if (smode == 0) 
0595:  MOVF   36,F
0596:  BTFSS  03.2
0597:  GOTO   59B
....................       	smode = 1; 
0598:  MOVLW  01
0599:  MOVWF  36
059A:  GOTO   5AC
....................       else if (smode == 1) 
059B:  DECFSZ 36,W
059C:  GOTO   5A0
....................       	smode = 2; 
059D:  MOVLW  02
059E:  MOVWF  36
059F:  GOTO   5AC
....................       else if (smode == 2) 
05A0:  MOVF   36,W
05A1:  SUBLW  02
05A2:  BTFSS  03.2
05A3:  GOTO   5A7
....................       	smode = 3; 
05A4:  MOVLW  03
05A5:  MOVWF  36
05A6:  GOTO   5AC
....................       else if (smode == 3) 
05A7:  MOVF   36,W
05A8:  SUBLW  03
05A9:  BTFSS  03.2
05AA:  GOTO   5AC
....................       	smode = 0; 
05AB:  CLRF   36
....................    } 
....................    if(bit_test(changes, 5)) 
05AC:  BTFSS  71.5
05AD:  GOTO   5C2
....................    { 
....................       mode = MODE_D; 
05AE:  MOVLW  05
05AF:  MOVWF  35
....................       smode = 1; 
05B0:  MOVLW  01
05B1:  MOVWF  36
....................       if (pled_direction == 1) 
05B2:  DECFSZ 4A,W
05B3:  GOTO   5B7
....................       	pled_direction = -1; 
05B4:  MOVLW  FF
05B5:  MOVWF  4A
05B6:  GOTO   5C2
....................       else if (pled_direction == -1) 
05B7:  MOVF   4A,W
05B8:  SUBLW  FF
05B9:  BTFSS  03.2
05BA:  GOTO   5BD
....................       	pled_direction = 0; 
05BB:  CLRF   4A
05BC:  GOTO   5C2
....................       else if (pled_direction == 0) 
05BD:  MOVF   4A,F
05BE:  BTFSS  03.2
05BF:  GOTO   5C2
....................       	pled_direction = 1; 
05C0:  MOVLW  01
05C1:  MOVWF  4A
....................    } 
.................... } 
....................  
05C2:  BCF    0B.0
05C3:  BCF    0A.3
05C4:  BCF    0A.4
05C5:  GOTO   037
.................... #INT_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................    rc = getc(); 
05C6:  BTFSS  0C.5
05C7:  GOTO   5C6
05C8:  MOVF   1A,W
05C9:  MOVWF  4D
....................    switch (rs232_status) 
05CA:  MOVF   4E,W
05CB:  BTFSC  03.2
05CC:  GOTO   5EC
05CD:  XORLW  01
05CE:  BTFSC  03.2
05CF:  GOTO   5F3
05D0:  XORLW  03
05D1:  BTFSC  03.2
05D2:  GOTO   5FA
05D3:  XORLW  01
05D4:  BTFSC  03.2
05D5:  GOTO   5FF
05D6:  XORLW  07
05D7:  BTFSC  03.2
05D8:  GOTO   604
05D9:  XORLW  01
05DA:  BTFSC  03.2
05DB:  GOTO   609
05DC:  XORLW  03
05DD:  BTFSC  03.2
05DE:  GOTO   60E
05DF:  XORLW  01
05E0:  BTFSC  03.2
05E1:  GOTO   613
05E2:  XORLW  0F
05E3:  BTFSC  03.2
05E4:  GOTO   618
05E5:  XORLW  01
05E6:  BTFSC  03.2
05E7:  GOTO   61D
05E8:  XORLW  03
05E9:  BTFSC  03.2
05EA:  GOTO   624
05EB:  GOTO   62B
....................    { 
....................    	case 0: 
....................    		if (rc == 83) rs232_status = 1; 
05EC:  MOVF   4D,W
05ED:  SUBLW  53
05EE:  BTFSS  03.2
05EF:  GOTO   5F2
05F0:  MOVLW  01
05F1:  MOVWF  4E
....................    		break; 
05F2:  GOTO   62C
....................    	case 1: 
....................    		if (rc == 84) rs232_status = 2; 
05F3:  MOVF   4D,W
05F4:  SUBLW  54
05F5:  BTFSS  03.2
05F6:  GOTO   5F9
05F7:  MOVLW  02
05F8:  MOVWF  4E
....................    		break; 
05F9:  GOTO   62C
....................    	case 2: 
....................    		day = rc; 
05FA:  MOVF   4D,W
05FB:  MOVWF  37
....................    		rs232_status = 3; 
05FC:  MOVLW  03
05FD:  MOVWF  4E
....................    		break; 
05FE:  GOTO   62C
....................    	case 3: 
....................    		month = rc; 
05FF:  MOVF   4D,W
0600:  MOVWF  38
....................    		rs232_status = 4; 
0601:  MOVLW  04
0602:  MOVWF  4E
....................    		break; 
0603:  GOTO   62C
....................    	case 4: 
....................    		year = rc; 
0604:  MOVF   4D,W
0605:  MOVWF  39
....................    		rs232_status = 5; 
0606:  MOVLW  05
0607:  MOVWF  4E
....................    		break; 
0608:  GOTO   62C
....................    	case 5: 
....................    		dow = rc; 
0609:  MOVF   4D,W
060A:  MOVWF  3A
....................    		rs232_status = 6; 
060B:  MOVLW  06
060C:  MOVWF  4E
....................    		break; 
060D:  GOTO   62C
....................    	case 6: 
....................    		hour = rc; 
060E:  MOVF   4D,W
060F:  MOVWF  3B
....................    		rs232_status = 7; 
0610:  MOVLW  07
0611:  MOVWF  4E
....................    		break; 
0612:  GOTO   62C
....................    	case 7: 
....................    		min = rc; 
0613:  MOVF   4D,W
0614:  MOVWF  3C
....................    		rs232_status = 8; 
0615:  MOVLW  08
0616:  MOVWF  4E
....................    		break; 
0617:  GOTO   62C
....................    	case 8: 
....................    		sec = rc; 
0618:  MOVF   4D,W
0619:  MOVWF  3D
....................    		rs232_status = 9; 
061A:  MOVLW  09
061B:  MOVWF  4E
....................    		break; 
061C:  GOTO   62C
....................    	case 9: 
....................    		if (rc == 69) rs232_status = 10; 
061D:  MOVF   4D,W
061E:  SUBLW  45
061F:  BTFSS  03.2
0620:  GOTO   623
0621:  MOVLW  0A
0622:  MOVWF  4E
....................    		break; 
0623:  GOTO   62C
....................    	case 10: 
....................    		if (rc == 68) rs232_status = 11; 
0624:  MOVF   4D,W
0625:  SUBLW  44
0626:  BTFSS  03.2
0627:  GOTO   62A
0628:  MOVLW  0B
0629:  MOVWF  4E
....................    		break; 
062A:  GOTO   62C
....................    	default: 
....................    		//rs232_status = 0; 
....................    		break; 
062B:  GOTO   62C
....................    } 
.................... } 
....................  
062C:  BCF    0C.5
062D:  BCF    0A.3
062E:  BCF    0A.4
062F:  GOTO   037
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    timer1_overflow++; 
0630:  INCF   28,F
.................... } 
....................  
0631:  BCF    0C.0
0632:  BCF    0A.3
0633:  BCF    0A.4
0634:  GOTO   037
.................... #INT_CCP1 
.................... void  CCP1_isr(void)  
.................... { 
....................    sigHall_timer = ((int32)timer1_overflow * 0xFFFF + CCP_1); 
0635:  CLRF   74
0636:  CLRF   73
0637:  CLRF   72
0638:  MOVF   28,W
0639:  MOVWF  71
063A:  MOVF   74,W
063B:  BSF    03.5
063C:  MOVWF  23
063D:  MOVF   73,W
063E:  MOVWF  22
063F:  MOVF   72,W
0640:  MOVWF  21
0641:  MOVF   71,W
0642:  MOVWF  20
0643:  CLRF   27
0644:  CLRF   26
0645:  MOVLW  FF
0646:  MOVWF  25
0647:  MOVLW  FF
0648:  MOVWF  24
0649:  BCF    03.5
*
067D:  MOVF   7A,W
067E:  MOVWF  74
067F:  MOVF   79,W
0680:  MOVWF  73
0681:  MOVF   78,W
0682:  MOVWF  72
0683:  MOVF   77,W
0684:  MOVWF  71
0685:  MOVF   15,W
0686:  ADDWF  71,W
0687:  MOVWF  29
0688:  MOVF   72,W
0689:  MOVWF  2A
068A:  MOVF   16,W
068B:  BTFSC  03.0
068C:  INCFSZ 16,W
068D:  ADDWF  2A,F
068E:  MOVF   73,W
068F:  MOVWF  2B
0690:  MOVLW  00
0691:  BTFSC  03.0
0692:  MOVLW  01
0693:  ADDWF  2B,F
0694:  MOVF   74,W
0695:  MOVWF  2C
0696:  MOVLW  00
0697:  BTFSC  03.0
0698:  MOVLW  01
0699:  ADDWF  2C,F
....................    timer1_overflow = 0; 
069A:  CLRF   28
....................    set_timer1(0); 
069B:  CLRF   0E
069C:  CLRF   0F
069D:  CLRF   0E
....................    circle_trigger = 1; 
069E:  MOVLW  01
069F:  MOVWF  2D
.................... } 
....................  
06A0:  BCF    0C.2
06A1:  BCF    0A.3
06A2:  BCF    0A.4
06A3:  GOTO   037
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    section_trigger = 1; 
06A4:  MOVLW  01
06A5:  MOVWF  2E
06A6:  BCF    0B.2
06A7:  BCF    0A.3
06A8:  BCF    0A.4
06A9:  GOTO   037
.................... } 
....................  
.................... void var_init() 
.................... { 
....................    timer1_overflow = 0; 
06AA:  CLRF   28
....................    sigHall_timer = 0; 
06AB:  CLRF   2C
06AC:  CLRF   2B
06AD:  CLRF   2A
06AE:  CLRF   29
....................    circle_trigger = 0; 
06AF:  CLRF   2D
....................    port_b = 0x00; 
06B0:  CLRF   33
....................    last_b = port_b; 
06B1:  MOVF   33,W
06B2:  MOVWF  34
....................    tuning = 6; 
06B3:  MOVLW  06
06B4:  MOVWF  32
....................    mode = MODE_A; 
06B5:  MOVLW  02
06B6:  MOVWF  35
....................    smode = 1; 
06B7:  MOVLW  01
06B8:  MOVWF  36
....................    tick = 1; 
06B9:  MOVLW  01
06BA:  MOVWF  3E
....................    digit_sec = 0; 
06BB:  CLRF   3F
....................    pled_position = 31; 
06BC:  MOVLW  1F
06BD:  MOVWF  49
....................    pled_direction = 1; 
06BE:  MOVLW  01
06BF:  MOVWF  4A
....................    pled_count = 0; 
06C0:  CLRF   4C
06C1:  CLRF   4B
....................    rs232_status = 0; 
06C2:  CLRF   4E
06C3:  BCF    0A.3
06C4:  BSF    0A.4
06C5:  GOTO   022 (RETURN)
.................... } 
....................  
.................... void main() 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  BSF    03.5
1004:  BSF    03.6
1005:  BCF    07.3
1006:  MOVLW  40
1007:  BCF    03.6
1008:  MOVWF  19
1009:  MOVLW  E6
100A:  MOVWF  18
100B:  MOVLW  D0
100C:  BCF    03.5
100D:  MOVWF  18
100E:  MOVLW  FF
100F:  MOVWF  55
1010:  BSF    03.5
1011:  BSF    03.6
1012:  MOVF   09,W
1013:  ANDLW  C0
1014:  MOVWF  09
1015:  BCF    03.6
1016:  BCF    1F.4
1017:  BCF    1F.5
1018:  MOVLW  00
1019:  BSF    03.6
101A:  MOVWF  08
101B:  BCF    03.5
101C:  CLRF   07
101D:  CLRF   08
101E:  CLRF   09
101F:  BCF    03.6
.................... { 
.................... 	//initialize data 
....................    var_init(); 
1020:  BCF    0A.4
1021:  GOTO   6AA
1022:  BSF    0A.4
....................    //initialize timers and cp1 interrupt 
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_2);      //div 2 - 26.2 ms overflow 
1023:  MOVLW  15
1024:  MOVWF  10
.................... 	setup_ccp1(CCP_CAPTURE_FE); 
1025:  BSF    55.2
1026:  MOVF   55,W
1027:  BSF    03.5
1028:  MOVWF  07
1029:  BCF    03.5
102A:  CLRF   17
102B:  MOVLW  04
102C:  MOVWF  17
102D:  BSF    03.5
102E:  CLRF   1B
102F:  CLRF   1C
1030:  MOVLW  01
1031:  MOVWF  1D
....................    //with 819.2 us overflow for Timer0, motor's speed must be at least 20 RPS 
....................    setup_timer_0(T0_INTERNAL | T0_DIV_16); //div 16 - 819.2 us overflow 
1032:  MOVF   01,W
1033:  ANDLW  C0
1034:  IORLW  03
1035:  MOVWF  01
....................    //enable interrupts 
....................    enable_interrupts(INT_RB2|INT_RB3|INT_RB4|INT_RB5);; 
1036:  BCF    03.5
1037:  BSF    0B.3
1038:  MOVLW  3C
1039:  BSF    03.5
103A:  IORWF  16,F
....................    //enable_interrupts(INT_TBE); 
....................    //enable_interrupts(INT_RDA); 
....................    enable_interrupts(INT_EXT); 
103B:  BCF    03.5
103C:  BSF    0B.4
....................    enable_interrupts(INT_TIMER1); 
103D:  BSF    03.5
103E:  BSF    0C.0
....................    enable_interrupts(INT_CCP1); 
103F:  BSF    0C.2
....................    enable_interrupts(INT_TIMER0); 
1040:  BCF    03.5
1041:  BSF    0B.5
....................    enable_interrupts(INT_RDA); 
1042:  BSF    03.5
1043:  BSF    0C.5
.................... 	enable_interrupts(GLOBAL); 
1044:  MOVLW  C0
1045:  BCF    03.5
1046:  IORWF  0B,F
.................... 	//initialize clock 
....................    ds1307_init(); 
1047:  BCF    0A.4
1048:  BSF    0A.3
1049:  GOTO   000
104A:  BSF    0A.4
104B:  BCF    0A.3
....................   	 
.................... 	// power on notice 
.................... 	rgb_bits.blue =  0xF00F; 
104C:  MOVLW  F0
104D:  MOVWF  50
104E:  MOVLW  0F
104F:  MOVWF  4F
.................... 	rgb_bits.red =   0x0F0F; 
1050:  MOVLW  0F
1051:  MOVWF  52
1052:  MOVLW  0F
1053:  MOVWF  51
.................... 	rgb_bits.green = 0x00FF; 
1054:  CLRF   54
1055:  MOVLW  FF
1056:  MOVWF  53
.................... 	latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
1057:  MOVF   50,W
1058:  MOVWF  57
1059:  MOVF   4F,W
105A:  MOVWF  56
105B:  MOVF   52,W
105C:  MOVWF  59
105D:  MOVF   51,W
105E:  MOVWF  58
105F:  MOVF   54,W
1060:  MOVWF  5B
1061:  MOVF   53,W
1062:  MOVWF  5A
....................   	 
.................... 	//get the first values of date, time 
.................... 	ds1307_get_time(hour, min, sec); 
.................... 	ds1307_get_date(day, month, year, dow); 
.................... 	// calculating hour hand's position for analog clock 
....................    anal_hour = hour % 12; 
*
121E:  MOVF   3B,W
121F:  MOVWF  5A
1220:  MOVLW  0C
1221:  MOVWF  5B
1222:  BCF    0A.4
1223:  CALL   78A
1224:  BSF    0A.4
1225:  MOVF   77,W
1226:  MOVWF  44
....................    anal_hour = anal_hour * 5; 
1227:  MOVF   44,W
1228:  MOVWF  5A
1229:  MOVLW  05
122A:  MOVWF  5B
122B:  BCF    0A.4
122C:  CALL   79F
122D:  BSF    0A.4
122E:  MOVF   78,W
122F:  MOVWF  44
....................    anal_hour = anal_hour + (int8)(min / 12); 
1230:  MOVF   3C,W
1231:  MOVWF  5A
1232:  MOVLW  0C
1233:  MOVWF  5B
1234:  BCF    0A.4
1235:  CALL   78A
1236:  BSF    0A.4
1237:  MOVF   78,W
1238:  ADDWF  44,F
....................    // calculating hour, minute, day, month numbers to display in digital clock 
....................    hour_h = (int8)(hour / 10); 
1239:  MOVF   3B,W
123A:  MOVWF  5A
123B:  MOVLW  0A
123C:  MOVWF  5B
123D:  BCF    0A.4
123E:  CALL   78A
123F:  BSF    0A.4
1240:  MOVF   78,W
1241:  MOVWF  40
.................... 	hour_l = hour % 10; 
1242:  MOVF   3B,W
1243:  MOVWF  5A
1244:  MOVLW  0A
1245:  MOVWF  5B
1246:  BCF    0A.4
1247:  CALL   78A
1248:  BSF    0A.4
1249:  MOVF   77,W
124A:  MOVWF  41
.................... 	min_h = (int8)(min / 10); 
124B:  MOVF   3C,W
124C:  MOVWF  5A
124D:  MOVLW  0A
124E:  MOVWF  5B
124F:  BCF    0A.4
1250:  CALL   78A
1251:  BSF    0A.4
1252:  MOVF   78,W
1253:  MOVWF  42
.................... 	min_l = min % 10; 
1254:  MOVF   3C,W
1255:  MOVWF  5A
1256:  MOVLW  0A
1257:  MOVWF  5B
1258:  BCF    0A.4
1259:  CALL   78A
125A:  BSF    0A.4
125B:  MOVF   77,W
125C:  MOVWF  43
.................... 	day_h = (int8)(day / 10); 
125D:  MOVF   37,W
125E:  MOVWF  5A
125F:  MOVLW  0A
1260:  MOVWF  5B
1261:  BCF    0A.4
1262:  CALL   78A
1263:  BSF    0A.4
1264:  MOVF   78,W
1265:  MOVWF  45
.................... 	day_l = day % 10; 
1266:  MOVF   37,W
1267:  MOVWF  5A
1268:  MOVLW  0A
1269:  MOVWF  5B
126A:  BCF    0A.4
126B:  CALL   78A
126C:  BSF    0A.4
126D:  MOVF   77,W
126E:  MOVWF  46
.................... 	month_h = (int8)(month / 10); 
126F:  MOVF   38,W
1270:  MOVWF  5A
1271:  MOVLW  0A
1272:  MOVWF  5B
1273:  BCF    0A.4
1274:  CALL   78A
1275:  BSF    0A.4
1276:  MOVF   78,W
1277:  MOVWF  47
.................... 	month_l = month % 10; 
1278:  MOVF   38,W
1279:  MOVWF  5A
127A:  MOVLW  0A
127B:  MOVWF  5B
127C:  BCF    0A.4
127D:  CALL   78A
127E:  BSF    0A.4
127F:  MOVF   77,W
1280:  MOVWF  48
....................    
....................    // main routine 
....................    while(true) 
....................    { 
....................    	// rs232 operation 
....................    	if (rs232_status == 11) 
1281:  MOVF   4E,W
1282:  SUBLW  0B
1283:  BTFSS  03.2
1284:  GOTO   35A
....................    	{ 
....................    		latch_write(0x0000, 0x0FF0, 0x0000); 
1285:  CLRF   57
1286:  CLRF   56
1287:  MOVLW  0F
1288:  MOVWF  59
1289:  MOVLW  F0
128A:  MOVWF  58
128B:  CLRF   5B
128C:  CLRF   5A
....................    		rs232_status = 0; 
*
1308:  CLRF   4E
....................    	   ds1307_set_date_time(day, month, year, dow, hour, min, sec); 
1309:  MOVF   37,W
130A:  MOVWF  56
130B:  MOVF   38,W
130C:  MOVWF  57
130D:  MOVF   39,W
130E:  MOVWF  58
130F:  MOVF   3A,W
1310:  MOVWF  59
1311:  MOVF   3B,W
1312:  MOVWF  5A
1313:  MOVF   3C,W
1314:  MOVWF  5B
1315:  MOVF   3D,W
1316:  MOVWF  5C
1317:  BCF    0A.4
1318:  BSF    0A.3
1319:  GOTO   1E0
131A:  BSF    0A.4
131B:  BCF    0A.3
....................    	   putc('O'); 
131C:  MOVLW  4F
131D:  MOVWF  56
131E:  BCF    0A.4
131F:  CALL   7C4
1320:  BSF    0A.4
....................    	   delay_ms(100); 
1321:  MOVLW  64
1322:  MOVWF  56
1323:  BCF    0A.4
1324:  CALL   7DC
1325:  BSF    0A.4
....................    	   putc('K'); 
1326:  MOVLW  4B
1327:  MOVWF  56
1328:  BCF    0A.4
1329:  CALL   7C4
132A:  BSF    0A.4
....................    	   delay_ms(100); 
132B:  MOVLW  64
132C:  MOVWF  56
132D:  BCF    0A.4
132E:  CALL   7DC
132F:  BSF    0A.4
.................... 		   latch_ClearAll(); 
....................    	} 
....................    	// get the time value from ds1307 after each 5 minutes 
.................... 		if(tick == 300) 
*
135A:  MOVF   3E,W
135B:  SUBLW  2C
135C:  BTFSS  03.2
135D:  GOTO   4BB
.................... 		{ 
.................... 			ds1307_get_time(hour, min, sec); 
.................... 			ds1307_get_date(day, month, year, dow); 
.................... 		   anal_hour = hour % 12; 
*
149E:  MOVF   3B,W
149F:  MOVWF  5A
14A0:  MOVLW  0C
14A1:  MOVWF  5B
14A2:  BCF    0A.4
14A3:  CALL   78A
14A4:  BSF    0A.4
14A5:  MOVF   77,W
14A6:  MOVWF  44
.................... 			anal_hour = anal_hour * 5; 
14A7:  MOVF   44,W
14A8:  MOVWF  5A
14A9:  MOVLW  05
14AA:  MOVWF  5B
14AB:  BCF    0A.4
14AC:  CALL   79F
14AD:  BSF    0A.4
14AE:  MOVF   78,W
14AF:  MOVWF  44
.................... 			anal_hour = anal_hour + (int8)(min / 12); 
14B0:  MOVF   3C,W
14B1:  MOVWF  5A
14B2:  MOVLW  0C
14B3:  MOVWF  5B
14B4:  BCF    0A.4
14B5:  CALL   78A
14B6:  BSF    0A.4
14B7:  MOVF   78,W
14B8:  ADDWF  44,F
.................... 		   tick = 1; 
14B9:  MOVLW  01
14BA:  MOVWF  3E
.................... 		} 
.................... 		// change values of minute and hour at appropriate value of second and minute 
.................... 		if(sec > 59) 
14BB:  MOVF   3D,W
14BC:  SUBLW  3B
14BD:  BTFSC  03.0
14BE:  GOTO   59E
.................... 		{ 
.................... 			sec = 0; 
14BF:  CLRF   3D
.................... 			min++; 
14C0:  INCF   3C,F
.................... 			if(min > 59) 
14C1:  MOVF   3C,W
14C2:  SUBLW  3B
14C3:  BTFSC  03.0
14C4:  GOTO   57A
.................... 			{ 
.................... 				min = 0; 
14C5:  CLRF   3C
.................... 				ds1307_get_time(hour, min, sec); 
.................... 				anal_hour = hour % 12; 
*
155F:  MOVF   3B,W
1560:  MOVWF  5A
1561:  MOVLW  0C
1562:  MOVWF  5B
1563:  BCF    0A.4
1564:  CALL   78A
1565:  BSF    0A.4
1566:  MOVF   77,W
1567:  MOVWF  44
.................... 			   anal_hour = anal_hour * 5; 
1568:  MOVF   44,W
1569:  MOVWF  5A
156A:  MOVLW  05
156B:  MOVWF  5B
156C:  BCF    0A.4
156D:  CALL   79F
156E:  BSF    0A.4
156F:  MOVF   78,W
1570:  MOVWF  44
.................... 			   anal_hour = anal_hour + (int8)(min / 12); 
1571:  MOVF   3C,W
1572:  MOVWF  5A
1573:  MOVLW  0C
1574:  MOVWF  5B
1575:  BCF    0A.4
1576:  CALL   78A
1577:  BSF    0A.4
1578:  MOVF   78,W
1579:  ADDWF  44,F
.................... 			} 
.................... 			//refresh value for digital clock after each minute 
.................... 			hour_h = (int8)(hour / 10); 
157A:  MOVF   3B,W
157B:  MOVWF  5A
157C:  MOVLW  0A
157D:  MOVWF  5B
157E:  BCF    0A.4
157F:  CALL   78A
1580:  BSF    0A.4
1581:  MOVF   78,W
1582:  MOVWF  40
.................... 			hour_l = hour % 10; 
1583:  MOVF   3B,W
1584:  MOVWF  5A
1585:  MOVLW  0A
1586:  MOVWF  5B
1587:  BCF    0A.4
1588:  CALL   78A
1589:  BSF    0A.4
158A:  MOVF   77,W
158B:  MOVWF  41
.................... 			min_h = (int8)(min / 10); 
158C:  MOVF   3C,W
158D:  MOVWF  5A
158E:  MOVLW  0A
158F:  MOVWF  5B
1590:  BCF    0A.4
1591:  CALL   78A
1592:  BSF    0A.4
1593:  MOVF   78,W
1594:  MOVWF  42
.................... 			min_l = min % 10; 
1595:  MOVF   3C,W
1596:  MOVWF  5A
1597:  MOVLW  0A
1598:  MOVWF  5B
1599:  BCF    0A.4
159A:  CALL   78A
159B:  BSF    0A.4
159C:  MOVF   77,W
159D:  MOVWF  43
.................... 		} 
.................... 		//display routine 
.................... 		if(circle_trigger == 1) 
159E:  DECFSZ 2D,W
159F:  GOTO   6CB
.................... 		{   
.................... 			circle_trigger = 0; 
15A0:  CLRF   2D
.................... 			if ((smode % 2) == 1) latch_ClearAll(); 
15A1:  MOVF   36,W
15A2:  ANDLW  01
15A3:  SUBLW  01
15A4:  BTFSS  03.2
15A5:  GOTO   5D0
.................... 			digit_sec++; 
*
15D0:  INCF   3F,F
.................... 			section_trigger = 1; 
15D1:  MOVLW  01
15D2:  MOVWF  2E
.................... 			section_count = MAX_SECTION; 
15D3:  MOVLW  3C
15D4:  MOVWF  2F
.................... 			section_timer = 256 - (int8)(sigHall_timer / (MAX_SECTION * 8)) + tuning; 
15D5:  BCF    03.1
15D6:  MOVF   2C,W
15D7:  MOVWF  59
15D8:  MOVF   2B,W
15D9:  MOVWF  58
15DA:  MOVF   2A,W
15DB:  MOVWF  57
15DC:  MOVF   29,W
15DD:  MOVWF  56
15DE:  CLRF   5D
15DF:  CLRF   5C
15E0:  MOVLW  01
15E1:  MOVWF  5B
15E2:  MOVLW  E0
15E3:  MOVWF  5A
15E4:  BCF    0A.4
15E5:  BSF    0A.3
15E6:  GOTO   26C
15E7:  BSF    0A.4
15E8:  BCF    0A.3
15E9:  MOVF   77,W
15EA:  SUBLW  00
15EB:  MOVWF  56
15EC:  MOVLW  01
15ED:  MOVWF  57
15EE:  MOVLW  00
15EF:  BTFSS  03.0
15F0:  MOVLW  01
15F1:  SUBWF  57,F
15F2:  CLRF   7A
15F3:  MOVF   32,W
15F4:  MOVWF  77
15F5:  BTFSC  77.7
15F6:  DECF   7A,F
15F7:  ADDWF  56,W
15F8:  MOVWF  30
15F9:  MOVF   57,W
15FA:  MOVWF  31
15FB:  MOVF   7A,W
15FC:  BTFSC  03.0
15FD:  INCFSZ 7A,W
15FE:  ADDWF  31,F
.................... 			while(circle_trigger == 0 && section_count > 0) 
15FF:  MOVF   2D,F
1600:  BTFSS  03.2
1601:  GOTO   6CB
1602:  MOVF   2F,F
1603:  BTFSC  03.2
1604:  GOTO   6CB
.................... 			{ 	 
.................... 				if(section_trigger == 1) 
1605:  DECFSZ 2E,W
1606:  GOTO   6CA
.................... 				{ 
.................... 					set_timer0(section_timer); 
1607:  MOVF   30,W
1608:  MOVWF  01
.................... 					section_trigger = 0; 
1609:  CLRF   2E
.................... 					fetch_data(); 
160A:  BCF    0A.4
160B:  BSF    0A.3
160C:  GOTO   2BD
160D:  BSF    0A.4
160E:  BCF    0A.3
.................... 					latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
160F:  MOVF   50,W
1610:  MOVWF  57
1611:  MOVF   4F,W
1612:  MOVWF  56
1613:  MOVF   52,W
1614:  MOVWF  59
1615:  MOVF   51,W
1616:  MOVWF  58
1617:  MOVF   54,W
1618:  MOVWF  5B
1619:  MOVF   53,W
161A:  MOVWF  5A
.................... 					if ((smode % 2) == 1 && section_count > 1) latch_ClearAll(); 
*
1696:  MOVF   36,W
1697:  ANDLW  01
1698:  SUBLW  01
1699:  BTFSS  03.2
169A:  GOTO   6C9
169B:  MOVF   2F,W
169C:  SUBLW  01
169D:  BTFSC  03.0
169E:  GOTO   6C9
.................... 					section_count--; 
*
16C9:  DECF   2F,F
.................... 				} 
16CA:  GOTO   5FF
.................... 			} 
.................... 		}// circle_trigger 
16CB:  GOTO   281
....................    } // end of while(true) 
.................... } 
....................  
16CC:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
