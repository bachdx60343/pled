CCS PCM C Compiler, Version 5.015, 5967               24-Apr-14 13:40

               Filename:   C:\Users\LongNT\SVN\03. Engineering\034. Implementation\pLED_code\pLED.lst

               ROM used:   5773 words (70%)
                           Largest free fragment is 2048
               RAM used:   61 (17%) at main() level
                           103 (28%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.2
001A:  GOTO   01D
001B:  BTFSC  0C.2
001C:  GOTO   052
001D:  BTFSS  0B.5
001E:  GOTO   021
001F:  BTFSC  0B.2
0020:  GOTO   055
0021:  BTFSS  0B.4
0022:  GOTO   025
0023:  BTFSC  0B.1
0024:  GOTO   049
0025:  BTFSS  0B.3
0026:  GOTO   029
0027:  BTFSC  0B.0
0028:  GOTO   046
0029:  MOVLW  8C
002A:  MOVWF  04
002B:  BTFSS  00.5
002C:  GOTO   02F
002D:  BTFSC  0C.5
002E:  GOTO   04C
002F:  MOVLW  8C
0030:  MOVWF  04
0031:  BTFSS  00.0
0032:  GOTO   035
0033:  BTFSC  0C.0
0034:  GOTO   04F
0035:  MOVF   22,W
0036:  MOVWF  04
0037:  MOVF   23,W
0038:  MOVWF  77
0039:  MOVF   24,W
003A:  MOVWF  78
003B:  MOVF   25,W
003C:  MOVWF  79
003D:  MOVF   26,W
003E:  MOVWF  7A
003F:  MOVF   20,W
0040:  MOVWF  0A
0041:  SWAPF  21,W
0042:  MOVWF  03
0043:  SWAPF  7F,F
0044:  SWAPF  7F,W
0045:  RETFIE
0046:  BCF    0A.3
0047:  BCF    0A.4
0048:  GOTO   58E
0049:  BCF    0A.3
004A:  BCF    0A.4
004B:  GOTO   587
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   5F5
004F:  BCF    0A.3
0050:  BCF    0A.4
0051:  GOTO   65F
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   664
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   6D3
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... // 		Main function, framework for the program                            || 
.................... //                                                                           || 
.................... //   Last edited: 23 - April - 2014                                          || 
.................... //                                                                           || 
.................... //   void var_init() - Initialize global variables' values                   || 
.................... //   void main() - main program, called when the Microcontroller start       || 
.................... //																									  || 
.................... //   There are six Interrupt Service Routine (ISR):                          || 
.................... //					- INT_TIMER1: timer1 interrupt, circle timing                 || 
.................... //					- INT_CCP1: CCP1 interrupt, circle timing                     || 
.................... //					- INT_TIMER0: timer0 interrupt, section timing                || 
.................... //					- INT_EXT: external interrupt, receive clock's SQW/OUT        || 
.................... //					- INT_RB: RB2-RB3-RB4-RB5 input change interrupt, RF signal   || 
.................... //					- INT_RDA: RS232 receive interrupt, for update date, time     || 
.................... //																									  || 
.................... //===========================================================================|| 
....................  
.................... #include "pLED.h" 
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... //		   Header file for pLED project                                        || 
.................... //                                                                           || 
.................... //   Last edited: 23 - April - 2014                                          || 
.................... //                                                                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  F8
005D:  RETLW  03
005E:  RETLW  08
005F:  RETLW  02
0060:  RETLW  F8
0061:  RETLW  03
0062:  RETLW  40
0063:  RETLW  00
0064:  RETLW  20
0065:  RETLW  00
0066:  RETLW  F8
0067:  RETLW  03
0068:  RETLW  C8
0069:  RETLW  03
006A:  RETLW  48
006B:  RETLW  02
006C:  RETLW  78
006D:  RETLW  02
006E:  RETLW  48
006F:  RETLW  02
0070:  RETLW  48
0071:  RETLW  02
0072:  RETLW  F8
0073:  RETLW  03
0074:  RETLW  78
0075:  RETLW  00
0076:  RETLW  40
0077:  RETLW  00
0078:  RETLW  F8
0079:  RETLW  03
007A:  RETLW  78
007B:  RETLW  02
007C:  RETLW  48
007D:  RETLW  02
007E:  RETLW  C8
007F:  RETLW  03
0080:  RETLW  F8
0081:  RETLW  03
0082:  RETLW  48
0083:  RETLW  02
0084:  RETLW  C8
0085:  RETLW  03
0086:  RETLW  08
0087:  RETLW  00
0088:  RETLW  08
0089:  RETLW  00
008A:  RETLW  F8
008B:  RETLW  03
008C:  RETLW  F8
008D:  RETLW  03
008E:  RETLW  48
008F:  RETLW  02
0090:  RETLW  F8
0091:  RETLW  03
0092:  RETLW  78
0093:  RETLW  02
0094:  RETLW  48
0095:  RETLW  02
0096:  RETLW  F8
0097:  RETLW  03
0098:  BCF    0A.0
0099:  BCF    0A.1
009A:  BCF    0A.2
009B:  ADDWF  02,F
009C:  RETLW  F8
009D:  RETLW  03
009E:  RETLW  08
009F:  RETLW  02
00A0:  RETLW  F8
00A1:  RETLW  03
00A2:  RETLW  F8
00A3:  RETLW  03
00A4:  RETLW  00
00A5:  RETLW  01
00A6:  RETLW  80
00A7:  RETLW  00
00A8:  RETLW  C8
00A9:  RETLW  03
00AA:  RETLW  48
00AB:  RETLW  02
00AC:  RETLW  78
00AD:  RETLW  02
00AE:  RETLW  F8
00AF:  RETLW  03
00B0:  RETLW  48
00B1:  RETLW  02
00B2:  RETLW  48
00B3:  RETLW  02
00B4:  RETLW  F8
00B5:  RETLW  03
00B6:  RETLW  40
00B7:  RETLW  00
00B8:  RETLW  C0
00B9:  RETLW  03
00BA:  RETLW  78
00BB:  RETLW  02
00BC:  RETLW  48
00BD:  RETLW  02
00BE:  RETLW  C8
00BF:  RETLW  03
00C0:  RETLW  78
00C1:  RETLW  02
00C2:  RETLW  48
00C3:  RETLW  02
00C4:  RETLW  F8
00C5:  RETLW  03
00C6:  RETLW  F8
00C7:  RETLW  03
00C8:  RETLW  00
00C9:  RETLW  02
00CA:  RETLW  00
00CB:  RETLW  02
00CC:  RETLW  F8
00CD:  RETLW  03
00CE:  RETLW  48
00CF:  RETLW  02
00D0:  RETLW  F8
00D1:  RETLW  03
00D2:  RETLW  F8
00D3:  RETLW  03
00D4:  RETLW  48
00D5:  RETLW  02
00D6:  RETLW  C8
00D7:  RETLW  03
00D8:  BCF    0A.0
00D9:  BCF    0A.1
00DA:  BCF    0A.2
00DB:  ADDLW  DF
00DC:  BTFSC  03.0
00DD:  INCF   0A,F
00DE:  MOVWF  02
00DF:  RETLW  00
00E0:  RETLW  E0
00E1:  RETLW  00
00E2:  RETLW  C0
00E3:  RETLW  00
00E4:  RETLW  80
00E5:  RETLW  00
00E6:  RETLW  80
00E7:  RETLW  00
00E8:  RETLW  80
00E9:  RETLW  00
00EA:  RETLW  C0
00EB:  RETLW  00
00EC:  RETLW  E0
00ED:  RETLW  00
00EE:  RETLW  C0
00EF:  RETLW  00
00F0:  RETLW  80
00F1:  RETLW  00
00F2:  RETLW  80
00F3:  RETLW  00
00F4:  RETLW  80
00F5:  RETLW  00
00F6:  RETLW  C0
00F7:  RETLW  00
00F8:  RETLW  E0
00F9:  RETLW  00
00FA:  RETLW  C0
00FB:  RETLW  00
00FC:  RETLW  80
00FD:  RETLW  00
00FE:  RETLW  80
00FF:  RETLW  00
0100:  RETLW  80
0101:  RETLW  00
0102:  RETLW  C0
0103:  RETLW  00
0104:  RETLW  E0
0105:  RETLW  00
0106:  RETLW  C0
0107:  RETLW  00
0108:  RETLW  80
0109:  RETLW  00
010A:  RETLW  80
010B:  RETLW  01
010C:  RETLW  80
010D:  RETLW  03
010E:  RETLW  C0
010F:  RETLW  07
0110:  RETLW  E0
0111:  RETLW  0F
0112:  RETLW  C0
0113:  RETLW  1F
0114:  RETLW  80
0115:  RETLW  3F
0116:  RETLW  80
0117:  RETLW  7F
0118:  RETLW  80
0119:  RETLW  FF
011A:  RETLW  C0
011B:  RETLW  7F
011C:  RETLW  E0
011D:  RETLW  3F
011E:  RETLW  C0
011F:  RETLW  1F
0120:  RETLW  80
0121:  RETLW  0F
0122:  RETLW  80
0123:  RETLW  07
0124:  RETLW  80
0125:  RETLW  03
0126:  RETLW  C0
0127:  RETLW  01
0128:  RETLW  E0
0129:  RETLW  00
012A:  RETLW  C0
012B:  RETLW  00
012C:  RETLW  80
012D:  RETLW  00
012E:  RETLW  80
012F:  RETLW  00
0130:  RETLW  80
0131:  RETLW  00
0132:  RETLW  C0
0133:  RETLW  00
0134:  RETLW  E0
0135:  RETLW  00
0136:  RETLW  C0
0137:  RETLW  00
0138:  RETLW  80
0139:  RETLW  00
013A:  RETLW  80
013B:  RETLW  00
013C:  RETLW  80
013D:  RETLW  00
013E:  RETLW  C0
013F:  RETLW  00
0140:  RETLW  E0
0141:  RETLW  00
0142:  RETLW  C0
0143:  RETLW  00
0144:  RETLW  80
0145:  RETLW  00
0146:  RETLW  80
0147:  RETLW  00
0148:  RETLW  80
0149:  RETLW  F8
014A:  RETLW  C7
014B:  RETLW  F8
014C:  RETLW  E7
014D:  RETLW  D8
014E:  RETLW  C0
014F:  RETLW  D8
0150:  RETLW  80
0151:  RETLW  18
0152:  RETLW  80
0153:  RETLW  00
0154:  RETLW  80
0155:  RETLW  00
0156:  RETLW  C0
0157:  BSF    0A.0
0158:  BCF    0A.1
0159:  BCF    0A.2
015A:  ADDWF  02,F
015B:  RETLW  D8
015C:  RETLW  E0
015D:  RETLW  70
015E:  RETLW  C0
015F:  RETLW  00
0160:  RETLW  80
0161:  RETLW  00
0162:  RETLW  80
0163:  RETLW  00
0164:  RETLW  80
0165:  RETLW  00
0166:  RETLW  C0
0167:  RETLW  00
0168:  RETLW  E0
0169:  RETLW  00
016A:  RETLW  C0
016B:  RETLW  00
016C:  RETLW  80
016D:  RETLW  00
016E:  RETLW  80
016F:  RETLW  00
0170:  RETLW  80
0171:  RETLW  00
0172:  RETLW  C0
0173:  RETLW  00
0174:  RETLW  E0
0175:  RETLW  00
0176:  RETLW  C0
0177:  RETLW  00
0178:  RETLW  80
0179:  RETLW  00
017A:  RETLW  80
017B:  RETLW  00
017C:  RETLW  80
017D:  RETLW  00
017E:  RETLW  C0
017F:  RETLW  00
0180:  RETLW  E0
0181:  RETLW  00
0182:  RETLW  C0
0183:  RETLW  00
0184:  RETLW  80
0185:  RETLW  00
0186:  RETLW  80
0187:  RETLW  00
0188:  RETLW  80
0189:  RETLW  00
018A:  RETLW  C0
018B:  RETLW  00
018C:  RETLW  E0
018D:  RETLW  00
018E:  RETLW  C0
018F:  RETLW  00
0190:  RETLW  80
0191:  RETLW  00
0192:  RETLW  80
0193:  RETLW  00
0194:  RETLW  80
0195:  RETLW  00
0196:  RETLW  C0
0197:  RETLW  00
0198:  RETLW  E0
0199:  RETLW  00
019A:  RETLW  C0
019B:  RETLW  00
019C:  RETLW  80
019D:  RETLW  00
019E:  RETLW  80
019F:  RETLW  00
01A0:  RETLW  80
01A1:  RETLW  00
01A2:  RETLW  C0
01A3:  RETLW  00
01A4:  RETLW  E0
01A5:  RETLW  00
01A6:  RETLW  C0
01A7:  RETLW  00
01A8:  RETLW  80
01A9:  RETLW  00
01AA:  RETLW  80
01AB:  RETLW  00
01AC:  RETLW  80
01AD:  RETLW  00
01AE:  RETLW  C0
01AF:  RETLW  00
01B0:  RETLW  E0
01B1:  RETLW  00
01B2:  RETLW  C0
01B3:  RETLW  00
01B4:  RETLW  80
01B5:  RETLW  00
01B6:  RETLW  80
01B7:  RETLW  00
01B8:  RETLW  80
01B9:  RETLW  00
01BA:  RETLW  C0
01BB:  RETLW  00
01BC:  RETLW  E0
01BD:  RETLW  00
01BE:  RETLW  C0
01BF:  RETLW  00
01C0:  RETLW  80
01C1:  RETLW  00
01C2:  RETLW  80
01C3:  RETLW  00
01C4:  RETLW  80
01C5:  RETLW  00
01C6:  RETLW  C0
01C7:  RETLW  00
01C8:  RETLW  E0
01C9:  RETLW  00
01CA:  RETLW  C0
01CB:  RETLW  00
01CC:  RETLW  80
01CD:  RETLW  00
01CE:  RETLW  80
01CF:  RETLW  F8
01D0:  RETLW  87
01D1:  RETLW  F8
01D2:  RETLW  C7
01D3:  BSF    0A.0
01D4:  BCF    0A.1
01D5:  BCF    0A.2
01D6:  ADDLW  DA
01D7:  BTFSC  03.0
01D8:  INCF   0A,F
01D9:  MOVWF  02
01DA:  RETLW  00
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  00
01DE:  RETLW  18
01DF:  RETLW  00
01E0:  RETLW  18
01E1:  RETLW  00
01E2:  RETLW  F8
01E3:  RETLW  07
01E4:  RETLW  F8
01E5:  RETLW  07
01E6:  RETLW  18
01E7:  RETLW  00
01E8:  RETLW  18
01E9:  RETLW  00
01EA:  RETLW  00
01EB:  RETLW  00
01EC:  RETLW  00
01ED:  RETLW  00
01EE:  RETLW  00
01EF:  RETLW  00
01F0:  RETLW  00
01F1:  RETLW  00
01F2:  RETLW  00
01F3:  RETLW  00
01F4:  RETLW  00
01F5:  RETLW  00
01F6:  RETLW  00
01F7:  RETLW  00
01F8:  RETLW  00
01F9:  RETLW  00
01FA:  RETLW  00
01FB:  RETLW  00
01FC:  RETLW  00
01FD:  RETLW  00
01FE:  RETLW  00
01FF:  RETLW  00
0200:  RETLW  00
0201:  RETLW  00
0202:  RETLW  00
0203:  RETLW  00
0204:  RETLW  00
0205:  RETLW  00
0206:  RETLW  01
0207:  RETLW  00
0208:  RETLW  03
0209:  RETLW  00
020A:  RETLW  07
020B:  RETLW  00
020C:  RETLW  0F
020D:  RETLW  00
020E:  RETLW  1F
020F:  RETLW  00
0210:  RETLW  3F
0211:  RETLW  00
0212:  RETLW  7F
0213:  RETLW  00
0214:  RETLW  FF
0215:  RETLW  00
0216:  RETLW  7F
0217:  RETLW  00
0218:  RETLW  3F
0219:  RETLW  00
021A:  RETLW  1F
021B:  RETLW  00
021C:  RETLW  0F
021D:  RETLW  00
021E:  RETLW  07
021F:  RETLW  00
0220:  RETLW  03
0221:  RETLW  00
0222:  RETLW  01
0223:  RETLW  00
0224:  RETLW  00
0225:  RETLW  00
0226:  RETLW  00
0227:  RETLW  00
0228:  RETLW  00
0229:  RETLW  00
022A:  RETLW  00
022B:  RETLW  00
022C:  RETLW  00
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  00
0230:  RETLW  00
0231:  RETLW  00
0232:  RETLW  00
0233:  RETLW  00
0234:  RETLW  00
0235:  RETLW  00
0236:  RETLW  00
0237:  RETLW  00
0238:  RETLW  00
0239:  RETLW  00
023A:  RETLW  00
023B:  RETLW  00
023C:  RETLW  00
023D:  RETLW  00
023E:  RETLW  00
023F:  RETLW  00
0240:  RETLW  00
0241:  RETLW  00
0242:  RETLW  00
0243:  RETLW  00
0244:  RETLW  00
0245:  RETLW  00
0246:  RETLW  00
0247:  RETLW  00
0248:  RETLW  00
0249:  RETLW  00
024A:  RETLW  00
024B:  RETLW  00
024C:  RETLW  00
024D:  RETLW  00
024E:  RETLW  00
024F:  RETLW  00
0250:  RETLW  00
0251:  RETLW  00
0252:  BCF    0A.0
0253:  BSF    0A.1
0254:  BCF    0A.2
0255:  ADDWF  02,F
0256:  RETLW  F0
0257:  RETLW  01
0258:  RETLW  08
0259:  RETLW  02
025A:  RETLW  F8
025B:  RETLW  03
025C:  RETLW  00
025D:  RETLW  00
025E:  RETLW  48
025F:  RETLW  02
0260:  RETLW  48
0261:  RETLW  02
0262:  RETLW  F8
0263:  RETLW  03
0264:  RETLW  00
0265:  RETLW  00
0266:  RETLW  08
0267:  RETLW  00
0268:  RETLW  08
0269:  RETLW  00
026A:  RETLW  F8
026B:  RETLW  03
026C:  RETLW  00
026D:  RETLW  00
026E:  RETLW  40
026F:  RETLW  00
0270:  RETLW  A0
0271:  RETLW  00
0272:  RETLW  F8
0273:  RETLW  00
0274:  BCF    0A.0
0275:  BSF    0A.1
0276:  BCF    0A.2
0277:  ADDWF  02,F
0278:  RETLW  C8
0279:  RETLW  03
027A:  RETLW  48
027B:  RETLW  02
027C:  RETLW  78
027D:  RETLW  02
027E:  RETLW  00
027F:  RETLW  00
0280:  RETLW  F8
0281:  RETLW  03
0282:  RETLW  08
0283:  RETLW  02
0284:  RETLW  F8
0285:  RETLW  03
0286:  RETLW  00
0287:  RETLW  00
0288:  RETLW  40
0289:  RETLW  00
028A:  RETLW  20
028B:  RETLW  00
028C:  RETLW  F8
028D:  RETLW  03
028E:  RETLW  00
028F:  RETLW  00
0290:  RETLW  78
0291:  RETLW  00
0292:  RETLW  40
0293:  RETLW  00
0294:  RETLW  F8
0295:  RETLW  03
0296:  BCF    0A.0
0297:  BSF    0A.1
0298:  BCF    0A.2
0299:  ADDLW  9D
029A:  BTFSC  03.0
029B:  INCF   0A,F
029C:  MOVWF  02
029D:  RETLW  00
029E:  RETLW  03
029F:  RETLW  00
02A0:  RETLW  03
02A1:  RETLW  00
02A2:  RETLW  0F
02A3:  RETLW  00
02A4:  RETLW  1F
02A5:  RETLW  00
02A6:  RETLW  3F
02A7:  RETLW  00
02A8:  RETLW  3F
02A9:  RETLW  80
02AA:  RETLW  3F
02AB:  RETLW  80
02AC:  RETLW  3F
02AD:  RETLW  80
02AE:  RETLW  3F
02AF:  RETLW  80
02B0:  RETLW  3F
02B1:  RETLW  80
02B2:  RETLW  3F
02B3:  RETLW  80
02B4:  RETLW  3F
02B5:  RETLW  80
02B6:  RETLW  3F
02B7:  RETLW  80
02B8:  RETLW  3F
02B9:  RETLW  00
02BA:  RETLW  3C
02BB:  RETLW  00
02BC:  RETLW  18
02BD:  RETLW  00
02BE:  RETLW  10
02BF:  RETLW  00
02C0:  RETLW  00
02C1:  RETLW  00
02C2:  RETLW  00
02C3:  RETLW  00
02C4:  RETLW  00
02C5:  RETLW  80
02C6:  RETLW  00
02C7:  RETLW  00
02C8:  RETLW  01
02C9:  RETLW  00
02CA:  RETLW  01
02CB:  RETLW  00
02CC:  RETLW  02
02CD:  RETLW  00
02CE:  RETLW  02
02CF:  RETLW  00
02D0:  RETLW  02
02D1:  RETLW  00
02D2:  RETLW  02
02D3:  RETLW  00
02D4:  RETLW  02
02D5:  RETLW  00
02D6:  RETLW  02
02D7:  RETLW  00
02D8:  RETLW  02
02D9:  RETLW  00
02DA:  RETLW  02
02DB:  RETLW  00
02DC:  RETLW  02
02DD:  RETLW  00
02DE:  RETLW  02
02DF:  RETLW  00
02E0:  RETLW  02
02E1:  RETLW  00
02E2:  RETLW  02
02E3:  RETLW  00
02E4:  RETLW  02
02E5:  RETLW  00
02E6:  RETLW  02
02E7:  RETLW  00
02E8:  RETLW  1A
02E9:  RETLW  00
02EA:  RETLW  17
02EB:  RETLW  00
02EC:  RETLW  11
02ED:  RETLW  80
02EE:  RETLW  1C
02EF:  RETLW  40
02F0:  RETLW  3E
02F1:  RETLW  40
02F2:  RETLW  3F
02F3:  RETLW  C0
02F4:  RETLW  1F
02F5:  RETLW  C0
02F6:  RETLW  1F
02F7:  RETLW  C0
02F8:  RETLW  1F
02F9:  RETLW  00
02FA:  RETLW  1F
02FB:  RETLW  00
02FC:  RETLW  03
02FD:  RETLW  00
02FE:  RETLW  03
02FF:  RETLW  00
0300:  RETLW  03
0301:  RETLW  00
0302:  RETLW  03
0303:  RETLW  00
0304:  RETLW  03
0305:  RETLW  00
0306:  RETLW  03
0307:  RETLW  00
0308:  RETLW  03
0309:  RETLW  00
030A:  RETLW  03
030B:  RETLW  00
030C:  RETLW  03
030D:  RETLW  00
030E:  RETLW  03
030F:  RETLW  00
0310:  RETLW  03
0311:  RETLW  00
0312:  RETLW  03
0313:  RETLW  00
0314:  RETLW  03
0315:  BSF    0A.0
0316:  BSF    0A.1
0317:  BCF    0A.2
0318:  ADDWF  02,F
0319:  RETLW  00
031A:  RETLW  FE
031B:  RETLW  00
031C:  RETLW  FE
031D:  RETLW  00
031E:  RETLW  F0
031F:  RETLW  00
0320:  RETLW  EE
0321:  RETLW  00
0322:  RETLW  DE
0323:  RETLW  00
0324:  RETLW  DE
0325:  RETLW  00
0326:  RETLW  DF
0327:  RETLW  80
0328:  RETLW  DF
0329:  RETLW  80
032A:  RETLW  DF
032B:  RETLW  80
032C:  RETLW  DD
032D:  RETLW  80
032E:  RETLW  DD
032F:  RETLW  80
0330:  RETLW  DD
0331:  RETLW  80
0332:  RETLW  DF
0333:  RETLW  80
0334:  RETLW  DF
0335:  RETLW  E0
0336:  RETLW  DF
0337:  RETLW  F0
0338:  RETLW  FF
0339:  RETLW  80
033A:  RETLW  FF
033B:  RETLW  70
033C:  RETLW  FE
033D:  RETLW  E0
033E:  RETLW  FF
033F:  RETLW  C0
0340:  RETLW  FF
0341:  RETLW  00
0342:  RETLW  FF
0343:  RETLW  00
0344:  RETLW  FE
0345:  RETLW  00
0346:  RETLW  FE
0347:  RETLW  00
0348:  RETLW  FC
0349:  RETLW  00
034A:  RETLW  FC
034B:  RETLW  00
034C:  RETLW  FC
034D:  RETLW  00
034E:  RETLW  FC
034F:  RETLW  00
0350:  RETLW  FC
0351:  RETLW  00
0352:  RETLW  FC
0353:  RETLW  00
0354:  RETLW  FC
0355:  RETLW  00
0356:  RETLW  FC
0357:  RETLW  00
0358:  RETLW  FC
0359:  RETLW  00
035A:  RETLW  FC
035B:  RETLW  00
035C:  RETLW  FC
035D:  RETLW  00
035E:  RETLW  FC
035F:  RETLW  00
0360:  RETLW  FC
0361:  RETLW  00
0362:  RETLW  FC
0363:  RETLW  00
0364:  RETLW  E4
0365:  RETLW  00
0366:  RETLW  E8
0367:  RETLW  00
0368:  RETLW  EE
0369:  RETLW  00
036A:  RETLW  FF
036B:  RETLW  80
036C:  RETLW  FF
036D:  RETLW  80
036E:  RETLW  FF
036F:  RETLW  80
0370:  RETLW  FF
0371:  RETLW  80
0372:  RETLW  FF
0373:  RETLW  00
0374:  RETLW  FF
0375:  RETLW  00
0376:  RETLW  E0
0377:  RETLW  00
0378:  RETLW  FC
0379:  RETLW  00
037A:  RETLW  FE
037B:  RETLW  00
037C:  RETLW  FE
037D:  RETLW  00
037E:  RETLW  FE
037F:  RETLW  00
0380:  RETLW  FE
0381:  RETLW  00
0382:  RETLW  FE
0383:  RETLW  00
0384:  RETLW  FE
0385:  RETLW  00
0386:  RETLW  FE
0387:  RETLW  00
0388:  RETLW  FC
0389:  RETLW  00
038A:  RETLW  FC
038B:  RETLW  00
038C:  RETLW  FE
038D:  RETLW  00
038E:  RETLW  FE
038F:  RETLW  00
0390:  RETLW  FE
0391:  BSF    0A.0
0392:  BSF    0A.1
0393:  BCF    0A.2
0394:  ADDLW  98
0395:  BTFSC  03.0
0396:  INCF   0A,F
0397:  MOVWF  02
0398:  RETLW  00
0399:  RETLW  FE
039A:  RETLW  00
039B:  RETLW  FE
039C:  RETLW  00
039D:  RETLW  F0
039E:  RETLW  00
039F:  RETLW  EE
03A0:  RETLW  00
03A1:  RETLW  DE
03A2:  RETLW  00
03A3:  RETLW  DE
03A4:  RETLW  00
03A5:  RETLW  DF
03A6:  RETLW  80
03A7:  RETLW  DF
03A8:  RETLW  80
03A9:  RETLW  DF
03AA:  RETLW  80
03AB:  RETLW  DD
03AC:  RETLW  80
03AD:  RETLW  DD
03AE:  RETLW  80
03AF:  RETLW  DD
03B0:  RETLW  80
03B1:  RETLW  DF
03B2:  RETLW  80
03B3:  RETLW  DF
03B4:  RETLW  00
03B5:  RETLW  DC
03B6:  RETLW  00
03B7:  RETLW  F8
03B8:  RETLW  00
03B9:  RETLW  F0
03BA:  RETLW  00
03BB:  RETLW  E0
03BC:  RETLW  00
03BD:  RETLW  E0
03BE:  RETLW  00
03BF:  RETLW  E0
03C0:  RETLW  00
03C1:  RETLW  E1
03C2:  RETLW  00
03C3:  RETLW  F2
03C4:  RETLW  00
03C5:  RETLW  FE
03C6:  RETLW  00
03C7:  RETLW  FC
03C8:  RETLW  00
03C9:  RETLW  FC
03CA:  RETLW  00
03CB:  RETLW  FC
03CC:  RETLW  00
03CD:  RETLW  FC
03CE:  RETLW  00
03CF:  RETLW  FC
03D0:  RETLW  00
03D1:  RETLW  FC
03D2:  RETLW  00
03D3:  RETLW  FC
03D4:  RETLW  00
03D5:  RETLW  FC
03D6:  RETLW  00
03D7:  RETLW  FC
03D8:  RETLW  00
03D9:  RETLW  FC
03DA:  RETLW  00
03DB:  RETLW  FC
03DC:  RETLW  00
03DD:  RETLW  FC
03DE:  RETLW  00
03DF:  RETLW  FC
03E0:  RETLW  00
03E1:  RETLW  FC
03E2:  RETLW  00
03E3:  RETLW  E4
03E4:  RETLW  00
03E5:  RETLW  E8
03E6:  RETLW  00
03E7:  RETLW  EE
03E8:  RETLW  00
03E9:  RETLW  FF
03EA:  RETLW  80
03EB:  RETLW  FF
03EC:  RETLW  80
03ED:  RETLW  FF
03EE:  RETLW  80
03EF:  RETLW  FF
03F0:  RETLW  80
03F1:  RETLW  FF
03F2:  RETLW  00
03F3:  RETLW  FF
03F4:  RETLW  00
03F5:  RETLW  E0
03F6:  RETLW  00
03F7:  RETLW  FC
03F8:  RETLW  00
03F9:  RETLW  FE
03FA:  RETLW  00
03FB:  RETLW  FE
03FC:  RETLW  00
03FD:  RETLW  FE
03FE:  RETLW  00
03FF:  RETLW  FE
0400:  RETLW  00
0401:  RETLW  FE
0402:  RETLW  00
0403:  RETLW  FE
0404:  RETLW  00
0405:  RETLW  FE
0406:  RETLW  00
0407:  RETLW  FC
0408:  RETLW  00
0409:  RETLW  FC
040A:  RETLW  00
040B:  RETLW  FE
040C:  RETLW  00
040D:  RETLW  FE
040E:  RETLW  00
040F:  RETLW  FE
0410:  BCF    0A.0
0411:  BCF    0A.1
0412:  BSF    0A.2
0413:  ADDWF  02,F
0414:  RETLW  00
0415:  RETLW  03
0416:  RETLW  00
0417:  RETLW  03
0418:  RETLW  00
0419:  RETLW  0F
041A:  RETLW  00
041B:  RETLW  1F
041C:  RETLW  00
041D:  RETLW  3F
041E:  RETLW  00
041F:  RETLW  3F
0420:  RETLW  80
0421:  RETLW  3F
0422:  RETLW  80
0423:  RETLW  3F
0424:  RETLW  80
0425:  RETLW  3F
0426:  RETLW  80
0427:  RETLW  3F
0428:  RETLW  80
0429:  RETLW  3F
042A:  RETLW  80
042B:  RETLW  3F
042C:  RETLW  80
042D:  RETLW  3F
042E:  RETLW  80
042F:  RETLW  3F
0430:  RETLW  00
0431:  RETLW  3C
0432:  RETLW  00
0433:  RETLW  18
0434:  RETLW  00
0435:  RETLW  10
0436:  RETLW  00
0437:  RETLW  00
0438:  RETLW  00
0439:  RETLW  00
043A:  RETLW  00
043B:  RETLW  00
043C:  RETLW  80
043D:  RETLW  00
043E:  RETLW  00
043F:  RETLW  01
0440:  RETLW  00
0441:  RETLW  01
0442:  RETLW  00
0443:  RETLW  02
0444:  RETLW  00
0445:  RETLW  02
0446:  RETLW  00
0447:  RETLW  02
0448:  RETLW  00
0449:  RETLW  02
044A:  RETLW  00
044B:  RETLW  02
044C:  RETLW  00
044D:  RETLW  02
044E:  RETLW  00
044F:  RETLW  02
0450:  RETLW  00
0451:  RETLW  02
0452:  RETLW  00
0453:  RETLW  02
0454:  RETLW  00
0455:  RETLW  02
0456:  RETLW  00
0457:  RETLW  02
0458:  RETLW  00
0459:  RETLW  02
045A:  RETLW  00
045B:  RETLW  02
045C:  RETLW  00
045D:  RETLW  02
045E:  RETLW  00
045F:  RETLW  02
0460:  RETLW  00
0461:  RETLW  02
0462:  RETLW  00
0463:  RETLW  02
0464:  RETLW  00
0465:  RETLW  02
0466:  RETLW  00
0467:  RETLW  0A
0468:  RETLW  00
0469:  RETLW  1E
046A:  RETLW  00
046B:  RETLW  12
046C:  RETLW  80
046D:  RETLW  21
046E:  RETLW  40
046F:  RETLW  3C
0470:  RETLW  40
0471:  RETLW  1F
0472:  RETLW  C0
0473:  RETLW  1F
0474:  RETLW  80
0475:  RETLW  1F
0476:  RETLW  00
0477:  RETLW  1F
0478:  RETLW  00
0479:  RETLW  03
047A:  RETLW  00
047B:  RETLW  03
047C:  RETLW  00
047D:  RETLW  03
047E:  RETLW  00
047F:  RETLW  03
0480:  RETLW  00
0481:  RETLW  03
0482:  RETLW  00
0483:  RETLW  03
0484:  RETLW  00
0485:  RETLW  03
0486:  RETLW  00
0487:  RETLW  03
0488:  RETLW  00
0489:  RETLW  03
048A:  RETLW  00
048B:  RETLW  03
048C:  BCF    0A.0
048D:  BCF    0A.1
048E:  BSF    0A.2
048F:  ADDLW  93
0490:  BTFSC  03.0
0491:  INCF   0A,F
0492:  MOVWF  02
0493:  RETLW  00
0494:  RETLW  FE
0495:  RETLW  00
0496:  RETLW  FE
0497:  RETLW  00
0498:  RETLW  F0
0499:  RETLW  00
049A:  RETLW  EE
049B:  RETLW  00
049C:  RETLW  DE
049D:  RETLW  00
049E:  RETLW  DE
049F:  RETLW  00
04A0:  RETLW  DF
04A1:  RETLW  80
04A2:  RETLW  DF
04A3:  RETLW  80
04A4:  RETLW  DF
04A5:  RETLW  80
04A6:  RETLW  DD
04A7:  RETLW  80
04A8:  RETLW  DD
04A9:  RETLW  80
04AA:  RETLW  DD
04AB:  RETLW  80
04AC:  RETLW  DF
04AD:  RETLW  80
04AE:  RETLW  DF
04AF:  RETLW  E0
04B0:  RETLW  DF
04B1:  RETLW  F0
04B2:  RETLW  FF
04B3:  RETLW  80
04B4:  RETLW  FF
04B5:  RETLW  70
04B6:  RETLW  FE
04B7:  RETLW  E0
04B8:  RETLW  FF
04B9:  RETLW  C0
04BA:  RETLW  FF
04BB:  RETLW  00
04BC:  RETLW  FF
04BD:  RETLW  00
04BE:  RETLW  FE
04BF:  RETLW  00
04C0:  RETLW  FE
04C1:  RETLW  00
04C2:  RETLW  FC
04C3:  RETLW  00
04C4:  RETLW  FC
04C5:  RETLW  00
04C6:  RETLW  FC
04C7:  RETLW  00
04C8:  RETLW  FC
04C9:  RETLW  00
04CA:  RETLW  FC
04CB:  RETLW  00
04CC:  RETLW  FC
04CD:  RETLW  00
04CE:  RETLW  FC
04CF:  RETLW  00
04D0:  RETLW  FC
04D1:  RETLW  00
04D2:  RETLW  FC
04D3:  RETLW  00
04D4:  RETLW  FC
04D5:  RETLW  00
04D6:  RETLW  FC
04D7:  RETLW  00
04D8:  RETLW  FC
04D9:  RETLW  00
04DA:  RETLW  FC
04DB:  RETLW  00
04DC:  RETLW  FC
04DD:  RETLW  00
04DE:  RETLW  FC
04DF:  RETLW  00
04E0:  RETLW  FC
04E1:  RETLW  00
04E2:  RETLW  FC
04E3:  RETLW  00
04E4:  RETLW  FC
04E5:  RETLW  00
04E6:  RETLW  F4
04E7:  RETLW  00
04E8:  RETLW  E0
04E9:  RETLW  00
04EA:  RETLW  EC
04EB:  RETLW  00
04EC:  RETLW  FE
04ED:  RETLW  80
04EE:  RETLW  FF
04EF:  RETLW  80
04F0:  RETLW  FF
04F1:  RETLW  80
04F2:  RETLW  FF
04F3:  RETLW  00
04F4:  RETLW  EE
04F5:  RETLW  00
04F6:  RETLW  E0
04F7:  RETLW  00
04F8:  RETLW  FE
04F9:  RETLW  00
04FA:  RETLW  FE
04FB:  RETLW  00
04FC:  RETLW  FE
04FD:  RETLW  00
04FE:  RETLW  FE
04FF:  RETLW  00
0500:  RETLW  FE
0501:  RETLW  00
0502:  RETLW  FC
0503:  RETLW  00
0504:  RETLW  FC
0505:  RETLW  00
0506:  RETLW  FE
0507:  RETLW  00
0508:  RETLW  FE
0509:  RETLW  00
050A:  RETLW  FE
050B:  BSF    0A.0
050C:  BCF    0A.1
050D:  BSF    0A.2
050E:  ADDWF  02,F
050F:  RETLW  00
0510:  RETLW  FE
0511:  RETLW  00
0512:  RETLW  FE
0513:  RETLW  00
0514:  RETLW  F0
0515:  RETLW  00
0516:  RETLW  EE
0517:  RETLW  00
0518:  RETLW  DE
0519:  RETLW  00
051A:  RETLW  DE
051B:  RETLW  00
051C:  RETLW  DF
051D:  RETLW  80
051E:  RETLW  DF
051F:  RETLW  80
0520:  RETLW  DF
0521:  RETLW  80
0522:  RETLW  DD
0523:  RETLW  80
0524:  RETLW  DD
0525:  RETLW  80
0526:  RETLW  DD
0527:  RETLW  80
0528:  RETLW  DF
0529:  RETLW  80
052A:  RETLW  DF
052B:  RETLW  00
052C:  RETLW  DC
052D:  RETLW  00
052E:  RETLW  F8
052F:  RETLW  00
0530:  RETLW  F0
0531:  RETLW  00
0532:  RETLW  E0
0533:  RETLW  00
0534:  RETLW  E0
0535:  RETLW  00
0536:  RETLW  E0
0537:  RETLW  00
0538:  RETLW  E1
0539:  RETLW  00
053A:  RETLW  F2
053B:  RETLW  00
053C:  RETLW  FE
053D:  RETLW  00
053E:  RETLW  FC
053F:  RETLW  00
0540:  RETLW  FC
0541:  RETLW  00
0542:  RETLW  FC
0543:  RETLW  00
0544:  RETLW  FC
0545:  RETLW  00
0546:  RETLW  FC
0547:  RETLW  00
0548:  RETLW  FC
0549:  RETLW  00
054A:  RETLW  FC
054B:  RETLW  00
054C:  RETLW  FC
054D:  RETLW  00
054E:  RETLW  FC
054F:  RETLW  00
0550:  RETLW  FC
0551:  RETLW  00
0552:  RETLW  FC
0553:  RETLW  00
0554:  RETLW  FC
0555:  RETLW  00
0556:  RETLW  FC
0557:  RETLW  00
0558:  RETLW  FC
0559:  RETLW  00
055A:  RETLW  FC
055B:  RETLW  00
055C:  RETLW  FC
055D:  RETLW  00
055E:  RETLW  FC
055F:  RETLW  00
0560:  RETLW  FC
0561:  RETLW  00
0562:  RETLW  F4
0563:  RETLW  00
0564:  RETLW  E0
0565:  RETLW  00
0566:  RETLW  EC
0567:  RETLW  00
0568:  RETLW  FE
0569:  RETLW  80
056A:  RETLW  FF
056B:  RETLW  80
056C:  RETLW  FF
056D:  RETLW  80
056E:  RETLW  FF
056F:  RETLW  00
0570:  RETLW  EE
0571:  RETLW  00
0572:  RETLW  E0
0573:  RETLW  00
0574:  RETLW  FE
0575:  RETLW  00
0576:  RETLW  FE
0577:  RETLW  00
0578:  RETLW  FE
0579:  RETLW  00
057A:  RETLW  FE
057B:  RETLW  00
057C:  RETLW  FE
057D:  RETLW  00
057E:  RETLW  FC
057F:  RETLW  00
0580:  RETLW  FC
0581:  RETLW  00
0582:  RETLW  FE
0583:  RETLW  00
0584:  RETLW  FE
0585:  RETLW  00
0586:  RETLW  FE
*
0679:  MOVLW  20
067A:  BSF    03.5
067B:  MOVWF  28
067C:  CLRF   24
067D:  CLRF   25
067E:  CLRF   26
067F:  CLRF   27
0680:  MOVF   7E,W
0681:  MOVWF  7A
0682:  MOVF   7D,W
0683:  MOVWF  79
0684:  MOVF   7C,W
0685:  MOVWF  78
0686:  MOVF   7B,W
0687:  MOVWF  77
0688:  BCF    03.5
0689:  BCF    03.0
068A:  BTFSS  77.0
068B:  GOTO   69C
068C:  BSF    03.5
068D:  MOVF   20,W
068E:  ADDWF  24,F
068F:  MOVF   21,W
0690:  BTFSC  03.0
0691:  INCFSZ 21,W
0692:  ADDWF  25,F
0693:  MOVF   22,W
0694:  BTFSC  03.0
0695:  INCFSZ 22,W
0696:  ADDWF  26,F
0697:  MOVF   23,W
0698:  BTFSC  03.0
0699:  INCFSZ 23,W
069A:  ADDWF  27,F
069B:  BCF    03.5
069C:  BSF    03.5
069D:  RRF    27,F
069E:  RRF    26,F
069F:  RRF    25,F
06A0:  RRF    24,F
06A1:  RRF    7A,F
06A2:  RRF    79,F
06A3:  RRF    78,F
06A4:  RRF    77,F
06A5:  DECFSZ 28,F
06A6:  GOTO   6A9
06A7:  GOTO   6AB
06A8:  BCF    03.5
06A9:  BCF    03.5
06AA:  GOTO   689
06AB:  BCF    03.5
*
07BA:  MOVF   5B,W
07BB:  CLRF   78
07BC:  SUBWF  5A,W
07BD:  BTFSC  03.0
07BE:  GOTO   7C2
07BF:  MOVF   5A,W
07C0:  MOVWF  77
07C1:  GOTO   7CE
07C2:  CLRF   77
07C3:  MOVLW  08
07C4:  MOVWF  5C
07C5:  RLF    5A,F
07C6:  RLF    77,F
07C7:  MOVF   5B,W
07C8:  SUBWF  77,W
07C9:  BTFSC  03.0
07CA:  MOVWF  77
07CB:  RLF    78,F
07CC:  DECFSZ 5C,F
07CD:  GOTO   7C5
07CE:  RETURN
07CF:  CLRF   77
07D0:  CLRF   78
07D1:  MOVF   5A,W
07D2:  BCF    03.0
07D3:  BTFSC  5B.0
07D4:  ADDWF  77,F
07D5:  RRF    77,F
07D6:  RRF    78,F
07D7:  BTFSC  5B.1
07D8:  ADDWF  77,F
07D9:  RRF    77,F
07DA:  RRF    78,F
07DB:  BTFSC  5B.2
07DC:  ADDWF  77,F
07DD:  RRF    77,F
07DE:  RRF    78,F
07DF:  BTFSC  5B.3
07E0:  ADDWF  77,F
07E1:  RRF    77,F
07E2:  RRF    78,F
07E3:  BTFSC  5B.4
07E4:  ADDWF  77,F
07E5:  RRF    77,F
07E6:  RRF    78,F
07E7:  BTFSC  5B.5
07E8:  ADDWF  77,F
07E9:  RRF    77,F
07EA:  RRF    78,F
07EB:  BTFSC  5B.6
07EC:  ADDWF  77,F
07ED:  RRF    77,F
07EE:  RRF    78,F
07EF:  BTFSC  5B.7
07F0:  ADDWF  77,F
07F1:  RRF    77,F
07F2:  RRF    78,F
07F3:  RETURN
*
0A98:  BTFSC  03.1
0A99:  GOTO   29D
0A9A:  MOVLW  5E
0A9B:  MOVWF  04
0A9C:  BCF    03.7
0A9D:  CLRF   77
0A9E:  CLRF   78
0A9F:  CLRF   79
0AA0:  CLRF   7A
0AA1:  CLRF   5E
0AA2:  CLRF   5F
0AA3:  CLRF   60
0AA4:  CLRF   61
0AA5:  MOVF   5D,W
0AA6:  IORWF  5C,W
0AA7:  IORWF  5B,W
0AA8:  IORWF  5A,W
0AA9:  BTFSC  03.2
0AAA:  GOTO   2DB
0AAB:  MOVLW  20
0AAC:  MOVWF  62
0AAD:  BCF    03.0
0AAE:  RLF    56,F
0AAF:  RLF    57,F
0AB0:  RLF    58,F
0AB1:  RLF    59,F
0AB2:  RLF    5E,F
0AB3:  RLF    5F,F
0AB4:  RLF    60,F
0AB5:  RLF    61,F
0AB6:  MOVF   5D,W
0AB7:  SUBWF  61,W
0AB8:  BTFSS  03.2
0AB9:  GOTO   2C4
0ABA:  MOVF   5C,W
0ABB:  SUBWF  60,W
0ABC:  BTFSS  03.2
0ABD:  GOTO   2C4
0ABE:  MOVF   5B,W
0ABF:  SUBWF  5F,W
0AC0:  BTFSS  03.2
0AC1:  GOTO   2C4
0AC2:  MOVF   5A,W
0AC3:  SUBWF  5E,W
0AC4:  BTFSS  03.0
0AC5:  GOTO   2D5
0AC6:  MOVF   5A,W
0AC7:  SUBWF  5E,F
0AC8:  MOVF   5B,W
0AC9:  BTFSS  03.0
0ACA:  INCFSZ 5B,W
0ACB:  SUBWF  5F,F
0ACC:  MOVF   5C,W
0ACD:  BTFSS  03.0
0ACE:  INCFSZ 5C,W
0ACF:  SUBWF  60,F
0AD0:  MOVF   5D,W
0AD1:  BTFSS  03.0
0AD2:  INCFSZ 5D,W
0AD3:  SUBWF  61,F
0AD4:  BSF    03.0
0AD5:  RLF    77,F
0AD6:  RLF    78,F
0AD7:  RLF    79,F
0AD8:  RLF    7A,F
0AD9:  DECFSZ 62,F
0ADA:  GOTO   2AD
0ADB:  MOVF   5E,W
0ADC:  MOVWF  00
0ADD:  INCF   04,F
0ADE:  MOVF   5F,W
0ADF:  MOVWF  00
0AE0:  INCF   04,F
0AE1:  MOVF   60,W
0AE2:  MOVWF  00
0AE3:  INCF   04,F
0AE4:  MOVF   61,W
0AE5:  MOVWF  00
0AE6:  BCF    0A.3
0AE7:  BSF    0A.4
0AE8:  GOTO   5F5 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES MCLR 
.................... #FUSES NOPROTECT 
.................... #FUSES NOCPD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO 
.................... #FUSES FCMEN 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG 
.................... //configuration bits: 2007-2CE2(); 2008-0700(FFFF) 
....................  
.................... #use delay(crystal=20000000) 
*
0A84:  MOVLW  56
0A85:  MOVWF  04
0A86:  BCF    03.7
0A87:  MOVF   00,W
0A88:  BTFSC  03.2
0A89:  GOTO   297
0A8A:  MOVLW  06
0A8B:  MOVWF  78
0A8C:  CLRF   77
0A8D:  DECFSZ 77,F
0A8E:  GOTO   28D
0A8F:  DECFSZ 78,F
0A90:  GOTO   28C
0A91:  MOVLW  7B
0A92:  MOVWF  77
0A93:  DECFSZ 77,F
0A94:  GOTO   293
0A95:  DECFSZ 00,F
0A96:  GOTO   28A
0A97:  RETURN
.................... #use FIXED_IO( E_outputs=PIN_E2,PIN_E1,PIN_E0 ) 
.................... #use rs232(baud=19200,parity=E,xmit=PIN_C6,rcv=PIN_C7,bits=8,stop=1,stream=PORT1) 
*
0A6C:  MOVLW  08
0A6D:  MOVWF  78
0A6E:  CLRF   57
0A6F:  MOVF   56,W
0A70:  MOVWF  77
0A71:  MOVF   77,W
0A72:  XORWF  57,F
0A73:  RRF    77,F
0A74:  DECFSZ 78,F
0A75:  GOTO   271
0A76:  BTFSS  0C.4
0A77:  GOTO   276
0A78:  MOVLW  FE
0A79:  BSF    03.5
0A7A:  ANDWF  18,F
0A7B:  BCF    03.5
0A7C:  BTFSS  57.0
0A7D:  GOTO   281
0A7E:  BSF    03.5
0A7F:  BSF    18.0
0A80:  BCF    03.5
0A81:  MOVF   56,W
0A82:  MOVWF  19
0A83:  RETURN
....................  
.................... #OPT 1 
....................  
.................... #define MAX_SECTION 60 
.................... #define MODE_A 2 
.................... #define MODE_B 3 
.................... #define MODE_C 4 
.................... #define MODE_D 5 
....................  
.................... //variables for CCP1 interrupt 
.................... int8 timer1_overflow; 
.................... int32 sigHall_timer; 
.................... //variables for display routine 
.................... int8 circle_trigger; 
.................... int8 section_trigger; 
.................... int8 section_count; 
.................... int16 section_timer; 
.................... signed int8 tuning; 
.................... //variables for RB interrupt, RF input 
.................... BYTE port_b, last_b; 
.................... int8 mode, smode; 
.................... //variables for date, time values 
.................... int8 day, month, year, dow; 
.................... int8 hour, min, sec; 
.................... int8 tick, digit_sec; 
.................... //variables for digital clock 
.................... int8 hour_h, hour_l, min_h, min_l, anal_hour; 
.................... int8 day_h, day_l, month_h, month_l; 
.................... //variables for MODE_D, running letters 
.................... int8 pled_position; 
.................... signed int8 pled_direction, pled_status; 
.................... int16 pled_count; 
.................... //variables for RS232 communication 
.................... int8 rc, rs232_status; 
....................  
.................... //leds' values at one moment 
.................... struct 
.................... { 
.................... 	int16 blue; 
.................... 	int16 red; 
.................... 	int16 green; 
.................... } rgb_bits; 
....................  
.................... //number to display at upper position (hour-minute) 
.................... const int16 number_upper[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x0040, 0x0020, 0x03F8}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x0248, 0x0248, 0x03F8}, // 3 
.................... 	{0x0078, 0x0040, 0x03F8}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x03F8, 0x0248, 0x03C8}, // 6 
.................... 	{0x0008, 0x0008, 0x03F8}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x0278, 0x0248, 0x03F8}  // 9 
.................... }; 
.................... //number to display at lower position (day-month) 
.................... const int16 number_lower[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x03F8, 0x0100, 0x0080}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x03F8, 0x0248, 0x0248}, // 3 
.................... 	{0x03F8, 0x0040, 0x03C0}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x0278, 0x0248, 0x03F8}, // 6 
.................... 	{0x03F8, 0x0200, 0x0200}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x03F8, 0x0248, 0x03C8}  // 9 
.................... }; 
....................  
.................... //data for MODE_C, FPT logo 
.................... const int16 fpt_blue[60] =  
.................... { 
.................... 	0xE000,0xC000,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000,0x8000,0x8000, 
.................... 	0x8000,0xC000,0xE000,0xC000,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000, 
.................... 	0x8000,0x8000,0x8001,0xC003,0xE007,0xC00F,0x801F,0x803F,0x807F,0xC0FF, 
.................... 	0xE07F,0xC03F,0x801F,0x800F,0x8007,0xC003,0xE001,0xC000,0x8000,0x8000, 
.................... 	0x8000,0xC000,0xE000,0xC000,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000, 
.................... 	0x8000,0x8000,0x8000,0xC7F8,0xE7F8,0xC0D8,0x80D8,0x8018,0x8000,0xC000 
.................... }; 
....................  
.................... const int16 fpt_red[60] =  
.................... { 
.................... 	0xE0D8,0xC070,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000,0x8000,0x8000, 
.................... 	0x8000,0xC000,0xE000,0xC000,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000, 
.................... 	0x8000,0x8000,0x8000,0xC000,0xE000,0xC000,0x8000,0x8000,0x8000,0xC000, 
.................... 	0xE000,0xC000,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000,0x8000,0x8000, 
.................... 	0x8000,0xC000,0xE000,0xC000,0x8000,0x8000,0x8000,0xC000,0xE000,0xC000, 
.................... 	0x8000,0x8000,0x8000,0xC000,0xE000,0xC000,0x8000,0x8000,0x87F8,0xC7F8 
.................... }; 
....................  
.................... const int16 fpt_green[60] =  
.................... { 
.................... 	0x0000,0x0000,0x0018,0x0018,0x07F8,0x07F8,0x0018,0x0018,0x0000,0x0000, 
.................... 	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 
.................... 	0x0000,0x0000,0x0001,0x0003,0x0007,0x000F,0x001F,0x003F,0x007F,0x00FF, 
.................... 	0x007F,0x003F,0x001F,0x000F,0x0007,0x0003,0x0001,0x0000,0x0000,0x0000, 
.................... 	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, 
.................... 	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000 
.................... }; 
....................  
.................... //data for MODE_D, running letters 
.................... const int16 pled_inward[15] =  
.................... { 
.................... 	0x01F0, 0x0208, 0x03F8, 0x0000, 
.................... 	0x0248, 0x0248, 0x03F8, 0x0000, 
.................... 	0x0008, 0x0008, 0x03F8, 0x0000, 
.................... 	0x0040, 0x00A0, 0x00F8 
.................... }; 
....................  
.................... const int16 year_2014[15] =  
.................... { 
.................... 	0x03C8, 0x0248, 0x0278, 0x0000, 
.................... 	0x03F8, 0x0208, 0x03F8, 0x0000, 
.................... 	0x0040, 0x0020, 0x03F8, 0x0000, 
.................... 	0x0078, 0x0040, 0x03F8 
.................... }; 
....................  
.................... const int16 flappy1_blue[60] = 
.................... { 
.................... 	0x0300,0x0300,0x0F00,0x1F00,0x3F00,0x3F00,0x3F80,0x3F80,0x3F80,0x3F80, 
.................... 	0x3F80,0x3F80,0x3F80,0x3F80,0x3C00,0x1800,0x1000,0x0000,0x0000,0x0000, 
.................... 	0x0080,0x0100,0x0100,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200, 
.................... 	0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x1A00,0x1700,0x1100, 
.................... 	0x1C80,0x3E40,0x3F40,0x1FC0,0x1FC0,0x1FC0,0x1F00,0x0300,0x0300,0x0300, 
.................... 	0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300 
.................... }; 
....................  
.................... const int16 flappy1_red[60] = 
.................... { 
.................... 	0xFE00,0xFE00,0xF000,0xEE00,0xDE00,0xDE00,0xDF00,0xDF80,0xDF80,0xDD80, 
.................... 	0xDD80,0xDD80,0xDF80,0xDF80,0xDFE0,0xFFF0,0xFF80,0xFE70,0xFFE0,0xFFC0, 
.................... 	0xFF00,0xFE00,0xFE00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00, 
.................... 	0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xE400,0xE800,0xEE00, 
.................... 	0xFF00,0xFF80,0xFF80,0xFF80,0xFF80,0xFF00,0xE000,0xFC00,0xFE00,0xFE00, 
.................... 	0xFE00,0xFE00,0xFE00,0xFE00,0xFE00,0xFC00,0xFC00,0xFE00,0xFE00,0xFE00 
.................... }; 
....................  
.................... const int16 flappy1_green[60] = 
.................... { 
.................... 	0xFE00,0xFE00,0xF000,0xEE00,0xDE00,0xDE00,0xDF00,0xDF80,0xDF80,0xDD80, 
.................... 	0xDD80,0xDD80,0xDF80,0xDF80,0xDC00,0xF800,0xF000,0xE000,0xE000,0xE000, 
.................... 	0xE100,0xF200,0xFE00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00, 
.................... 	0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xE400,0xE800,0xEE00, 
.................... 	0xFF00,0xFF80,0xFF80,0xFF80,0xFF80,0xFF00,0xE000,0xFC00,0xFE00,0xFE00, 
.................... 	0xFE00,0xFE00,0xFE00,0xFE00,0xFE00,0xFC00,0xFC00,0xFE00,0xFE00,0xFE00 
.................... }; 
....................  
.................... const int16 flappy2_blue[60] = 
.................... { 
.................... 	0x0300,0x0300,0x0F00,0x1F00,0x3F00,0x3F00,0x3F80,0x3F80,0x3F80,0x3F80, 
.................... 	0x3F80,0x3F80,0x3F80,0x3F80,0x3C00,0x1800,0x1000,0x0000,0x0000,0x0000, 
.................... 	0x0080,0x0100,0x0100,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200, 
.................... 	0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200,0x0200, 
.................... 	0x0200,0x0A00,0x1E00,0x1200,0x2180,0x3C40,0x1F40,0x1FC0,0x1F80,0x1F00, 
.................... 	0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300,0x0300 
.................... }; 
....................  
.................... const int16 flappy2_red[60] = 
.................... { 
.................... 	0xFE00,0xFE00,0xF000,0xEE00,0xDE00,0xDE00,0xDF00,0xDF80,0xDF80,0xDD80, 
.................... 	0xDD80,0xDD80,0xDF80,0xDF80,0xDFE0,0xFFF0,0xFF80,0xFE70,0xFFE0,0xFFC0, 
.................... 	0xFF00,0xFE00,0xFE00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00, 
.................... 	0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00, 
.................... 	0xFC00,0xF400,0xE000,0xEC00,0xFE00,0xFF80,0xFF80,0xFF80,0xEE00,0xE000, 
.................... 	0xFE00,0xFE00,0xFE00,0xFE00,0xFE00,0xFC00,0xFC00,0xFE00,0xFE00,0xFE00 
.................... }; 
.................... const int16 flappy2_green[60] = 
.................... { 
.................... 	0xFE00,0xFE00,0xF000,0xEE00,0xDE00,0xDE00,0xDF00,0xDF80,0xDF80,0xDD80, 
.................... 	0xDD80,0xDD80,0xDF80,0xDF80,0xDC00,0xF800,0xF000,0xE000,0xE000,0xE000, 
.................... 	0xE100,0xF200,0xFE00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00, 
.................... 	0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00,0xFC00, 
.................... 	0xFC00,0xF400,0xE000,0xEC00,0xFE00,0xFF80,0xFF80,0xFF80,0xEE00,0xE000, 
.................... 	0xFE00,0xFE00,0xFE00,0xFE00,0xFE00,0xFC00,0xFC00,0xFE00,0xFE00,0xFE00 
.................... }; 
....................  
.................... #include "24256.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC256 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   32768 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    while(status==1) 
....................    { 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    } 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... #include "74595.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for latch 74HC595 - Base on source code from CCS library         || 
.................... //   Last edited: 1 - April - 2014                                           || 
.................... //                                                                           || 
.................... // void latch_write(int16 blue, int16 red, int16 green)                      || 
.................... //                  Writes 48 bits to the 6 chips                            || 
.................... //                                                                           || 
.................... // void latch_ClearAll()      turn off all the leds                          || 
.................... //                                                                           || 
.................... // void latch_SetAll()        turn on all the leds                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #IFNDEF EXP_OUT_ENABLE 
....................  
.................... #define EXP_OUT_ENABLE  PIN_E2 
.................... #define EXP_OUT_CLOCK   PIN_E1 
.................... #define EXP_OUT_DO      PIN_E0 
.................... #define NUMBER_OF_74595 6 
....................  
.................... #ENDIF 
....................  
.................... #INLINE 
.................... void latch_write(int16 blue, int16 red, int16 green) 
.................... { 
.................... 	BYTE i; 
.................... 	output_low(EXP_OUT_CLOCK); 
*
1063:  MOVLW  E8
1064:  BSF    03.5
1065:  MOVWF  09
1066:  BCF    03.5
1067:  BCF    09.1
*
1290:  MOVLW  E8
1291:  BSF    03.5
1292:  MOVWF  09
1293:  BCF    03.5
1294:  BCF    09.1
*
1629:  MOVLW  E8
162A:  BSF    03.5
162B:  MOVWF  09
162C:  BCF    03.5
162D:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1068:  MOVLW  E8
1069:  BSF    03.5
106A:  MOVWF  09
106B:  BCF    03.5
106C:  BCF    09.2
*
1295:  MOVLW  E8
1296:  BSF    03.5
1297:  MOVWF  09
1298:  BCF    03.5
1299:  BCF    09.2
*
162E:  MOVLW  E8
162F:  BSF    03.5
1630:  MOVWF  09
1631:  BCF    03.5
1632:  BCF    09.2
....................   	 
.................... 	for(i = 16; i > 0; i--) 
*
106D:  MOVLW  10
106E:  MOVWF  5C
106F:  MOVF   5C,F
1070:  BTFSC  03.2
1071:  GOTO   0D7
*
129A:  MOVLW  10
129B:  MOVWF  5C
129C:  MOVF   5C,F
129D:  BTFSC  03.2
129E:  GOTO   304
*
1633:  MOVLW  10
1634:  MOVWF  5C
1635:  MOVF   5C,F
1636:  BTFSC  03.2
1637:  GOTO   69D
.................... 	{ 
.................... 		if (circle_trigger == 1) break; 
*
1072:  DECFSZ 2C,W
1073:  GOTO   075
1074:  GOTO   0D7
*
129F:  DECFSZ 2C,W
12A0:  GOTO   2A2
12A1:  GOTO   304
*
1638:  DECFSZ 2C,W
1639:  GOTO   63B
163A:  GOTO   69D
.................... 		//write green led first, the first bit output will be on the last latch 
.................... 		if(green & 0x01) 
*
1075:  MOVF   5A,W
1076:  ANDLW  01
1077:  MOVWF  77
1078:  CLRF   7A
1079:  MOVF   77,W
107A:  IORWF  7A,W
107B:  BTFSC  03.2
107C:  GOTO   083
*
12A2:  MOVF   5A,W
12A3:  ANDLW  01
12A4:  MOVWF  77
12A5:  CLRF   7A
12A6:  MOVF   77,W
12A7:  IORWF  7A,W
12A8:  BTFSC  03.2
12A9:  GOTO   2B0
*
163B:  MOVF   5A,W
163C:  ANDLW  01
163D:  MOVWF  77
163E:  CLRF   7A
163F:  MOVF   77,W
1640:  IORWF  7A,W
1641:  BTFSC  03.2
1642:  GOTO   649
.................... 			output_high(EXP_OUT_DO); 
*
107D:  MOVLW  E8
107E:  BSF    03.5
107F:  MOVWF  09
1080:  BCF    03.5
1081:  BSF    09.0
1082:  GOTO   088
*
12AA:  MOVLW  E8
12AB:  BSF    03.5
12AC:  MOVWF  09
12AD:  BCF    03.5
12AE:  BSF    09.0
12AF:  GOTO   2B5
*
1643:  MOVLW  E8
1644:  BSF    03.5
1645:  MOVWF  09
1646:  BCF    03.5
1647:  BSF    09.0
1648:  GOTO   64E
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
1083:  MOVLW  E8
1084:  BSF    03.5
1085:  MOVWF  09
1086:  BCF    03.5
1087:  BCF    09.0
*
12B0:  MOVLW  E8
12B1:  BSF    03.5
12B2:  MOVWF  09
12B3:  BCF    03.5
12B4:  BCF    09.0
*
1649:  MOVLW  E8
164A:  BSF    03.5
164B:  MOVWF  09
164C:  BCF    03.5
164D:  BCF    09.0
.................... 		shift_right(&green, 2, 0); 
*
1088:  BCF    03.0
1089:  RRF    5B,F
108A:  RRF    5A,F
*
12B5:  BCF    03.0
12B6:  RRF    5B,F
12B7:  RRF    5A,F
*
164E:  BCF    03.0
164F:  RRF    5B,F
1650:  RRF    5A,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
108B:  MOVLW  E8
108C:  BSF    03.5
108D:  MOVWF  09
108E:  BCF    03.5
108F:  BSF    09.1
*
12B8:  MOVLW  E8
12B9:  BSF    03.5
12BA:  MOVWF  09
12BB:  BCF    03.5
12BC:  BSF    09.1
*
1651:  MOVLW  E8
1652:  BSF    03.5
1653:  MOVWF  09
1654:  BCF    03.5
1655:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
1090:  MOVLW  E8
1091:  BSF    03.5
1092:  MOVWF  09
1093:  BCF    03.5
1094:  BCF    09.1
*
12BD:  MOVLW  E8
12BE:  BSF    03.5
12BF:  MOVWF  09
12C0:  BCF    03.5
12C1:  BCF    09.1
*
1656:  MOVLW  E8
1657:  BSF    03.5
1658:  MOVWF  09
1659:  BCF    03.5
165A:  BCF    09.1
.................... 	  	 
.................... 		//output red 
.................... 		if(red & 0x01) 
*
1095:  MOVF   58,W
1096:  ANDLW  01
1097:  MOVWF  77
1098:  CLRF   7A
1099:  MOVF   77,W
109A:  IORWF  7A,W
109B:  BTFSC  03.2
109C:  GOTO   0A3
*
12C2:  MOVF   58,W
12C3:  ANDLW  01
12C4:  MOVWF  77
12C5:  CLRF   7A
12C6:  MOVF   77,W
12C7:  IORWF  7A,W
12C8:  BTFSC  03.2
12C9:  GOTO   2D0
*
165B:  MOVF   58,W
165C:  ANDLW  01
165D:  MOVWF  77
165E:  CLRF   7A
165F:  MOVF   77,W
1660:  IORWF  7A,W
1661:  BTFSC  03.2
1662:  GOTO   669
.................... 			output_high(EXP_OUT_DO); 
*
109D:  MOVLW  E8
109E:  BSF    03.5
109F:  MOVWF  09
10A0:  BCF    03.5
10A1:  BSF    09.0
10A2:  GOTO   0A8
*
12CA:  MOVLW  E8
12CB:  BSF    03.5
12CC:  MOVWF  09
12CD:  BCF    03.5
12CE:  BSF    09.0
12CF:  GOTO   2D5
*
1663:  MOVLW  E8
1664:  BSF    03.5
1665:  MOVWF  09
1666:  BCF    03.5
1667:  BSF    09.0
1668:  GOTO   66E
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
10A3:  MOVLW  E8
10A4:  BSF    03.5
10A5:  MOVWF  09
10A6:  BCF    03.5
10A7:  BCF    09.0
*
12D0:  MOVLW  E8
12D1:  BSF    03.5
12D2:  MOVWF  09
12D3:  BCF    03.5
12D4:  BCF    09.0
*
1669:  MOVLW  E8
166A:  BSF    03.5
166B:  MOVWF  09
166C:  BCF    03.5
166D:  BCF    09.0
.................... 		shift_right(&red, 2, 0); 
*
10A8:  BCF    03.0
10A9:  RRF    59,F
10AA:  RRF    58,F
*
12D5:  BCF    03.0
12D6:  RRF    59,F
12D7:  RRF    58,F
*
166E:  BCF    03.0
166F:  RRF    59,F
1670:  RRF    58,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10AB:  MOVLW  E8
10AC:  BSF    03.5
10AD:  MOVWF  09
10AE:  BCF    03.5
10AF:  BSF    09.1
*
12D8:  MOVLW  E8
12D9:  BSF    03.5
12DA:  MOVWF  09
12DB:  BCF    03.5
12DC:  BSF    09.1
*
1671:  MOVLW  E8
1672:  BSF    03.5
1673:  MOVWF  09
1674:  BCF    03.5
1675:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10B0:  MOVLW  E8
10B1:  BSF    03.5
10B2:  MOVWF  09
10B3:  BCF    03.5
10B4:  BCF    09.1
*
12DD:  MOVLW  E8
12DE:  BSF    03.5
12DF:  MOVWF  09
12E0:  BCF    03.5
12E1:  BCF    09.1
*
1676:  MOVLW  E8
1677:  BSF    03.5
1678:  MOVWF  09
1679:  BCF    03.5
167A:  BCF    09.1
.................... 	  	 
.................... 		//output blue 
.................... 		if(blue & 0x01) 
*
10B5:  MOVF   56,W
10B6:  ANDLW  01
10B7:  MOVWF  77
10B8:  CLRF   7A
10B9:  MOVF   77,W
10BA:  IORWF  7A,W
10BB:  BTFSC  03.2
10BC:  GOTO   0C3
*
12E2:  MOVF   56,W
12E3:  ANDLW  01
12E4:  MOVWF  77
12E5:  CLRF   7A
12E6:  MOVF   77,W
12E7:  IORWF  7A,W
12E8:  BTFSC  03.2
12E9:  GOTO   2F0
*
167B:  MOVF   56,W
167C:  ANDLW  01
167D:  MOVWF  77
167E:  CLRF   7A
167F:  MOVF   77,W
1680:  IORWF  7A,W
1681:  BTFSC  03.2
1682:  GOTO   689
.................... 			output_high(EXP_OUT_DO); 
*
10BD:  MOVLW  E8
10BE:  BSF    03.5
10BF:  MOVWF  09
10C0:  BCF    03.5
10C1:  BSF    09.0
10C2:  GOTO   0C8
*
12EA:  MOVLW  E8
12EB:  BSF    03.5
12EC:  MOVWF  09
12ED:  BCF    03.5
12EE:  BSF    09.0
12EF:  GOTO   2F5
*
1683:  MOVLW  E8
1684:  BSF    03.5
1685:  MOVWF  09
1686:  BCF    03.5
1687:  BSF    09.0
1688:  GOTO   68E
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
10C3:  MOVLW  E8
10C4:  BSF    03.5
10C5:  MOVWF  09
10C6:  BCF    03.5
10C7:  BCF    09.0
*
12F0:  MOVLW  E8
12F1:  BSF    03.5
12F2:  MOVWF  09
12F3:  BCF    03.5
12F4:  BCF    09.0
*
1689:  MOVLW  E8
168A:  BSF    03.5
168B:  MOVWF  09
168C:  BCF    03.5
168D:  BCF    09.0
.................... 		shift_right(&blue, 2, 0); 
*
10C8:  BCF    03.0
10C9:  RRF    57,F
10CA:  RRF    56,F
*
12F5:  BCF    03.0
12F6:  RRF    57,F
12F7:  RRF    56,F
*
168E:  BCF    03.0
168F:  RRF    57,F
1690:  RRF    56,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10CB:  MOVLW  E8
10CC:  BSF    03.5
10CD:  MOVWF  09
10CE:  BCF    03.5
10CF:  BSF    09.1
*
12F8:  MOVLW  E8
12F9:  BSF    03.5
12FA:  MOVWF  09
12FB:  BCF    03.5
12FC:  BSF    09.1
*
1691:  MOVLW  E8
1692:  BSF    03.5
1693:  MOVWF  09
1694:  BCF    03.5
1695:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10D0:  MOVLW  E8
10D1:  BSF    03.5
10D2:  MOVWF  09
10D3:  BCF    03.5
10D4:  BCF    09.1
10D5:  DECF   5C,F
10D6:  GOTO   06F
*
12FD:  MOVLW  E8
12FE:  BSF    03.5
12FF:  MOVWF  09
1300:  BCF    03.5
1301:  BCF    09.1
1302:  DECF   5C,F
1303:  GOTO   29C
*
1696:  MOVLW  E8
1697:  BSF    03.5
1698:  MOVWF  09
1699:  BCF    03.5
169A:  BCF    09.1
169B:  DECF   5C,F
169C:  GOTO   635
.................... 	} 
....................   	 
.................... 	output_high(EXP_OUT_ENABLE); 
*
10D7:  MOVLW  E8
10D8:  BSF    03.5
10D9:  MOVWF  09
10DA:  BCF    03.5
10DB:  BSF    09.2
*
1304:  MOVLW  E8
1305:  BSF    03.5
1306:  MOVWF  09
1307:  BCF    03.5
1308:  BSF    09.2
*
169D:  MOVLW  E8
169E:  BSF    03.5
169F:  MOVWF  09
16A0:  BCF    03.5
16A1:  BSF    09.2
.................... 	output_low(EXP_OUT_ENABLE); 
*
10DC:  MOVLW  E8
10DD:  BSF    03.5
10DE:  MOVWF  09
10DF:  BCF    03.5
10E0:  BCF    09.2
*
1309:  MOVLW  E8
130A:  BSF    03.5
130B:  MOVWF  09
130C:  BCF    03.5
130D:  BCF    09.2
*
16A2:  MOVLW  E8
16A3:  BSF    03.5
16A4:  MOVWF  09
16A5:  BCF    03.5
16A6:  BCF    09.2
.................... } 
....................  
.................... #INLINE 
.................... void latch_ClearAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
*
133E:  MOVLW  E8
133F:  BSF    03.5
1340:  MOVWF  09
1341:  BCF    03.5
1342:  BCF    09.1
*
15B4:  MOVLW  E8
15B5:  BSF    03.5
15B6:  MOVWF  09
15B7:  BCF    03.5
15B8:  BCF    09.1
*
16B0:  MOVLW  E8
16B1:  BSF    03.5
16B2:  MOVWF  09
16B3:  BCF    03.5
16B4:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1343:  MOVLW  E8
1344:  BSF    03.5
1345:  MOVWF  09
1346:  BCF    03.5
1347:  BCF    09.2
*
15B9:  MOVLW  E8
15BA:  BSF    03.5
15BB:  MOVWF  09
15BC:  BCF    03.5
15BD:  BCF    09.2
*
16B5:  MOVLW  E8
16B6:  BSF    03.5
16B7:  MOVWF  09
16B8:  BCF    03.5
16B9:  BCF    09.2
.................... 	output_low(EXP_OUT_DO); 
*
1348:  MOVLW  E8
1349:  BSF    03.5
134A:  MOVWF  09
134B:  BCF    03.5
134C:  BCF    09.0
*
15BE:  MOVLW  E8
15BF:  BSF    03.5
15C0:  MOVWF  09
15C1:  BCF    03.5
15C2:  BCF    09.0
*
16BA:  MOVLW  E8
16BB:  BSF    03.5
16BC:  MOVWF  09
16BD:  BCF    03.5
16BE:  BCF    09.0
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
*
134D:  MOVLW  30
134E:  MOVWF  56
134F:  MOVF   56,F
1350:  BTFSC  03.2
1351:  GOTO   35E
*
15C3:  MOVLW  30
15C4:  MOVWF  56
15C5:  MOVF   56,F
15C6:  BTFSC  03.2
15C7:  GOTO   5D4
*
16BF:  MOVLW  30
16C0:  MOVWF  56
16C1:  MOVF   56,F
16C2:  BTFSC  03.2
16C3:  GOTO   6D0
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
*
1352:  MOVLW  E8
1353:  BSF    03.5
1354:  MOVWF  09
1355:  BCF    03.5
1356:  BSF    09.1
*
15C8:  MOVLW  E8
15C9:  BSF    03.5
15CA:  MOVWF  09
15CB:  BCF    03.5
15CC:  BSF    09.1
*
16C4:  MOVLW  E8
16C5:  BSF    03.5
16C6:  MOVWF  09
16C7:  BCF    03.5
16C8:  BSF    09.1
....................    	output_low(EXP_OUT_CLOCK); 
*
1357:  MOVLW  E8
1358:  BSF    03.5
1359:  MOVWF  09
135A:  BCF    03.5
135B:  BCF    09.1
135C:  DECF   56,F
135D:  GOTO   34F
*
15CD:  MOVLW  E8
15CE:  BSF    03.5
15CF:  MOVWF  09
15D0:  BCF    03.5
15D1:  BCF    09.1
15D2:  DECF   56,F
15D3:  GOTO   5C5
*
16C9:  MOVLW  E8
16CA:  BSF    03.5
16CB:  MOVWF  09
16CC:  BCF    03.5
16CD:  BCF    09.1
16CE:  DECF   56,F
16CF:  GOTO   6C1
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
*
135E:  MOVLW  E8
135F:  BSF    03.5
1360:  MOVWF  09
1361:  BCF    03.5
1362:  BSF    09.2
*
15D4:  MOVLW  E8
15D5:  BSF    03.5
15D6:  MOVWF  09
15D7:  BCF    03.5
15D8:  BSF    09.2
*
16D0:  MOVLW  E8
16D1:  BSF    03.5
16D2:  MOVWF  09
16D3:  BCF    03.5
16D4:  BSF    09.2
....................    output_low(EXP_OUT_ENABLE); 
*
1363:  MOVLW  E8
1364:  BSF    03.5
1365:  MOVWF  09
1366:  BCF    03.5
1367:  BCF    09.2
*
15D9:  MOVLW  E8
15DA:  BSF    03.5
15DB:  MOVWF  09
15DC:  BCF    03.5
15DD:  BCF    09.2
*
16D5:  MOVLW  E8
16D6:  BSF    03.5
16D7:  MOVWF  09
16D8:  BCF    03.5
16D9:  BCF    09.2
.................... } 
....................  
.................... void latch_SetAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
.................... 	output_low(EXP_OUT_ENABLE); 
.................... 	output_high(EXP_OUT_DO); 
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
....................    	output_low(EXP_OUT_CLOCK); 
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
....................    output_low(EXP_OUT_ENABLE); 
.................... } 
....................  
....................  
.................... #include "ds1307.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for Real Time Clock - Base on source code from ccsinfo.com       || 
.................... //   Last edited: 20 - March - 2014                                          || 
.................... //                                                                           || 
.................... // ds1307_init() - Enable oscillator without clearing the seconds register   || 
.................... //                 used when PIC loses power and DS1307 run from 3V BAT      || 
.................... //               - Enable squarewave output with 1Hz frequency               || 
.................... //                                                                           || 
.................... // ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time    || 
.................... //                                                                           || 
.................... // ds1307_get_date(day,mth,year,dow)               Get the date              || 
.................... //                                                                           || 
.................... // ds1307_get_time(hr,min,sec)                     Get the time              || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL, slow)  
*
06F6:  MOVLW  08
06F7:  MOVWF  78
06F8:  MOVLW  04
06F9:  MOVWF  77
06FA:  DECFSZ 77,F
06FB:  GOTO   6FA
06FC:  BCF    07.3
06FD:  BCF    55.3
06FE:  MOVF   55,W
06FF:  BSF    03.5
0700:  MOVWF  07
0701:  MOVLW  03
0702:  MOVWF  77
0703:  BCF    03.5
0704:  DECFSZ 77,F
0705:  GOTO   704
0706:  RLF    5E,F
0707:  BCF    07.4
0708:  BTFSS  03.0
0709:  GOTO   710
070A:  BSF    55.4
070B:  MOVF   55,W
070C:  BSF    03.5
070D:  MOVWF  07
070E:  BCF    03.5
070F:  GOTO   715
0710:  BCF    55.4
0711:  MOVF   55,W
0712:  BSF    03.5
0713:  MOVWF  07
0714:  BCF    03.5
0715:  NOP
0716:  BSF    55.3
0717:  MOVF   55,W
0718:  BSF    03.5
0719:  MOVWF  07
071A:  BCF    03.5
071B:  BTFSS  07.3
071C:  GOTO   71B
071D:  DECFSZ 78,F
071E:  GOTO   6F8
071F:  MOVLW  04
0720:  MOVWF  77
0721:  DECFSZ 77,F
0722:  GOTO   721
0723:  BCF    07.3
0724:  BCF    55.3
0725:  MOVF   55,W
0726:  BSF    03.5
0727:  MOVWF  07
0728:  NOP
0729:  BCF    03.5
072A:  BSF    55.4
072B:  MOVF   55,W
072C:  BSF    03.5
072D:  MOVWF  07
072E:  MOVLW  03
072F:  MOVWF  77
0730:  BCF    03.5
0731:  DECFSZ 77,F
0732:  GOTO   731
0733:  MOVLW  03
0734:  MOVWF  77
0735:  DECFSZ 77,F
0736:  GOTO   735
0737:  BSF    55.3
0738:  MOVF   55,W
0739:  BSF    03.5
073A:  MOVWF  07
073B:  BCF    03.5
073C:  BTFSS  07.3
073D:  GOTO   73C
073E:  CLRF   78
073F:  MOVLW  03
0740:  MOVWF  77
0741:  DECFSZ 77,F
0742:  GOTO   741
0743:  BTFSC  07.4
0744:  BSF    78.0
0745:  BCF    07.3
0746:  BCF    55.3
0747:  MOVF   55,W
0748:  BSF    03.5
0749:  MOVWF  07
074A:  BCF    03.5
074B:  BCF    07.4
074C:  BCF    55.4
074D:  MOVF   55,W
074E:  BSF    03.5
074F:  MOVWF  07
0750:  BCF    03.5
0751:  RETURN
0752:  MOVLW  08
0753:  MOVWF  5B
0754:  MOVF   77,W
0755:  MOVWF  5C
0756:  BSF    55.4
0757:  MOVF   55,W
0758:  BSF    03.5
0759:  MOVWF  07
075A:  MOVLW  03
075B:  MOVWF  77
075C:  BCF    03.5
075D:  DECFSZ 77,F
075E:  GOTO   75D
075F:  BSF    55.3
0760:  MOVF   55,W
0761:  BSF    03.5
0762:  MOVWF  07
0763:  BCF    03.5
0764:  BTFSS  07.3
0765:  GOTO   764
0766:  BTFSC  07.4
0767:  BSF    03.0
0768:  BTFSS  07.4
0769:  BCF    03.0
076A:  RLF    78,F
076B:  MOVLW  04
076C:  MOVWF  77
076D:  DECFSZ 77,F
076E:  GOTO   76D
076F:  BCF    55.3
0770:  MOVF   55,W
0771:  BSF    03.5
0772:  MOVWF  07
0773:  BCF    03.5
0774:  BCF    07.3
0775:  DECFSZ 5B,F
0776:  GOTO   756
0777:  BSF    55.4
0778:  MOVF   55,W
0779:  BSF    03.5
077A:  MOVWF  07
077B:  MOVLW  03
077C:  MOVWF  77
077D:  BCF    03.5
077E:  DECFSZ 77,F
077F:  GOTO   77E
0780:  BCF    07.4
0781:  MOVF   5C,W
0782:  BTFSC  03.2
0783:  GOTO   789
0784:  BCF    55.4
0785:  MOVF   55,W
0786:  BSF    03.5
0787:  MOVWF  07
0788:  BCF    03.5
0789:  NOP
078A:  BSF    55.3
078B:  MOVF   55,W
078C:  BSF    03.5
078D:  MOVWF  07
078E:  BCF    03.5
078F:  BTFSS  07.3
0790:  GOTO   78F
0791:  MOVLW  04
0792:  MOVWF  77
0793:  DECFSZ 77,F
0794:  GOTO   793
0795:  BCF    07.3
0796:  BCF    55.3
0797:  MOVF   55,W
0798:  BSF    03.5
0799:  MOVWF  07
079A:  MOVLW  03
079B:  MOVWF  77
079C:  BCF    03.5
079D:  DECFSZ 77,F
079E:  GOTO   79D
079F:  BCF    07.4
07A0:  BCF    55.4
07A1:  MOVF   55,W
07A2:  BSF    03.5
07A3:  MOVWF  07
07A4:  BCF    03.5
07A5:  RETURN
....................  
.................... int8 bin2bcd(int8 bin_value);  
.................... int8 bcd2bin(int8 bcd_value);  
....................  
.................... void ds1307_init(void)  
*
0800:  CLRF   56
.................... {  
....................    int8 byte0 = 0;  
....................  
....................    i2c_start();          // send start signal 
0801:  BSF    55.4
0802:  MOVF   55,W
0803:  BSF    03.5
0804:  MOVWF  07
0805:  MOVLW  04
0806:  MOVWF  77
0807:  BCF    03.5
0808:  DECFSZ 77,F
0809:  GOTO   008
080A:  BSF    55.3
080B:  MOVF   55,W
080C:  BSF    03.5
080D:  MOVWF  07
080E:  MOVLW  03
080F:  MOVWF  77
0810:  BCF    03.5
0811:  DECFSZ 77,F
0812:  GOTO   011
0813:  BCF    07.4
0814:  BCF    55.4
0815:  MOVF   55,W
0816:  BSF    03.5
0817:  MOVWF  07
0818:  MOVLW  04
0819:  MOVWF  77
081A:  BCF    03.5
081B:  DECFSZ 77,F
081C:  GOTO   01B
081D:  BCF    07.3
081E:  BCF    55.3
081F:  MOVF   55,W
0820:  BSF    03.5
0821:  MOVWF  07
....................    i2c_write(0xD0);      // indentification of I2C slave device with write operation 
0822:  MOVLW  D0
0823:  BCF    03.5
0824:  MOVWF  5E
0825:  BCF    0A.3
0826:  CALL   6F6
0827:  BSF    0A.3
....................    i2c_write(0x00);      // address of register 0 
0828:  CLRF   5E
0829:  BCF    0A.3
082A:  CALL   6F6
082B:  BSF    0A.3
....................    i2c_start(); 
082C:  BSF    55.4
082D:  MOVF   55,W
082E:  BSF    03.5
082F:  MOVWF  07
0830:  MOVLW  04
0831:  MOVWF  77
0832:  BCF    03.5
0833:  DECFSZ 77,F
0834:  GOTO   033
0835:  BSF    55.3
0836:  MOVF   55,W
0837:  BSF    03.5
0838:  MOVWF  07
0839:  MOVLW  03
083A:  MOVWF  77
083B:  BCF    03.5
083C:  DECFSZ 77,F
083D:  GOTO   03C
083E:  BTFSS  07.3
083F:  GOTO   03E
0840:  BCF    07.4
0841:  BCF    55.4
0842:  MOVF   55,W
0843:  BSF    03.5
0844:  MOVWF  07
0845:  MOVLW  04
0846:  MOVWF  77
0847:  BCF    03.5
0848:  DECFSZ 77,F
0849:  GOTO   048
084A:  BCF    07.3
084B:  BCF    55.3
084C:  MOVF   55,W
084D:  BSF    03.5
084E:  MOVWF  07
....................    i2c_write(0xD1);      // change operation to read 
084F:  MOVLW  D1
0850:  BCF    03.5
0851:  MOVWF  5E
0852:  BCF    0A.3
0853:  CALL   6F6
0854:  BSF    0A.3
....................    byte0 = i2c_read(0);  // read current first byte in DS1307, which stores seconds value and CH bit (Clock Halt) 
0855:  CLRF   77
0856:  BCF    0A.3
0857:  CALL   752
0858:  BSF    0A.3
0859:  MOVF   78,W
085A:  MOVWF  56
....................    i2c_stop();           // send stop signal 
085B:  BCF    55.4
085C:  MOVF   55,W
085D:  BSF    03.5
085E:  MOVWF  07
085F:  NOP
0860:  BCF    03.5
0861:  BSF    55.3
0862:  MOVF   55,W
0863:  BSF    03.5
0864:  MOVWF  07
0865:  BCF    03.5
0866:  BTFSS  07.3
0867:  GOTO   066
0868:  MOVLW  04
0869:  MOVWF  77
086A:  DECFSZ 77,F
086B:  GOTO   06A
086C:  GOTO   06D
086D:  NOP
086E:  BSF    55.4
086F:  MOVF   55,W
0870:  BSF    03.5
0871:  MOVWF  07
0872:  MOVLW  04
0873:  MOVWF  77
0874:  BCF    03.5
0875:  DECFSZ 77,F
0876:  GOTO   075
....................    bit_clear(byte0, 7);  // clear bit 7 to enable oscillator, needed for clock to run 
0877:  BCF    56.7
....................  
....................    delay_us(3);          // make sure another transmit is possible, base on datasheet 
0878:  MOVLW  04
0879:  MOVWF  77
087A:  DECFSZ 77,F
087B:  GOTO   07A
087C:  GOTO   07D
....................  
....................    i2c_start();  
087D:  BSF    55.4
087E:  MOVF   55,W
087F:  BSF    03.5
0880:  MOVWF  07
0881:  MOVLW  04
0882:  MOVWF  77
0883:  BCF    03.5
0884:  DECFSZ 77,F
0885:  GOTO   084
0886:  BSF    55.3
0887:  MOVF   55,W
0888:  BSF    03.5
0889:  MOVWF  07
088A:  MOVLW  03
088B:  MOVWF  77
088C:  BCF    03.5
088D:  DECFSZ 77,F
088E:  GOTO   08D
088F:  BCF    07.4
0890:  BCF    55.4
0891:  MOVF   55,W
0892:  BSF    03.5
0893:  MOVWF  07
0894:  MOVLW  04
0895:  MOVWF  77
0896:  BCF    03.5
0897:  DECFSZ 77,F
0898:  GOTO   097
0899:  BCF    07.3
089A:  BCF    55.3
089B:  MOVF   55,W
089C:  BSF    03.5
089D:  MOVWF  07
....................    i2c_write(0xD0);      // write to ds1307 
089E:  MOVLW  D0
089F:  BCF    03.5
08A0:  MOVWF  5E
08A1:  BCF    0A.3
08A2:  CALL   6F6
08A3:  BSF    0A.3
....................    i2c_write(0x00);      // register 0 
08A4:  CLRF   5E
08A5:  BCF    0A.3
08A6:  CALL   6F6
08A7:  BSF    0A.3
....................    i2c_write(byte0);     // write to register 0 with the same seconds and bit 7 cleared 
08A8:  MOVF   56,W
08A9:  MOVWF  5E
08AA:  BCF    0A.3
08AB:  CALL   6F6
08AC:  BSF    0A.3
....................    i2c_stop(); 
08AD:  BCF    55.4
08AE:  MOVF   55,W
08AF:  BSF    03.5
08B0:  MOVWF  07
08B1:  NOP
08B2:  BCF    03.5
08B3:  BSF    55.3
08B4:  MOVF   55,W
08B5:  BSF    03.5
08B6:  MOVWF  07
08B7:  BCF    03.5
08B8:  BTFSS  07.3
08B9:  GOTO   0B8
08BA:  MOVLW  04
08BB:  MOVWF  77
08BC:  DECFSZ 77,F
08BD:  GOTO   0BC
08BE:  GOTO   0BF
08BF:  NOP
08C0:  BSF    55.4
08C1:  MOVF   55,W
08C2:  BSF    03.5
08C3:  MOVWF  07
08C4:  MOVLW  04
08C5:  MOVWF  77
08C6:  BCF    03.5
08C7:  DECFSZ 77,F
08C8:  GOTO   0C7
....................     
....................    delay_us(3); 
08C9:  MOVLW  04
08CA:  MOVWF  77
08CB:  DECFSZ 77,F
08CC:  GOTO   0CB
08CD:  GOTO   0CE
....................     
....................    i2c_start(); 
08CE:  BSF    55.4
08CF:  MOVF   55,W
08D0:  BSF    03.5
08D1:  MOVWF  07
08D2:  MOVLW  04
08D3:  MOVWF  77
08D4:  BCF    03.5
08D5:  DECFSZ 77,F
08D6:  GOTO   0D5
08D7:  BSF    55.3
08D8:  MOVF   55,W
08D9:  BSF    03.5
08DA:  MOVWF  07
08DB:  MOVLW  03
08DC:  MOVWF  77
08DD:  BCF    03.5
08DE:  DECFSZ 77,F
08DF:  GOTO   0DE
08E0:  BCF    07.4
08E1:  BCF    55.4
08E2:  MOVF   55,W
08E3:  BSF    03.5
08E4:  MOVWF  07
08E5:  MOVLW  04
08E6:  MOVWF  77
08E7:  BCF    03.5
08E8:  DECFSZ 77,F
08E9:  GOTO   0E8
08EA:  BCF    07.3
08EB:  BCF    55.3
08EC:  MOVF   55,W
08ED:  BSF    03.5
08EE:  MOVWF  07
....................    i2c_write(0xD0); 
08EF:  MOVLW  D0
08F0:  BCF    03.5
08F1:  MOVWF  5E
08F2:  BCF    0A.3
08F3:  CALL   6F6
08F4:  BSF    0A.3
....................    i2c_write(0x07);      // Control Register  
08F5:  MOVLW  07
08F6:  MOVWF  5E
08F7:  BCF    0A.3
08F8:  CALL   6F6
08F9:  BSF    0A.3
....................    i2c_write(0x10);      // enable squarewave output pin with frequency 1Hz 
08FA:  MOVLW  10
08FB:  MOVWF  5E
08FC:  BCF    0A.3
08FD:  CALL   6F6
08FE:  BSF    0A.3
....................    i2c_stop();  
08FF:  BCF    55.4
0900:  MOVF   55,W
0901:  BSF    03.5
0902:  MOVWF  07
0903:  NOP
0904:  BCF    03.5
0905:  BSF    55.3
0906:  MOVF   55,W
0907:  BSF    03.5
0908:  MOVWF  07
0909:  BCF    03.5
090A:  BTFSS  07.3
090B:  GOTO   10A
090C:  MOVLW  04
090D:  MOVWF  77
090E:  DECFSZ 77,F
090F:  GOTO   10E
0910:  GOTO   111
0911:  NOP
0912:  BSF    55.4
0913:  MOVF   55,W
0914:  BSF    03.5
0915:  MOVWF  07
0916:  MOVLW  04
0917:  MOVWF  77
0918:  BCF    03.5
0919:  DECFSZ 77,F
091A:  GOTO   119
091B:  BCF    0A.3
091C:  BSF    0A.4
091D:  GOTO   04A (RETURN)
....................  
.................... }  
....................  
.................... void ds1307_set_date_time(int8 day, int8 mth, int8 year, int8 dow, int8 hr, int8 min, int8 sec)  
.................... {  
....................   sec &= 0x7F;           // clear CH bit 
*
09E0:  BCF    5C.7
....................   hr  &= 0x3F;           // set 24h time mode 
09E1:  MOVLW  3F
09E2:  ANDWF  5A,F
....................  
....................   i2c_start();  
09E3:  BSF    55.4
09E4:  MOVF   55,W
09E5:  BSF    03.5
09E6:  MOVWF  07
09E7:  MOVLW  04
09E8:  MOVWF  77
09E9:  BCF    03.5
09EA:  DECFSZ 77,F
09EB:  GOTO   1EA
09EC:  BSF    55.3
09ED:  MOVF   55,W
09EE:  BSF    03.5
09EF:  MOVWF  07
09F0:  MOVLW  03
09F1:  MOVWF  77
09F2:  BCF    03.5
09F3:  DECFSZ 77,F
09F4:  GOTO   1F3
09F5:  BCF    07.4
09F6:  BCF    55.4
09F7:  MOVF   55,W
09F8:  BSF    03.5
09F9:  MOVWF  07
09FA:  MOVLW  04
09FB:  MOVWF  77
09FC:  BCF    03.5
09FD:  DECFSZ 77,F
09FE:  GOTO   1FD
09FF:  BCF    07.3
0A00:  BCF    55.3
0A01:  MOVF   55,W
0A02:  BSF    03.5
0A03:  MOVWF  07
....................   i2c_write(0xD0);            // I2C write address  
0A04:  MOVLW  D0
0A05:  BCF    03.5
0A06:  MOVWF  5E
0A07:  BCF    0A.3
0A08:  CALL   6F6
0A09:  BSF    0A.3
....................   i2c_write(0x00);            // Start at REG 0 
0A0A:  CLRF   5E
0A0B:  BCF    0A.3
0A0C:  CALL   6F6
0A0D:  BSF    0A.3
....................   i2c_write(bin2bcd(sec));    // REG 0 - seconds 
0A0E:  MOVF   5C,W
0A0F:  MOVWF  5D
0A10:  CALL   11E
0A11:  MOVF   78,W
0A12:  MOVWF  5D
0A13:  MOVWF  5E
0A14:  BCF    0A.3
0A15:  CALL   6F6
0A16:  BSF    0A.3
....................   i2c_write(bin2bcd(min));    // REG 1 - minutes 
0A17:  MOVF   5B,W
0A18:  MOVWF  5D
0A19:  CALL   11E
0A1A:  MOVF   78,W
0A1B:  MOVWF  5D
0A1C:  MOVWF  5E
0A1D:  BCF    0A.3
0A1E:  CALL   6F6
0A1F:  BSF    0A.3
....................   i2c_write(bin2bcd(hr));     // REG 2 - hours 
0A20:  MOVF   5A,W
0A21:  MOVWF  5D
0A22:  CALL   11E
0A23:  MOVF   78,W
0A24:  MOVWF  5D
0A25:  MOVWF  5E
0A26:  BCF    0A.3
0A27:  CALL   6F6
0A28:  BSF    0A.3
....................   i2c_write(bin2bcd(dow));    // REG 3 - date of week 
0A29:  MOVF   59,W
0A2A:  MOVWF  5D
0A2B:  CALL   11E
0A2C:  MOVF   78,W
0A2D:  MOVWF  5D
0A2E:  MOVWF  5E
0A2F:  BCF    0A.3
0A30:  CALL   6F6
0A31:  BSF    0A.3
....................   i2c_write(bin2bcd(day));    // REG 4 - day of month 
0A32:  MOVF   56,W
0A33:  MOVWF  5D
0A34:  CALL   11E
0A35:  MOVF   78,W
0A36:  MOVWF  5D
0A37:  MOVWF  5E
0A38:  BCF    0A.3
0A39:  CALL   6F6
0A3A:  BSF    0A.3
....................   i2c_write(bin2bcd(mth));    // REG 5 - month 
0A3B:  MOVF   57,W
0A3C:  MOVWF  5D
0A3D:  CALL   11E
0A3E:  MOVF   78,W
0A3F:  MOVWF  5D
0A40:  MOVWF  5E
0A41:  BCF    0A.3
0A42:  CALL   6F6
0A43:  BSF    0A.3
....................   i2c_write(bin2bcd(year));   // REG 6 - year 
0A44:  MOVF   58,W
0A45:  MOVWF  5D
0A46:  CALL   11E
0A47:  MOVF   78,W
0A48:  MOVWF  5D
0A49:  MOVWF  5E
0A4A:  BCF    0A.3
0A4B:  CALL   6F6
0A4C:  BSF    0A.3
....................   //i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
....................   i2c_stop();  
0A4D:  BCF    55.4
0A4E:  MOVF   55,W
0A4F:  BSF    03.5
0A50:  MOVWF  07
0A51:  NOP
0A52:  BCF    03.5
0A53:  BSF    55.3
0A54:  MOVF   55,W
0A55:  BSF    03.5
0A56:  MOVWF  07
0A57:  BCF    03.5
0A58:  BTFSS  07.3
0A59:  GOTO   258
0A5A:  MOVLW  04
0A5B:  MOVWF  77
0A5C:  DECFSZ 77,F
0A5D:  GOTO   25C
0A5E:  GOTO   25F
0A5F:  NOP
0A60:  BSF    55.4
0A61:  MOVF   55,W
0A62:  BSF    03.5
0A63:  MOVWF  07
0A64:  MOVLW  04
0A65:  MOVWF  77
0A66:  BCF    03.5
0A67:  DECFSZ 77,F
0A68:  GOTO   267
0A69:  BCF    0A.3
0A6A:  BSF    0A.4
0A6B:  GOTO   320 (RETURN)
.................... }  
....................  
.................... void ds1307_get_date(int8 &day, int8 &mth, int8 &year, int8 &dow)  
.................... {  
....................   i2c_start();  
*
117A:  BSF    55.4
117B:  MOVF   55,W
117C:  BSF    03.5
117D:  MOVWF  07
117E:  MOVLW  04
117F:  MOVWF  77
1180:  BCF    03.5
1181:  DECFSZ 77,F
1182:  GOTO   181
1183:  BSF    55.3
1184:  MOVF   55,W
1185:  BSF    03.5
1186:  MOVWF  07
1187:  MOVLW  03
1188:  MOVWF  77
1189:  BCF    03.5
118A:  DECFSZ 77,F
118B:  GOTO   18A
118C:  BCF    07.4
118D:  BCF    55.4
118E:  MOVF   55,W
118F:  BSF    03.5
1190:  MOVWF  07
1191:  MOVLW  04
1192:  MOVWF  77
1193:  BCF    03.5
1194:  DECFSZ 77,F
1195:  GOTO   194
1196:  BCF    07.3
1197:  BCF    55.3
1198:  MOVF   55,W
1199:  BSF    03.5
119A:  MOVWF  07
*
1405:  BSF    55.4
1406:  MOVF   55,W
1407:  BSF    03.5
1408:  MOVWF  07
1409:  MOVLW  04
140A:  MOVWF  77
140B:  BCF    03.5
140C:  DECFSZ 77,F
140D:  GOTO   40C
140E:  BSF    55.3
140F:  MOVF   55,W
1410:  BSF    03.5
1411:  MOVWF  07
1412:  MOVLW  03
1413:  MOVWF  77
1414:  BCF    03.5
1415:  DECFSZ 77,F
1416:  GOTO   415
1417:  BCF    07.4
1418:  BCF    55.4
1419:  MOVF   55,W
141A:  BSF    03.5
141B:  MOVWF  07
141C:  MOVLW  04
141D:  MOVWF  77
141E:  BCF    03.5
141F:  DECFSZ 77,F
1420:  GOTO   41F
1421:  BCF    07.3
1422:  BCF    55.3
1423:  MOVF   55,W
1424:  BSF    03.5
1425:  MOVWF  07
....................   i2c_write(0xD0);  
*
119B:  MOVLW  D0
119C:  BCF    03.5
119D:  MOVWF  5E
119E:  BCF    0A.4
119F:  CALL   6F6
11A0:  BSF    0A.4
*
1426:  MOVLW  D0
1427:  BCF    03.5
1428:  MOVWF  5E
1429:  BCF    0A.4
142A:  CALL   6F6
142B:  BSF    0A.4
....................   i2c_write(0x03);            // Start at REG 3 
*
11A1:  MOVLW  03
11A2:  MOVWF  5E
11A3:  BCF    0A.4
11A4:  CALL   6F6
11A5:  BSF    0A.4
*
142C:  MOVLW  03
142D:  MOVWF  5E
142E:  BCF    0A.4
142F:  CALL   6F6
1430:  BSF    0A.4
....................   i2c_start();  
*
11A6:  BSF    55.4
11A7:  MOVF   55,W
11A8:  BSF    03.5
11A9:  MOVWF  07
11AA:  MOVLW  04
11AB:  MOVWF  77
11AC:  BCF    03.5
11AD:  DECFSZ 77,F
11AE:  GOTO   1AD
11AF:  BSF    55.3
11B0:  MOVF   55,W
11B1:  BSF    03.5
11B2:  MOVWF  07
11B3:  MOVLW  03
11B4:  MOVWF  77
11B5:  BCF    03.5
11B6:  DECFSZ 77,F
11B7:  GOTO   1B6
11B8:  BTFSS  07.3
11B9:  GOTO   1B8
11BA:  BCF    07.4
11BB:  BCF    55.4
11BC:  MOVF   55,W
11BD:  BSF    03.5
11BE:  MOVWF  07
11BF:  MOVLW  04
11C0:  MOVWF  77
11C1:  BCF    03.5
11C2:  DECFSZ 77,F
11C3:  GOTO   1C2
11C4:  BCF    07.3
11C5:  BCF    55.3
11C6:  MOVF   55,W
11C7:  BSF    03.5
11C8:  MOVWF  07
*
1431:  BSF    55.4
1432:  MOVF   55,W
1433:  BSF    03.5
1434:  MOVWF  07
1435:  MOVLW  04
1436:  MOVWF  77
1437:  BCF    03.5
1438:  DECFSZ 77,F
1439:  GOTO   438
143A:  BSF    55.3
143B:  MOVF   55,W
143C:  BSF    03.5
143D:  MOVWF  07
143E:  MOVLW  03
143F:  MOVWF  77
1440:  BCF    03.5
1441:  DECFSZ 77,F
1442:  GOTO   441
1443:  BTFSS  07.3
1444:  GOTO   443
1445:  BCF    07.4
1446:  BCF    55.4
1447:  MOVF   55,W
1448:  BSF    03.5
1449:  MOVWF  07
144A:  MOVLW  04
144B:  MOVWF  77
144C:  BCF    03.5
144D:  DECFSZ 77,F
144E:  GOTO   44D
144F:  BCF    07.3
1450:  BCF    55.3
1451:  MOVF   55,W
1452:  BSF    03.5
1453:  MOVWF  07
....................   i2c_write(0xD1);            // change to read 
*
11C9:  MOVLW  D1
11CA:  BCF    03.5
11CB:  MOVWF  5E
11CC:  BCF    0A.4
11CD:  CALL   6F6
11CE:  BSF    0A.4
*
1454:  MOVLW  D1
1455:  BCF    03.5
1456:  MOVWF  5E
1457:  BCF    0A.4
1458:  CALL   6F6
1459:  BSF    0A.4
....................   dow  = bcd2bin(i2c_read(1) & 0x07);   // REG 3 - date of week  
*
11CF:  MOVLW  01
11D0:  MOVWF  77
11D1:  BCF    0A.4
11D2:  CALL   752
11D3:  BSF    0A.4
11D4:  MOVF   78,W
11D5:  ANDLW  07
11D6:  MOVWF  56
11D7:  MOVWF  5B
11D8:  BCF    0A.4
11D9:  CALL   7A6
11DA:  BSF    0A.4
11DB:  MOVF   78,W
11DC:  MOVWF  39
*
145A:  MOVLW  01
145B:  MOVWF  77
145C:  BCF    0A.4
145D:  CALL   752
145E:  BSF    0A.4
145F:  MOVF   78,W
1460:  ANDLW  07
1461:  MOVWF  56
1462:  MOVWF  5B
1463:  BCF    0A.4
1464:  CALL   7A6
1465:  BSF    0A.4
1466:  MOVF   78,W
1467:  MOVWF  39
....................   day  = bcd2bin(i2c_read(1) & 0x3f);   // REG 4 - day of month 
*
11DD:  MOVLW  01
11DE:  MOVWF  77
11DF:  BCF    0A.4
11E0:  CALL   752
11E1:  BSF    0A.4
11E2:  MOVF   78,W
11E3:  ANDLW  3F
11E4:  MOVWF  56
11E5:  MOVWF  5B
11E6:  BCF    0A.4
11E7:  CALL   7A6
11E8:  BSF    0A.4
11E9:  MOVF   78,W
11EA:  MOVWF  36
*
1468:  MOVLW  01
1469:  MOVWF  77
146A:  BCF    0A.4
146B:  CALL   752
146C:  BSF    0A.4
146D:  MOVF   78,W
146E:  ANDLW  3F
146F:  MOVWF  56
1470:  MOVWF  5B
1471:  BCF    0A.4
1472:  CALL   7A6
1473:  BSF    0A.4
1474:  MOVF   78,W
1475:  MOVWF  36
....................   mth  = bcd2bin(i2c_read(1) & 0x1f);   // REG 5 - month 
*
11EB:  MOVLW  01
11EC:  MOVWF  77
11ED:  BCF    0A.4
11EE:  CALL   752
11EF:  BSF    0A.4
11F0:  MOVF   78,W
11F1:  ANDLW  1F
11F2:  MOVWF  56
11F3:  MOVWF  5B
11F4:  BCF    0A.4
11F5:  CALL   7A6
11F6:  BSF    0A.4
11F7:  MOVF   78,W
11F8:  MOVWF  37
*
1476:  MOVLW  01
1477:  MOVWF  77
1478:  BCF    0A.4
1479:  CALL   752
147A:  BSF    0A.4
147B:  MOVF   78,W
147C:  ANDLW  1F
147D:  MOVWF  56
147E:  MOVWF  5B
147F:  BCF    0A.4
1480:  CALL   7A6
1481:  BSF    0A.4
1482:  MOVF   78,W
1483:  MOVWF  37
....................   year = bcd2bin(i2c_read(0));          // REG 6 - year 
*
11F9:  CLRF   77
11FA:  BCF    0A.4
11FB:  CALL   752
11FC:  BSF    0A.4
11FD:  MOVF   78,W
11FE:  MOVWF  56
11FF:  MOVWF  5B
1200:  BCF    0A.4
1201:  CALL   7A6
1202:  BSF    0A.4
1203:  MOVF   78,W
1204:  MOVWF  38
*
1484:  CLRF   77
1485:  BCF    0A.4
1486:  CALL   752
1487:  BSF    0A.4
1488:  MOVF   78,W
1489:  MOVWF  56
148A:  MOVWF  5B
148B:  BCF    0A.4
148C:  CALL   7A6
148D:  BSF    0A.4
148E:  MOVF   78,W
148F:  MOVWF  38
....................   i2c_stop();  
*
1205:  BCF    55.4
1206:  MOVF   55,W
1207:  BSF    03.5
1208:  MOVWF  07
1209:  NOP
120A:  BCF    03.5
120B:  BSF    55.3
120C:  MOVF   55,W
120D:  BSF    03.5
120E:  MOVWF  07
120F:  BCF    03.5
1210:  BTFSS  07.3
1211:  GOTO   210
1212:  MOVLW  04
1213:  MOVWF  77
1214:  DECFSZ 77,F
1215:  GOTO   214
1216:  GOTO   217
1217:  NOP
1218:  BSF    55.4
1219:  MOVF   55,W
121A:  BSF    03.5
121B:  MOVWF  07
121C:  MOVLW  04
121D:  MOVWF  77
121E:  BCF    03.5
121F:  DECFSZ 77,F
1220:  GOTO   21F
*
1490:  BCF    55.4
1491:  MOVF   55,W
1492:  BSF    03.5
1493:  MOVWF  07
1494:  NOP
1495:  BCF    03.5
1496:  BSF    55.3
1497:  MOVF   55,W
1498:  BSF    03.5
1499:  MOVWF  07
149A:  BCF    03.5
149B:  BTFSS  07.3
149C:  GOTO   49B
149D:  MOVLW  04
149E:  MOVWF  77
149F:  DECFSZ 77,F
14A0:  GOTO   49F
14A1:  GOTO   4A2
14A2:  NOP
14A3:  BSF    55.4
14A4:  MOVF   55,W
14A5:  BSF    03.5
14A6:  MOVWF  07
14A7:  MOVLW  04
14A8:  MOVWF  77
14A9:  BCF    03.5
14AA:  DECFSZ 77,F
14AB:  GOTO   4AA
.................... }  
....................  
.................... void ds1307_get_time(int8 &hr, int8 &min, int8 &sec)  
.................... {  
....................   i2c_start();  
*
10E1:  BSF    55.4
10E2:  MOVF   55,W
10E3:  BSF    03.5
10E4:  MOVWF  07
10E5:  MOVLW  04
10E6:  MOVWF  77
10E7:  BCF    03.5
10E8:  DECFSZ 77,F
10E9:  GOTO   0E8
10EA:  BSF    55.3
10EB:  MOVF   55,W
10EC:  BSF    03.5
10ED:  MOVWF  07
10EE:  MOVLW  03
10EF:  MOVWF  77
10F0:  BCF    03.5
10F1:  DECFSZ 77,F
10F2:  GOTO   0F1
10F3:  BCF    07.4
10F4:  BCF    55.4
10F5:  MOVF   55,W
10F6:  BSF    03.5
10F7:  MOVWF  07
10F8:  MOVLW  04
10F9:  MOVWF  77
10FA:  BCF    03.5
10FB:  DECFSZ 77,F
10FC:  GOTO   0FB
10FD:  BCF    07.3
10FE:  BCF    55.3
10FF:  MOVF   55,W
1100:  BSF    03.5
1101:  MOVWF  07
*
136C:  BSF    55.4
136D:  MOVF   55,W
136E:  BSF    03.5
136F:  MOVWF  07
1370:  MOVLW  04
1371:  MOVWF  77
1372:  BCF    03.5
1373:  DECFSZ 77,F
1374:  GOTO   373
1375:  BSF    55.3
1376:  MOVF   55,W
1377:  BSF    03.5
1378:  MOVWF  07
1379:  MOVLW  03
137A:  MOVWF  77
137B:  BCF    03.5
137C:  DECFSZ 77,F
137D:  GOTO   37C
137E:  BCF    07.4
137F:  BCF    55.4
1380:  MOVF   55,W
1381:  BSF    03.5
1382:  MOVWF  07
1383:  MOVLW  04
1384:  MOVWF  77
1385:  BCF    03.5
1386:  DECFSZ 77,F
1387:  GOTO   386
1388:  BCF    07.3
1389:  BCF    55.3
138A:  MOVF   55,W
138B:  BSF    03.5
138C:  MOVWF  07
*
14D4:  BSF    55.4
14D5:  MOVF   55,W
14D6:  BSF    03.5
14D7:  MOVWF  07
14D8:  MOVLW  04
14D9:  MOVWF  77
14DA:  BCF    03.5
14DB:  DECFSZ 77,F
14DC:  GOTO   4DB
14DD:  BSF    55.3
14DE:  MOVF   55,W
14DF:  BSF    03.5
14E0:  MOVWF  07
14E1:  MOVLW  03
14E2:  MOVWF  77
14E3:  BCF    03.5
14E4:  DECFSZ 77,F
14E5:  GOTO   4E4
14E6:  BCF    07.4
14E7:  BCF    55.4
14E8:  MOVF   55,W
14E9:  BSF    03.5
14EA:  MOVWF  07
14EB:  MOVLW  04
14EC:  MOVWF  77
14ED:  BCF    03.5
14EE:  DECFSZ 77,F
14EF:  GOTO   4EE
14F0:  BCF    07.3
14F1:  BCF    55.3
14F2:  MOVF   55,W
14F3:  BSF    03.5
14F4:  MOVWF  07
....................   i2c_write(0xD0);  
*
1102:  MOVLW  D0
1103:  BCF    03.5
1104:  MOVWF  5E
1105:  BCF    0A.4
1106:  CALL   6F6
1107:  BSF    0A.4
*
138D:  MOVLW  D0
138E:  BCF    03.5
138F:  MOVWF  5E
1390:  BCF    0A.4
1391:  CALL   6F6
1392:  BSF    0A.4
*
14F5:  MOVLW  D0
14F6:  BCF    03.5
14F7:  MOVWF  5E
14F8:  BCF    0A.4
14F9:  CALL   6F6
14FA:  BSF    0A.4
....................   i2c_write(0x00);                    // Start at REG 0 
*
1108:  CLRF   5E
1109:  BCF    0A.4
110A:  CALL   6F6
110B:  BSF    0A.4
*
1393:  CLRF   5E
1394:  BCF    0A.4
1395:  CALL   6F6
1396:  BSF    0A.4
*
14FB:  CLRF   5E
14FC:  BCF    0A.4
14FD:  CALL   6F6
14FE:  BSF    0A.4
....................   i2c_start();  
*
110C:  BSF    55.4
110D:  MOVF   55,W
110E:  BSF    03.5
110F:  MOVWF  07
1110:  MOVLW  04
1111:  MOVWF  77
1112:  BCF    03.5
1113:  DECFSZ 77,F
1114:  GOTO   113
1115:  BSF    55.3
1116:  MOVF   55,W
1117:  BSF    03.5
1118:  MOVWF  07
1119:  MOVLW  03
111A:  MOVWF  77
111B:  BCF    03.5
111C:  DECFSZ 77,F
111D:  GOTO   11C
111E:  BTFSS  07.3
111F:  GOTO   11E
1120:  BCF    07.4
1121:  BCF    55.4
1122:  MOVF   55,W
1123:  BSF    03.5
1124:  MOVWF  07
1125:  MOVLW  04
1126:  MOVWF  77
1127:  BCF    03.5
1128:  DECFSZ 77,F
1129:  GOTO   128
112A:  BCF    07.3
112B:  BCF    55.3
112C:  MOVF   55,W
112D:  BSF    03.5
112E:  MOVWF  07
*
1397:  BSF    55.4
1398:  MOVF   55,W
1399:  BSF    03.5
139A:  MOVWF  07
139B:  MOVLW  04
139C:  MOVWF  77
139D:  BCF    03.5
139E:  DECFSZ 77,F
139F:  GOTO   39E
13A0:  BSF    55.3
13A1:  MOVF   55,W
13A2:  BSF    03.5
13A3:  MOVWF  07
13A4:  MOVLW  03
13A5:  MOVWF  77
13A6:  BCF    03.5
13A7:  DECFSZ 77,F
13A8:  GOTO   3A7
13A9:  BTFSS  07.3
13AA:  GOTO   3A9
13AB:  BCF    07.4
13AC:  BCF    55.4
13AD:  MOVF   55,W
13AE:  BSF    03.5
13AF:  MOVWF  07
13B0:  MOVLW  04
13B1:  MOVWF  77
13B2:  BCF    03.5
13B3:  DECFSZ 77,F
13B4:  GOTO   3B3
13B5:  BCF    07.3
13B6:  BCF    55.3
13B7:  MOVF   55,W
13B8:  BSF    03.5
13B9:  MOVWF  07
*
14FF:  BSF    55.4
1500:  MOVF   55,W
1501:  BSF    03.5
1502:  MOVWF  07
1503:  MOVLW  04
1504:  MOVWF  77
1505:  BCF    03.5
1506:  DECFSZ 77,F
1507:  GOTO   506
1508:  BSF    55.3
1509:  MOVF   55,W
150A:  BSF    03.5
150B:  MOVWF  07
150C:  MOVLW  03
150D:  MOVWF  77
150E:  BCF    03.5
150F:  DECFSZ 77,F
1510:  GOTO   50F
1511:  BTFSS  07.3
1512:  GOTO   511
1513:  BCF    07.4
1514:  BCF    55.4
1515:  MOVF   55,W
1516:  BSF    03.5
1517:  MOVWF  07
1518:  MOVLW  04
1519:  MOVWF  77
151A:  BCF    03.5
151B:  DECFSZ 77,F
151C:  GOTO   51B
151D:  BCF    07.3
151E:  BCF    55.3
151F:  MOVF   55,W
1520:  BSF    03.5
1521:  MOVWF  07
....................   i2c_write(0xD1);                    // read mode 
*
112F:  MOVLW  D1
1130:  BCF    03.5
1131:  MOVWF  5E
1132:  BCF    0A.4
1133:  CALL   6F6
1134:  BSF    0A.4
*
13BA:  MOVLW  D1
13BB:  BCF    03.5
13BC:  MOVWF  5E
13BD:  BCF    0A.4
13BE:  CALL   6F6
13BF:  BSF    0A.4
*
1522:  MOVLW  D1
1523:  BCF    03.5
1524:  MOVWF  5E
1525:  BCF    0A.4
1526:  CALL   6F6
1527:  BSF    0A.4
....................   sec = bcd2bin(i2c_read(1) & 0x7f);  // REG 0 - seconds, exclude CH bit 
*
1135:  MOVLW  01
1136:  MOVWF  77
1137:  BCF    0A.4
1138:  CALL   752
1139:  BSF    0A.4
113A:  MOVF   78,W
113B:  ANDLW  7F
113C:  MOVWF  56
113D:  MOVWF  5B
113E:  BCF    0A.4
113F:  CALL   7A6
1140:  BSF    0A.4
1141:  MOVF   78,W
1142:  MOVWF  3C
*
13C0:  MOVLW  01
13C1:  MOVWF  77
13C2:  BCF    0A.4
13C3:  CALL   752
13C4:  BSF    0A.4
13C5:  MOVF   78,W
13C6:  ANDLW  7F
13C7:  MOVWF  56
13C8:  MOVWF  5B
13C9:  BCF    0A.4
13CA:  CALL   7A6
13CB:  BSF    0A.4
13CC:  MOVF   78,W
13CD:  MOVWF  3C
*
1528:  MOVLW  01
1529:  MOVWF  77
152A:  BCF    0A.4
152B:  CALL   752
152C:  BSF    0A.4
152D:  MOVF   78,W
152E:  ANDLW  7F
152F:  MOVWF  56
1530:  MOVWF  5B
1531:  BCF    0A.4
1532:  CALL   7A6
1533:  BSF    0A.4
1534:  MOVF   78,W
1535:  MOVWF  3C
....................   min = bcd2bin(i2c_read(1) & 0x7f);  // REG 1 - minutes 
*
1143:  MOVLW  01
1144:  MOVWF  77
1145:  BCF    0A.4
1146:  CALL   752
1147:  BSF    0A.4
1148:  MOVF   78,W
1149:  ANDLW  7F
114A:  MOVWF  56
114B:  MOVWF  5B
114C:  BCF    0A.4
114D:  CALL   7A6
114E:  BSF    0A.4
114F:  MOVF   78,W
1150:  MOVWF  3B
*
13CE:  MOVLW  01
13CF:  MOVWF  77
13D0:  BCF    0A.4
13D1:  CALL   752
13D2:  BSF    0A.4
13D3:  MOVF   78,W
13D4:  ANDLW  7F
13D5:  MOVWF  56
13D6:  MOVWF  5B
13D7:  BCF    0A.4
13D8:  CALL   7A6
13D9:  BSF    0A.4
13DA:  MOVF   78,W
13DB:  MOVWF  3B
*
1536:  MOVLW  01
1537:  MOVWF  77
1538:  BCF    0A.4
1539:  CALL   752
153A:  BSF    0A.4
153B:  MOVF   78,W
153C:  ANDLW  7F
153D:  MOVWF  56
153E:  MOVWF  5B
153F:  BCF    0A.4
1540:  CALL   7A6
1541:  BSF    0A.4
1542:  MOVF   78,W
1543:  MOVWF  3B
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  // REG 2 - hours, 24h mode 
*
1151:  CLRF   77
1152:  BCF    0A.4
1153:  CALL   752
1154:  BSF    0A.4
1155:  MOVF   78,W
1156:  ANDLW  3F
1157:  MOVWF  56
1158:  MOVWF  5B
1159:  BCF    0A.4
115A:  CALL   7A6
115B:  BSF    0A.4
115C:  MOVF   78,W
115D:  MOVWF  3A
*
13DC:  CLRF   77
13DD:  BCF    0A.4
13DE:  CALL   752
13DF:  BSF    0A.4
13E0:  MOVF   78,W
13E1:  ANDLW  3F
13E2:  MOVWF  56
13E3:  MOVWF  5B
13E4:  BCF    0A.4
13E5:  CALL   7A6
13E6:  BSF    0A.4
13E7:  MOVF   78,W
13E8:  MOVWF  3A
*
1544:  CLRF   77
1545:  BCF    0A.4
1546:  CALL   752
1547:  BSF    0A.4
1548:  MOVF   78,W
1549:  ANDLW  3F
154A:  MOVWF  56
154B:  MOVWF  5B
154C:  BCF    0A.4
154D:  CALL   7A6
154E:  BSF    0A.4
154F:  MOVF   78,W
1550:  MOVWF  3A
....................   i2c_stop();  
*
115E:  BCF    55.4
115F:  MOVF   55,W
1160:  BSF    03.5
1161:  MOVWF  07
1162:  NOP
1163:  BCF    03.5
1164:  BSF    55.3
1165:  MOVF   55,W
1166:  BSF    03.5
1167:  MOVWF  07
1168:  BCF    03.5
1169:  BTFSS  07.3
116A:  GOTO   169
116B:  MOVLW  04
116C:  MOVWF  77
116D:  DECFSZ 77,F
116E:  GOTO   16D
116F:  GOTO   170
1170:  NOP
1171:  BSF    55.4
1172:  MOVF   55,W
1173:  BSF    03.5
1174:  MOVWF  07
1175:  MOVLW  04
1176:  MOVWF  77
1177:  BCF    03.5
1178:  DECFSZ 77,F
1179:  GOTO   178
*
13E9:  BCF    55.4
13EA:  MOVF   55,W
13EB:  BSF    03.5
13EC:  MOVWF  07
13ED:  NOP
13EE:  BCF    03.5
13EF:  BSF    55.3
13F0:  MOVF   55,W
13F1:  BSF    03.5
13F2:  MOVWF  07
13F3:  BCF    03.5
13F4:  BTFSS  07.3
13F5:  GOTO   3F4
13F6:  MOVLW  04
13F7:  MOVWF  77
13F8:  DECFSZ 77,F
13F9:  GOTO   3F8
13FA:  GOTO   3FB
13FB:  NOP
13FC:  BSF    55.4
13FD:  MOVF   55,W
13FE:  BSF    03.5
13FF:  MOVWF  07
1400:  MOVLW  04
1401:  MOVWF  77
1402:  BCF    03.5
1403:  DECFSZ 77,F
1404:  GOTO   403
*
1551:  BCF    55.4
1552:  MOVF   55,W
1553:  BSF    03.5
1554:  MOVWF  07
1555:  NOP
1556:  BCF    03.5
1557:  BSF    55.3
1558:  MOVF   55,W
1559:  BSF    03.5
155A:  MOVWF  07
155B:  BCF    03.5
155C:  BTFSS  07.3
155D:  GOTO   55C
155E:  MOVLW  04
155F:  MOVWF  77
1560:  DECFSZ 77,F
1561:  GOTO   560
1562:  GOTO   563
1563:  NOP
1564:  BSF    55.4
1565:  MOVF   55,W
1566:  BSF    03.5
1567:  MOVWF  07
1568:  MOVLW  04
1569:  MOVWF  77
156A:  BCF    03.5
156B:  DECFSZ 77,F
156C:  GOTO   56B
....................  
.................... }  
....................  
.................... //convert binary to BCD value using double dabble algorithm 
.................... int8 bin2bcd(int8 bin_value)  
.................... {  
....................   int32 dabble; 
....................   int8 hyaku, juu, ichi; 
....................   int8 i; 
....................  
....................   dabble = bin_value & 0x000000FF; 
*
091E:  MOVF   5D,W
091F:  MOVWF  5E
0920:  CLRF   5F
0921:  CLRF   60
0922:  CLRF   61
....................   for(i = 0; i < 8; i++) 
0923:  CLRF   65
0924:  MOVF   65,W
0925:  SUBLW  07
0926:  BTFSS  03.0
0927:  GOTO   1B8
....................   { 
....................     hyaku = (int8)(dabble >> 16) & 0x0F; 
0928:  MOVF   60,W
0929:  MOVWF  77
092A:  MOVF   61,W
092B:  MOVWF  78
092C:  CLRF   79
092D:  CLRF   7A
092E:  MOVF   77,W
092F:  ANDLW  0F
0930:  MOVWF  62
....................     juu   = (int8)(dabble >> 12) & 0x0F; 
0931:  CLRF   7A
0932:  RRF    61,W
0933:  MOVWF  79
0934:  RRF    60,W
0935:  MOVWF  78
0936:  RRF    5F,W
0937:  MOVWF  77
0938:  RRF    79,F
0939:  RRF    78,F
093A:  RRF    77,F
093B:  RRF    79,F
093C:  RRF    78,F
093D:  RRF    77,F
093E:  RRF    79,F
093F:  RRF    78,F
0940:  RRF    77,F
0941:  MOVLW  0F
0942:  ANDWF  79,F
0943:  MOVF   77,W
0944:  ANDLW  0F
0945:  MOVWF  63
....................     ichi  = (int8)(dabble >> 8)  & 0x0F; 
0946:  MOVF   5F,W
0947:  MOVWF  77
0948:  MOVF   60,W
0949:  MOVWF  78
094A:  MOVF   61,W
094B:  MOVWF  79
094C:  CLRF   7A
094D:  MOVF   77,W
094E:  ANDLW  0F
094F:  MOVWF  64
....................     if(hyaku >= 5) hyaku += 3; 
0950:  MOVF   62,W
0951:  SUBLW  04
0952:  BTFSC  03.0
0953:  GOTO   156
0954:  MOVLW  03
0955:  ADDWF  62,F
....................     if(juu   >= 5) juu   += 3; 
0956:  MOVF   63,W
0957:  SUBLW  04
0958:  BTFSC  03.0
0959:  GOTO   15C
095A:  MOVLW  03
095B:  ADDWF  63,F
....................     if(ichi  >= 5) ichi  += 3; 
095C:  MOVF   64,W
095D:  SUBLW  04
095E:  BTFSC  03.0
095F:  GOTO   162
0960:  MOVLW  03
0961:  ADDWF  64,F
....................     dabble = ((int32)hyaku << 16) | ((int32)juu << 12) | ((int32)ichi << 8) | (dabble & 0x000000FF); 
0962:  CLRF   69
0963:  CLRF   68
0964:  CLRF   67
0965:  MOVF   62,W
0966:  MOVWF  66
0967:  MOVF   67,W
0968:  MOVWF  69
0969:  MOVF   66,W
096A:  MOVWF  68
096B:  CLRF   66
096C:  CLRF   67
096D:  CLRF   6E
096E:  CLRF   6D
096F:  CLRF   6C
0970:  MOVF   63,W
0971:  MOVWF  6B
0972:  CLRF   77
0973:  RLF    6B,W
0974:  MOVWF  78
0975:  RLF    6C,W
0976:  MOVWF  79
0977:  RLF    6D,W
0978:  MOVWF  7A
0979:  RLF    78,F
097A:  RLF    79,F
097B:  RLF    7A,F
097C:  RLF    78,F
097D:  RLF    79,F
097E:  RLF    7A,F
097F:  RLF    78,F
0980:  RLF    79,F
0981:  RLF    7A,F
0982:  MOVLW  F0
0983:  ANDWF  78,F
0984:  MOVF   77,W
0985:  IORWF  66,F
0986:  MOVF   78,W
0987:  IORWF  67,F
0988:  MOVF   79,W
0989:  IORWF  68,F
098A:  MOVF   7A,W
098B:  IORWF  69,F
098C:  CLRF   6E
098D:  CLRF   6D
098E:  CLRF   6C
098F:  MOVF   64,W
0990:  MOVWF  6B
0991:  MOVF   6D,W
0992:  MOVWF  7A
0993:  MOVF   6C,W
0994:  MOVWF  79
0995:  MOVF   6B,W
0996:  MOVWF  78
0997:  CLRF   77
0998:  MOVF   77,W
0999:  IORWF  66,F
099A:  MOVF   78,W
099B:  IORWF  67,F
099C:  MOVF   79,W
099D:  IORWF  68,F
099E:  MOVF   7A,W
099F:  IORWF  69,F
09A0:  MOVF   5E,W
09A1:  MOVWF  77
09A2:  CLRF   78
09A3:  CLRF   79
09A4:  CLRF   7A
09A5:  MOVF   77,W
09A6:  IORWF  66,W
09A7:  MOVWF  5E
09A8:  MOVF   78,W
09A9:  IORWF  67,W
09AA:  MOVWF  5F
09AB:  MOVF   79,W
09AC:  IORWF  68,W
09AD:  MOVWF  60
09AE:  MOVF   7A,W
09AF:  IORWF  69,W
09B0:  MOVWF  61
....................     dabble <<= 1; 
09B1:  BCF    03.0
09B2:  RLF    5E,F
09B3:  RLF    5F,F
09B4:  RLF    60,F
09B5:  RLF    61,F
09B6:  INCF   65,F
09B7:  GOTO   124
....................   } 
....................   juu   = (int8)(dabble >> 12) & 0x0F; 
09B8:  CLRF   7A
09B9:  RRF    61,W
09BA:  MOVWF  79
09BB:  RRF    60,W
09BC:  MOVWF  78
09BD:  RRF    5F,W
09BE:  MOVWF  77
09BF:  RRF    79,F
09C0:  RRF    78,F
09C1:  RRF    77,F
09C2:  RRF    79,F
09C3:  RRF    78,F
09C4:  RRF    77,F
09C5:  RRF    79,F
09C6:  RRF    78,F
09C7:  RRF    77,F
09C8:  MOVLW  0F
09C9:  ANDWF  79,F
09CA:  MOVF   77,W
09CB:  ANDLW  0F
09CC:  MOVWF  63
....................   ichi  = (int8)(dabble >> 8)  & 0x0F; 
09CD:  MOVF   5F,W
09CE:  MOVWF  77
09CF:  MOVF   60,W
09D0:  MOVWF  78
09D1:  MOVF   61,W
09D2:  MOVWF  79
09D3:  CLRF   7A
09D4:  MOVF   77,W
09D5:  ANDLW  0F
09D6:  MOVWF  64
....................   return((juu << 4) | (ichi & 0x0F));  
09D7:  SWAPF  63,W
09D8:  MOVWF  66
09D9:  MOVLW  F0
09DA:  ANDWF  66,F
09DB:  MOVF   64,W
09DC:  ANDLW  0F
09DD:  IORWF  66,W
09DE:  MOVWF  78
09DF:  RETURN
.................... }  
....................  
....................  
.................... // BCD range 00 - 99 
.................... int8 bcd2bin(int8 bcd_value)  
.................... {  
....................   int8 temp; 
....................   temp = bcd_value; 
*
07A6:  MOVF   5B,W
07A7:  MOVWF  5C
....................   temp &= 0xF0; //get high nibble which store tens value 
07A8:  MOVLW  F0
07A9:  ANDWF  5C,F
....................   return((temp >> 1) + (temp >> 3) + (bcd_value & 0x0F)); //(tens * 8) + (tens * 2) + ones 
07AA:  BCF    03.0
07AB:  RRF    5C,W
07AC:  MOVWF  5D
07AD:  RRF    5C,W
07AE:  MOVWF  77
07AF:  RRF    77,F
07B0:  RRF    77,F
07B1:  MOVLW  1F
07B2:  ANDWF  77,F
07B3:  MOVF   77,W
07B4:  ADDWF  5D,F
07B5:  MOVF   5B,W
07B6:  ANDLW  0F
07B7:  ADDWF  5D,W
07B8:  MOVWF  78
07B9:  RETURN
.................... }  
....................  
.................... #include "data.c" 
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... // 		Function for fetching the data to rgb_bits structure                || 
.................... //                                                                           || 
.................... //   Last edited: 23 - April - 2014                                          || 
.................... //                                                                           || 
.................... //   void fetch_data() - depend on chosen mode, the board position and timing|| 
.................... //                       fetch appropriate data to rgb_bits structure        || 
.................... // 																		                    || 
.................... //   There are four modes:                                                   || 
.................... //					- MODE_A: data for analog clock                               || 
.................... //					- MODE_B: data for digital clock                              || 
.................... //					- MODE_C: data for an image, FPT logo                         || 
.................... //					- MODE_D: data for running letters, pLED                      || 
.................... //																			                    || 
.................... //===========================================================================|| 
....................  
.................... void fetch_data() 
.................... { 
.................... 	if(mode == MODE_A) // display analog clock 
*
0AE9:  MOVF   34,W
0AEA:  SUBLW  02
0AEB:  BTFSS  03.2
0AEC:  GOTO   337
.................... 	{ 
.................... 		// the section_count vary from 1-60 and need to adjust to 0-59 value of minute and second 
.................... 		int8 pos = section_count; 
0AED:  MOVF   2E,W
0AEE:  MOVWF  56
.................... 		if (section_count == 60)	pos = 0; 
0AEF:  MOVF   2E,W
0AF0:  SUBLW  3C
0AF1:  BTFSS  03.2
0AF2:  GOTO   2F4
0AF3:  CLRF   56
.................... 		// set default value for normal section 
.................... 		rgb_bits.blue =  0x0001; 
0AF4:  CLRF   50
0AF5:  MOVLW  01
0AF6:  MOVWF  4F
.................... 		rgb_bits.red =   0x0001; 
0AF7:  CLRF   52
0AF8:  MOVLW  01
0AF9:  MOVWF  51
.................... 		rgb_bits.green = 0x0001; 
0AFA:  CLRF   54
0AFB:  MOVLW  01
0AFC:  MOVWF  53
.................... 		// leds' value for 1-12 hour 
.................... 		if((section_count % 5) == 0) 
0AFD:  MOVF   2E,W
0AFE:  MOVWF  5A
0AFF:  MOVLW  05
0B00:  MOVWF  5B
0B01:  BCF    0A.3
0B02:  CALL   7BA
0B03:  BSF    0A.3
0B04:  MOVF   77,F
0B05:  BTFSS  03.2
0B06:  GOTO   310
.................... 		{ 
.................... 			rgb_bits.blue =  0x0003; 
0B07:  CLRF   50
0B08:  MOVLW  03
0B09:  MOVWF  4F
.................... 			rgb_bits.red =   0x0003; 
0B0A:  CLRF   52
0B0B:  MOVLW  03
0B0C:  MOVWF  51
.................... 			rgb_bits.green = 0x0003; 
0B0D:  CLRF   54
0B0E:  MOVLW  03
0B0F:  MOVWF  53
.................... 		} 
.................... 		// leds' value at 3-6-9-12 hour 
.................... 		if((section_count % 15) == 0) 
0B10:  MOVF   2E,W
0B11:  MOVWF  5A
0B12:  MOVLW  0F
0B13:  MOVWF  5B
0B14:  BCF    0A.3
0B15:  CALL   7BA
0B16:  BSF    0A.3
0B17:  MOVF   77,F
0B18:  BTFSS  03.2
0B19:  GOTO   320
.................... 		{ 
.................... 			rgb_bits.blue =  0x007; 
0B1A:  CLRF   50
0B1B:  MOVLW  07
0B1C:  MOVWF  4F
.................... 			rgb_bits.red =   0x007; 
0B1D:  CLRF   52
0B1E:  MOVLW  07
0B1F:  MOVWF  51
.................... 		} 
.................... 		// hour hand's position 
.................... 		if(pos == anal_hour) 
0B20:  MOVF   43,W
0B21:  SUBWF  56,W
0B22:  BTFSS  03.2
0B23:  GOTO   327
.................... 		{ 
.................... 			rgb_bits.blue = 0xFC00; 
0B24:  MOVLW  FC
0B25:  MOVWF  50
0B26:  CLRF   4F
.................... 		} 
.................... 		// minute hand's position 
.................... 		if(pos == min) 
0B27:  MOVF   3B,W
0B28:  SUBWF  56,W
0B29:  BTFSS  03.2
0B2A:  GOTO   32E
.................... 		{ 
.................... 			rgb_bits.red = 0xFF00; 
0B2B:  MOVLW  FF
0B2C:  MOVWF  52
0B2D:  CLRF   51
.................... 		} 
.................... 		//second hand's position 
.................... 		if(pos == sec) 
0B2E:  MOVF   3C,W
0B2F:  SUBWF  56,W
0B30:  BTFSS  03.2
0B31:  GOTO   336
.................... 		{ 
.................... 			rgb_bits.green = 0xFFF1; 
0B32:  MOVLW  FF
0B33:  MOVWF  54
0B34:  MOVLW  F1
0B35:  MOVWF  53
.................... 		} 
.................... 	} 
0B36:  GOTO   7B8
.................... 	else if(mode == MODE_C) // display an image 
0B37:  MOVF   34,W
0B38:  SUBLW  04
0B39:  BTFSS  03.2
0B3A:  GOTO   40A
.................... 	{ 
.................... 		//the image data, which stores information for entire frame, is an array 
.................... 		//display FPT logo if smode is 0 or 1 
.................... 		if (smode < 2) 
0B3B:  MOVF   35,W
0B3C:  SUBLW  01
0B3D:  BTFSS  03.0
0B3E:  GOTO   378
.................... 		{ 
.................... 			rgb_bits.blue = fpt_blue[section_count - 1]; 
0B3F:  MOVLW  01
0B40:  SUBWF  2E,W
0B41:  MOVWF  77
0B42:  BCF    03.0
0B43:  RLF    77,F
0B44:  MOVF   77,W
0B45:  MOVWF  5A
0B46:  INCF   5A,W
0B47:  BCF    0A.3
0B48:  CALL   0D8
0B49:  BSF    0A.3
0B4A:  MOVWF  7A
0B4B:  MOVF   5A,W
0B4C:  BCF    0A.3
0B4D:  CALL   0D8
0B4E:  BSF    0A.3
0B4F:  MOVWF  4F
0B50:  MOVF   7A,W
0B51:  MOVWF  50
.................... 			rgb_bits.red = fpt_red[section_count - 1]; 
0B52:  MOVLW  01
0B53:  SUBWF  2E,W
0B54:  MOVWF  77
0B55:  BCF    03.0
0B56:  RLF    77,F
0B57:  MOVF   77,W
0B58:  MOVWF  5A
0B59:  INCF   5A,W
0B5A:  BCF    0A.3
0B5B:  CALL   157
0B5C:  BSF    0A.3
0B5D:  MOVWF  7A
0B5E:  MOVF   5A,W
0B5F:  BCF    0A.3
0B60:  CALL   157
0B61:  BSF    0A.3
0B62:  MOVWF  51
0B63:  MOVF   7A,W
0B64:  MOVWF  52
.................... 			rgb_bits.green = fpt_green[section_count - 1]; 
0B65:  MOVLW  01
0B66:  SUBWF  2E,W
0B67:  MOVWF  77
0B68:  BCF    03.0
0B69:  RLF    77,F
0B6A:  MOVF   77,W
0B6B:  MOVWF  5A
0B6C:  INCF   5A,W
0B6D:  BCF    0A.3
0B6E:  CALL   1D3
0B6F:  BSF    0A.3
0B70:  MOVWF  7A
0B71:  MOVF   5A,W
0B72:  BCF    0A.3
0B73:  CALL   1D3
0B74:  BSF    0A.3
0B75:  MOVWF  53
0B76:  MOVF   7A,W
0B77:  MOVWF  54
.................... 		} 
.................... 		//display flappy bird data if smode is 2 or 3 
.................... 		//flappy birs data has two different array and is changed repeatedly 
.................... 		//to create an animation 
.................... 		if (smode > 1) 
0B78:  MOVF   35,W
0B79:  SUBLW  01
0B7A:  BTFSC  03.0
0B7B:  GOTO   409
.................... 		{ 
.................... 			//flappy data is changed each 6 frame, about 200ms 
.................... 			if (pled_count < 480) 
0B7C:  MOVF   4C,W
0B7D:  SUBLW  01
0B7E:  BTFSS  03.0
0B7F:  GOTO   3C0
0B80:  BTFSS  03.2
0B81:  GOTO   386
0B82:  MOVF   4B,W
0B83:  SUBLW  DF
0B84:  BTFSS  03.0
0B85:  GOTO   3C0
.................... 			{ 
.................... 				rgb_bits.blue = flappy1_blue[section_count-1]; 
0B86:  MOVLW  01
0B87:  SUBWF  2E,W
0B88:  MOVWF  77
0B89:  BCF    03.0
0B8A:  RLF    77,F
0B8B:  MOVF   77,W
0B8C:  MOVWF  5A
0B8D:  INCF   5A,W
0B8E:  BCF    0A.3
0B8F:  CALL   296
0B90:  BSF    0A.3
0B91:  MOVWF  7A
0B92:  MOVF   5A,W
0B93:  BCF    0A.3
0B94:  CALL   296
0B95:  BSF    0A.3
0B96:  MOVWF  4F
0B97:  MOVF   7A,W
0B98:  MOVWF  50
.................... 				rgb_bits.red = flappy1_red[section_count-1]; 
0B99:  MOVLW  01
0B9A:  SUBWF  2E,W
0B9B:  MOVWF  77
0B9C:  BCF    03.0
0B9D:  RLF    77,F
0B9E:  MOVF   77,W
0B9F:  MOVWF  5A
0BA0:  INCF   5A,W
0BA1:  BCF    0A.3
0BA2:  CALL   315
0BA3:  BSF    0A.3
0BA4:  MOVWF  7A
0BA5:  MOVF   5A,W
0BA6:  BCF    0A.3
0BA7:  CALL   315
0BA8:  BSF    0A.3
0BA9:  MOVWF  51
0BAA:  MOVF   7A,W
0BAB:  MOVWF  52
.................... 				rgb_bits.green = flappy1_green[section_count-1]; 
0BAC:  MOVLW  01
0BAD:  SUBWF  2E,W
0BAE:  MOVWF  77
0BAF:  BCF    03.0
0BB0:  RLF    77,F
0BB1:  MOVF   77,W
0BB2:  MOVWF  5A
0BB3:  INCF   5A,W
0BB4:  BCF    0A.3
0BB5:  CALL   391
0BB6:  BSF    0A.3
0BB7:  MOVWF  7A
0BB8:  MOVF   5A,W
0BB9:  BCF    0A.3
0BBA:  CALL   391
0BBB:  BSF    0A.3
0BBC:  MOVWF  53
0BBD:  MOVF   7A,W
0BBE:  MOVWF  54
.................... 			} 
0BBF:  GOTO   3F9
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.blue = flappy2_blue[section_count-1]; 
0BC0:  MOVLW  01
0BC1:  SUBWF  2E,W
0BC2:  MOVWF  77
0BC3:  BCF    03.0
0BC4:  RLF    77,F
0BC5:  MOVF   77,W
0BC6:  MOVWF  5A
0BC7:  INCF   5A,W
0BC8:  BCF    0A.3
0BC9:  CALL   410
0BCA:  BSF    0A.3
0BCB:  MOVWF  7A
0BCC:  MOVF   5A,W
0BCD:  BCF    0A.3
0BCE:  CALL   410
0BCF:  BSF    0A.3
0BD0:  MOVWF  4F
0BD1:  MOVF   7A,W
0BD2:  MOVWF  50
.................... 				rgb_bits.red = flappy2_red[section_count-1]; 
0BD3:  MOVLW  01
0BD4:  SUBWF  2E,W
0BD5:  MOVWF  77
0BD6:  BCF    03.0
0BD7:  RLF    77,F
0BD8:  MOVF   77,W
0BD9:  MOVWF  5A
0BDA:  INCF   5A,W
0BDB:  BCF    0A.3
0BDC:  CALL   48C
0BDD:  BSF    0A.3
0BDE:  MOVWF  7A
0BDF:  MOVF   5A,W
0BE0:  BCF    0A.3
0BE1:  CALL   48C
0BE2:  BSF    0A.3
0BE3:  MOVWF  51
0BE4:  MOVF   7A,W
0BE5:  MOVWF  52
.................... 				rgb_bits.green = flappy2_green[section_count-1]; 
0BE6:  MOVLW  01
0BE7:  SUBWF  2E,W
0BE8:  MOVWF  77
0BE9:  BCF    03.0
0BEA:  RLF    77,F
0BEB:  MOVF   77,W
0BEC:  MOVWF  5A
0BED:  INCF   5A,W
0BEE:  BCF    0A.3
0BEF:  CALL   50B
0BF0:  BSF    0A.3
0BF1:  MOVWF  7A
0BF2:  MOVF   5A,W
0BF3:  BCF    0A.3
0BF4:  CALL   50B
0BF5:  BSF    0A.3
0BF6:  MOVWF  53
0BF7:  MOVF   7A,W
0BF8:  MOVWF  54
.................... 			} 
.................... 			pled_count++; 
0BF9:  INCF   4B,F
0BFA:  BTFSC  03.2
0BFB:  INCF   4C,F
.................... 			if (pled_count > 960) pled_count = 0; 
0BFC:  MOVF   4C,W
0BFD:  SUBLW  02
0BFE:  BTFSC  03.0
0BFF:  GOTO   409
0C00:  XORLW  FF
0C01:  BTFSS  03.2
0C02:  GOTO   407
0C03:  MOVF   4B,W
0C04:  SUBLW  C0
0C05:  BTFSC  03.0
0C06:  GOTO   409
0C07:  CLRF   4C
0C08:  CLRF   4B
.................... 		} 
.................... 	} 
0C09:  GOTO   7B8
.................... 	// display digital clock with format hour-minute/day-month 
.................... 	else if(mode == MODE_B) 
0C0A:  MOVF   34,W
0C0B:  SUBLW  03
0C0C:  BTFSS  03.2
0C0D:  GOTO   6A9
.................... 	{ 
.................... 		rgb_bits.red = 0x8000; 
0C0E:  MOVLW  80
0C0F:  MOVWF  52
0C10:  CLRF   51
.................... 		switch (section_count) 
0C11:  MOVF   2E,W
0C12:  XORLW  34
0C13:  BTFSC  03.2
0C14:  GOTO   467
0C15:  XORLW  01
0C16:  BTFSC  03.2
0C17:  GOTO   47D
0C18:  XORLW  03
0C19:  BTFSC  03.2
0C1A:  GOTO   494
0C1B:  XORLW  0E
0C1C:  BTFSC  03.2
0C1D:  GOTO   4AB
0C1E:  XORLW  01
0C1F:  BTFSC  03.2
0C20:  GOTO   4C1
0C21:  XORLW  03
0C22:  BTFSC  03.2
0C23:  GOTO   4D8
0C24:  XORLW  38
0C25:  BTFSC  03.2
0C26:  GOTO   4EF
0C27:  XORLW  01
0C28:  BTFSC  03.2
0C29:  GOTO   505
0C2A:  XORLW  07
0C2B:  BTFSC  03.2
0C2C:  GOTO   51C
0C2D:  XORLW  02
0C2E:  BTFSC  03.2
0C2F:  GOTO   533
0C30:  XORLW  01
0C31:  BTFSC  03.2
0C32:  GOTO   549
0C33:  XORLW  0F
0C34:  BTFSC  03.2
0C35:  GOTO   560
0C36:  XORLW  34
0C37:  BTFSC  03.2
0C38:  GOTO   577
0C39:  XORLW  1B
0C3A:  BTFSC  03.2
0C3B:  GOTO   587
0C3C:  XORLW  01
0C3D:  BTFSC  03.2
0C3E:  GOTO   59E
0C3F:  XORLW  03
0C40:  BTFSC  03.2
0C41:  GOTO   5B5
0C42:  XORLW  06
0C43:  BTFSC  03.2
0C44:  GOTO   5CB
0C45:  XORLW  01
0C46:  BTFSC  03.2
0C47:  GOTO   5E2
0C48:  XORLW  03
0C49:  BTFSC  03.2
0C4A:  GOTO   5F9
0C4B:  XORLW  3A
0C4C:  BTFSC  03.2
0C4D:  GOTO   60F
0C4E:  XORLW  01
0C4F:  BTFSC  03.2
0C50:  GOTO   626
0C51:  XORLW  03
0C52:  BTFSC  03.2
0C53:  GOTO   63D
0C54:  XORLW  0E
0C55:  BTFSC  03.2
0C56:  GOTO   653
0C57:  XORLW  01
0C58:  BTFSC  03.2
0C59:  GOTO   66A
0C5A:  XORLW  03
0C5B:  BTFSC  03.2
0C5C:  GOTO   681
0C5D:  XORLW  08
0C5E:  BTFSC  03.2
0C5F:  GOTO   697
0C60:  XORLW  03
0C61:  BTFSC  03.2
0C62:  GOTO   69B
0C63:  XORLW  01
0C64:  BTFSC  03.2
0C65:  GOTO   69F
0C66:  GOTO   6A3
.................... 		{ 
.................... 			//section 52-54: display the ten of hour 
.................... 			case 52: 
.................... 				rgb_bits.green = number_upper[hour_h][0]; 
0C67:  MOVF   3F,W
0C68:  MOVWF  5A
0C69:  MOVLW  06
0C6A:  MOVWF  5B
0C6B:  BCF    0A.3
0C6C:  CALL   7CF
0C6D:  BSF    0A.3
0C6E:  MOVF   78,W
0C6F:  MOVWF  5A
0C70:  INCF   5A,W
0C71:  BCF    0A.3
0C72:  CALL   058
0C73:  BSF    0A.3
0C74:  MOVWF  7A
0C75:  MOVF   5A,W
0C76:  BCF    0A.3
0C77:  CALL   058
0C78:  BSF    0A.3
0C79:  MOVWF  53
0C7A:  MOVF   7A,W
0C7B:  MOVWF  54
.................... 				break; 
0C7C:  GOTO   6A8
.................... 			case 53: 
.................... 				rgb_bits.green = number_upper[hour_h][1]; 
0C7D:  MOVF   3F,W
0C7E:  MOVWF  5A
0C7F:  MOVLW  06
0C80:  MOVWF  5B
0C81:  BCF    0A.3
0C82:  CALL   7CF
0C83:  BSF    0A.3
0C84:  MOVLW  02
0C85:  ADDWF  78,W
0C86:  MOVWF  5A
0C87:  INCF   5A,W
0C88:  BCF    0A.3
0C89:  CALL   058
0C8A:  BSF    0A.3
0C8B:  MOVWF  7A
0C8C:  MOVF   5A,W
0C8D:  BCF    0A.3
0C8E:  CALL   058
0C8F:  BSF    0A.3
0C90:  MOVWF  53
0C91:  MOVF   7A,W
0C92:  MOVWF  54
.................... 				break; 
0C93:  GOTO   6A8
.................... 			case 54: 
.................... 				rgb_bits.green = number_upper[hour_h][2]; 
0C94:  MOVF   3F,W
0C95:  MOVWF  5A
0C96:  MOVLW  06
0C97:  MOVWF  5B
0C98:  BCF    0A.3
0C99:  CALL   7CF
0C9A:  BSF    0A.3
0C9B:  MOVLW  04
0C9C:  ADDWF  78,W
0C9D:  MOVWF  5A
0C9E:  INCF   5A,W
0C9F:  BCF    0A.3
0CA0:  CALL   058
0CA1:  BSF    0A.3
0CA2:  MOVWF  7A
0CA3:  MOVF   5A,W
0CA4:  BCF    0A.3
0CA5:  CALL   058
0CA6:  BSF    0A.3
0CA7:  MOVWF  53
0CA8:  MOVF   7A,W
0CA9:  MOVWF  54
.................... 				break; 
0CAA:  GOTO   6A8
.................... 			//section 56-58: display the unit of hour 
.................... 			case 56: 
.................... 				rgb_bits.green = number_upper[hour_l][0]; 
0CAB:  MOVF   40,W
0CAC:  MOVWF  5A
0CAD:  MOVLW  06
0CAE:  MOVWF  5B
0CAF:  BCF    0A.3
0CB0:  CALL   7CF
0CB1:  BSF    0A.3
0CB2:  MOVF   78,W
0CB3:  MOVWF  5A
0CB4:  INCF   5A,W
0CB5:  BCF    0A.3
0CB6:  CALL   058
0CB7:  BSF    0A.3
0CB8:  MOVWF  7A
0CB9:  MOVF   5A,W
0CBA:  BCF    0A.3
0CBB:  CALL   058
0CBC:  BSF    0A.3
0CBD:  MOVWF  53
0CBE:  MOVF   7A,W
0CBF:  MOVWF  54
.................... 				break; 
0CC0:  GOTO   6A8
.................... 			case 57: 
.................... 				rgb_bits.green = number_upper[hour_l][1]; 
0CC1:  MOVF   40,W
0CC2:  MOVWF  5A
0CC3:  MOVLW  06
0CC4:  MOVWF  5B
0CC5:  BCF    0A.3
0CC6:  CALL   7CF
0CC7:  BSF    0A.3
0CC8:  MOVLW  02
0CC9:  ADDWF  78,W
0CCA:  MOVWF  5A
0CCB:  INCF   5A,W
0CCC:  BCF    0A.3
0CCD:  CALL   058
0CCE:  BSF    0A.3
0CCF:  MOVWF  7A
0CD0:  MOVF   5A,W
0CD1:  BCF    0A.3
0CD2:  CALL   058
0CD3:  BSF    0A.3
0CD4:  MOVWF  53
0CD5:  MOVF   7A,W
0CD6:  MOVWF  54
.................... 				break; 
0CD7:  GOTO   6A8
.................... 			case 58: 
.................... 				rgb_bits.green = number_upper[hour_l][2]; 
0CD8:  MOVF   40,W
0CD9:  MOVWF  5A
0CDA:  MOVLW  06
0CDB:  MOVWF  5B
0CDC:  BCF    0A.3
0CDD:  CALL   7CF
0CDE:  BSF    0A.3
0CDF:  MOVLW  04
0CE0:  ADDWF  78,W
0CE1:  MOVWF  5A
0CE2:  INCF   5A,W
0CE3:  BCF    0A.3
0CE4:  CALL   058
0CE5:  BSF    0A.3
0CE6:  MOVWF  7A
0CE7:  MOVF   5A,W
0CE8:  BCF    0A.3
0CE9:  CALL   058
0CEA:  BSF    0A.3
0CEB:  MOVWF  53
0CEC:  MOVF   7A,W
0CED:  MOVWF  54
.................... 				break; 
0CEE:  GOTO   6A8
.................... 			//section 2-4: display the ten of minute 
.................... 			case 2: 
.................... 				rgb_bits.green = number_upper[min_h][0]; 
0CEF:  MOVF   41,W
0CF0:  MOVWF  5A
0CF1:  MOVLW  06
0CF2:  MOVWF  5B
0CF3:  BCF    0A.3
0CF4:  CALL   7CF
0CF5:  BSF    0A.3
0CF6:  MOVF   78,W
0CF7:  MOVWF  5A
0CF8:  INCF   5A,W
0CF9:  BCF    0A.3
0CFA:  CALL   058
0CFB:  BSF    0A.3
0CFC:  MOVWF  7A
0CFD:  MOVF   5A,W
0CFE:  BCF    0A.3
0CFF:  CALL   058
0D00:  BSF    0A.3
0D01:  MOVWF  53
0D02:  MOVF   7A,W
0D03:  MOVWF  54
.................... 				break; 
0D04:  GOTO   6A8
.................... 			case 3: 
.................... 				rgb_bits.green = number_upper[min_h][1]; 
0D05:  MOVF   41,W
0D06:  MOVWF  5A
0D07:  MOVLW  06
0D08:  MOVWF  5B
0D09:  BCF    0A.3
0D0A:  CALL   7CF
0D0B:  BSF    0A.3
0D0C:  MOVLW  02
0D0D:  ADDWF  78,W
0D0E:  MOVWF  5A
0D0F:  INCF   5A,W
0D10:  BCF    0A.3
0D11:  CALL   058
0D12:  BSF    0A.3
0D13:  MOVWF  7A
0D14:  MOVF   5A,W
0D15:  BCF    0A.3
0D16:  CALL   058
0D17:  BSF    0A.3
0D18:  MOVWF  53
0D19:  MOVF   7A,W
0D1A:  MOVWF  54
.................... 				break; 
0D1B:  GOTO   6A8
.................... 			case 4: 
.................... 				rgb_bits.green = number_upper[min_h][2]; 
0D1C:  MOVF   41,W
0D1D:  MOVWF  5A
0D1E:  MOVLW  06
0D1F:  MOVWF  5B
0D20:  BCF    0A.3
0D21:  CALL   7CF
0D22:  BSF    0A.3
0D23:  MOVLW  04
0D24:  ADDWF  78,W
0D25:  MOVWF  5A
0D26:  INCF   5A,W
0D27:  BCF    0A.3
0D28:  CALL   058
0D29:  BSF    0A.3
0D2A:  MOVWF  7A
0D2B:  MOVF   5A,W
0D2C:  BCF    0A.3
0D2D:  CALL   058
0D2E:  BSF    0A.3
0D2F:  MOVWF  53
0D30:  MOVF   7A,W
0D31:  MOVWF  54
.................... 				break; 
0D32:  GOTO   6A8
.................... 			//section 6-8: display the unit of minute 
.................... 			case 6: 
.................... 				rgb_bits.green = number_upper[min_l][0]; 
0D33:  MOVF   42,W
0D34:  MOVWF  5A
0D35:  MOVLW  06
0D36:  MOVWF  5B
0D37:  BCF    0A.3
0D38:  CALL   7CF
0D39:  BSF    0A.3
0D3A:  MOVF   78,W
0D3B:  MOVWF  5A
0D3C:  INCF   5A,W
0D3D:  BCF    0A.3
0D3E:  CALL   058
0D3F:  BSF    0A.3
0D40:  MOVWF  7A
0D41:  MOVF   5A,W
0D42:  BCF    0A.3
0D43:  CALL   058
0D44:  BSF    0A.3
0D45:  MOVWF  53
0D46:  MOVF   7A,W
0D47:  MOVWF  54
.................... 				break; 
0D48:  GOTO   6A8
.................... 			case 7: 
.................... 				rgb_bits.green = number_upper[min_l][1]; 
0D49:  MOVF   42,W
0D4A:  MOVWF  5A
0D4B:  MOVLW  06
0D4C:  MOVWF  5B
0D4D:  BCF    0A.3
0D4E:  CALL   7CF
0D4F:  BSF    0A.3
0D50:  MOVLW  02
0D51:  ADDWF  78,W
0D52:  MOVWF  5A
0D53:  INCF   5A,W
0D54:  BCF    0A.3
0D55:  CALL   058
0D56:  BSF    0A.3
0D57:  MOVWF  7A
0D58:  MOVF   5A,W
0D59:  BCF    0A.3
0D5A:  CALL   058
0D5B:  BSF    0A.3
0D5C:  MOVWF  53
0D5D:  MOVF   7A,W
0D5E:  MOVWF  54
.................... 				break; 
0D5F:  GOTO   6A8
.................... 			case 8: 
.................... 				rgb_bits.green = number_upper[min_l][2]; 
0D60:  MOVF   42,W
0D61:  MOVWF  5A
0D62:  MOVLW  06
0D63:  MOVWF  5B
0D64:  BCF    0A.3
0D65:  CALL   7CF
0D66:  BSF    0A.3
0D67:  MOVLW  04
0D68:  ADDWF  78,W
0D69:  MOVWF  5A
0D6A:  INCF   5A,W
0D6B:  BCF    0A.3
0D6C:  CALL   058
0D6D:  BSF    0A.3
0D6E:  MOVWF  7A
0D6F:  MOVF   5A,W
0D70:  BCF    0A.3
0D71:  CALL   058
0D72:  BSF    0A.3
0D73:  MOVWF  53
0D74:  MOVF   7A,W
0D75:  MOVWF  54
.................... 				break; 
0D76:  GOTO   6A8
.................... 			////section 60: display the second mark, 0.5s on and 0.5s off 
.................... 			case 60: 
.................... 				if(digit_sec < 15) 
0D77:  MOVF   3E,W
0D78:  SUBLW  0E
0D79:  BTFSS  03.0
0D7A:  GOTO   57F
.................... 					rgb_bits.green = 0x00A0; 
0D7B:  CLRF   54
0D7C:  MOVLW  A0
0D7D:  MOVWF  53
0D7E:  GOTO   581
.................... 				else 
.................... 					rgb_bits.green = 0x0000; 
0D7F:  CLRF   54
0D80:  CLRF   53
.................... 				if(digit_sec > 30) 
0D81:  MOVF   3E,W
0D82:  SUBLW  1E
0D83:  BTFSC  03.0
0D84:  GOTO   586
.................... 					digit_sec = 0; 
0D85:  CLRF   3E
.................... 				break; 
0D86:  GOTO   6A8
.................... 			//section 37-39: display the ten of day 
.................... 			case 39: 
.................... 				rgb_bits.blue = number_lower[day_h][2]; 
0D87:  MOVF   44,W
0D88:  MOVWF  5A
0D89:  MOVLW  06
0D8A:  MOVWF  5B
0D8B:  BCF    0A.3
0D8C:  CALL   7CF
0D8D:  BSF    0A.3
0D8E:  MOVLW  04
0D8F:  ADDWF  78,W
0D90:  MOVWF  5A
0D91:  INCF   5A,W
0D92:  BCF    0A.3
0D93:  CALL   098
0D94:  BSF    0A.3
0D95:  MOVWF  7A
0D96:  MOVF   5A,W
0D97:  BCF    0A.3
0D98:  CALL   098
0D99:  BSF    0A.3
0D9A:  MOVWF  4F
0D9B:  MOVF   7A,W
0D9C:  MOVWF  50
.................... 				break; 
0D9D:  GOTO   6A8
.................... 			case 38: 
.................... 				rgb_bits.blue = number_lower[day_h][1]; 
0D9E:  MOVF   44,W
0D9F:  MOVWF  5A
0DA0:  MOVLW  06
0DA1:  MOVWF  5B
0DA2:  BCF    0A.3
0DA3:  CALL   7CF
0DA4:  BSF    0A.3
0DA5:  MOVLW  02
0DA6:  ADDWF  78,W
0DA7:  MOVWF  5A
0DA8:  INCF   5A,W
0DA9:  BCF    0A.3
0DAA:  CALL   098
0DAB:  BSF    0A.3
0DAC:  MOVWF  7A
0DAD:  MOVF   5A,W
0DAE:  BCF    0A.3
0DAF:  CALL   098
0DB0:  BSF    0A.3
0DB1:  MOVWF  4F
0DB2:  MOVF   7A,W
0DB3:  MOVWF  50
.................... 				break; 
0DB4:  GOTO   6A8
.................... 			case 37: 
.................... 				rgb_bits.blue = number_lower[day_h][0]; 
0DB5:  MOVF   44,W
0DB6:  MOVWF  5A
0DB7:  MOVLW  06
0DB8:  MOVWF  5B
0DB9:  BCF    0A.3
0DBA:  CALL   7CF
0DBB:  BSF    0A.3
0DBC:  MOVF   78,W
0DBD:  MOVWF  5A
0DBE:  INCF   5A,W
0DBF:  BCF    0A.3
0DC0:  CALL   098
0DC1:  BSF    0A.3
0DC2:  MOVWF  7A
0DC3:  MOVF   5A,W
0DC4:  BCF    0A.3
0DC5:  CALL   098
0DC6:  BSF    0A.3
0DC7:  MOVWF  4F
0DC8:  MOVF   7A,W
0DC9:  MOVWF  50
.................... 				break; 
0DCA:  GOTO   6A8
.................... 			//section 33-35: display the unit of day 
.................... 			case 35: 
.................... 				rgb_bits.blue = number_lower[day_l][2]; 
0DCB:  MOVF   45,W
0DCC:  MOVWF  5A
0DCD:  MOVLW  06
0DCE:  MOVWF  5B
0DCF:  BCF    0A.3
0DD0:  CALL   7CF
0DD1:  BSF    0A.3
0DD2:  MOVLW  04
0DD3:  ADDWF  78,W
0DD4:  MOVWF  5A
0DD5:  INCF   5A,W
0DD6:  BCF    0A.3
0DD7:  CALL   098
0DD8:  BSF    0A.3
0DD9:  MOVWF  7A
0DDA:  MOVF   5A,W
0DDB:  BCF    0A.3
0DDC:  CALL   098
0DDD:  BSF    0A.3
0DDE:  MOVWF  4F
0DDF:  MOVF   7A,W
0DE0:  MOVWF  50
.................... 				break; 
0DE1:  GOTO   6A8
.................... 			case 34: 
.................... 				rgb_bits.blue = number_lower[day_l][1]; 
0DE2:  MOVF   45,W
0DE3:  MOVWF  5A
0DE4:  MOVLW  06
0DE5:  MOVWF  5B
0DE6:  BCF    0A.3
0DE7:  CALL   7CF
0DE8:  BSF    0A.3
0DE9:  MOVLW  02
0DEA:  ADDWF  78,W
0DEB:  MOVWF  5A
0DEC:  INCF   5A,W
0DED:  BCF    0A.3
0DEE:  CALL   098
0DEF:  BSF    0A.3
0DF0:  MOVWF  7A
0DF1:  MOVF   5A,W
0DF2:  BCF    0A.3
0DF3:  CALL   098
0DF4:  BSF    0A.3
0DF5:  MOVWF  4F
0DF6:  MOVF   7A,W
0DF7:  MOVWF  50
.................... 				break; 
0DF8:  GOTO   6A8
.................... 			case 33: 
.................... 				rgb_bits.blue = number_lower[day_l][0]; 
0DF9:  MOVF   45,W
0DFA:  MOVWF  5A
0DFB:  MOVLW  06
0DFC:  MOVWF  5B
0DFD:  BCF    0A.3
0DFE:  CALL   7CF
0DFF:  BSF    0A.3
0E00:  MOVF   78,W
0E01:  MOVWF  5A
0E02:  INCF   5A,W
0E03:  BCF    0A.3
0E04:  CALL   098
0E05:  BSF    0A.3
0E06:  MOVWF  7A
0E07:  MOVF   5A,W
0E08:  BCF    0A.3
0E09:  CALL   098
0E0A:  BSF    0A.3
0E0B:  MOVWF  4F
0E0C:  MOVF   7A,W
0E0D:  MOVWF  50
.................... 				break; 
0E0E:  GOTO   6A8
.................... 			//section 25-27: display the ten of month 
.................... 			case 27: 
.................... 				rgb_bits.blue = number_lower[month_h][2]; 
0E0F:  MOVF   46,W
0E10:  MOVWF  5A
0E11:  MOVLW  06
0E12:  MOVWF  5B
0E13:  BCF    0A.3
0E14:  CALL   7CF
0E15:  BSF    0A.3
0E16:  MOVLW  04
0E17:  ADDWF  78,W
0E18:  MOVWF  5A
0E19:  INCF   5A,W
0E1A:  BCF    0A.3
0E1B:  CALL   098
0E1C:  BSF    0A.3
0E1D:  MOVWF  7A
0E1E:  MOVF   5A,W
0E1F:  BCF    0A.3
0E20:  CALL   098
0E21:  BSF    0A.3
0E22:  MOVWF  4F
0E23:  MOVF   7A,W
0E24:  MOVWF  50
.................... 				break; 
0E25:  GOTO   6A8
.................... 			case 26: 
.................... 				rgb_bits.blue = number_lower[month_h][1]; 
0E26:  MOVF   46,W
0E27:  MOVWF  5A
0E28:  MOVLW  06
0E29:  MOVWF  5B
0E2A:  BCF    0A.3
0E2B:  CALL   7CF
0E2C:  BSF    0A.3
0E2D:  MOVLW  02
0E2E:  ADDWF  78,W
0E2F:  MOVWF  5A
0E30:  INCF   5A,W
0E31:  BCF    0A.3
0E32:  CALL   098
0E33:  BSF    0A.3
0E34:  MOVWF  7A
0E35:  MOVF   5A,W
0E36:  BCF    0A.3
0E37:  CALL   098
0E38:  BSF    0A.3
0E39:  MOVWF  4F
0E3A:  MOVF   7A,W
0E3B:  MOVWF  50
.................... 				break; 
0E3C:  GOTO   6A8
.................... 			case 25: 
.................... 				rgb_bits.blue = number_lower[month_h][0]; 
0E3D:  MOVF   46,W
0E3E:  MOVWF  5A
0E3F:  MOVLW  06
0E40:  MOVWF  5B
0E41:  BCF    0A.3
0E42:  CALL   7CF
0E43:  BSF    0A.3
0E44:  MOVF   78,W
0E45:  MOVWF  5A
0E46:  INCF   5A,W
0E47:  BCF    0A.3
0E48:  CALL   098
0E49:  BSF    0A.3
0E4A:  MOVWF  7A
0E4B:  MOVF   5A,W
0E4C:  BCF    0A.3
0E4D:  CALL   098
0E4E:  BSF    0A.3
0E4F:  MOVWF  4F
0E50:  MOVF   7A,W
0E51:  MOVWF  50
.................... 				break; 
0E52:  GOTO   6A8
.................... 			//section 21-23: display the unit of month 
.................... 			case 23: 
.................... 				rgb_bits.blue = number_lower[month_l][2]; 
0E53:  MOVF   47,W
0E54:  MOVWF  5A
0E55:  MOVLW  06
0E56:  MOVWF  5B
0E57:  BCF    0A.3
0E58:  CALL   7CF
0E59:  BSF    0A.3
0E5A:  MOVLW  04
0E5B:  ADDWF  78,W
0E5C:  MOVWF  5A
0E5D:  INCF   5A,W
0E5E:  BCF    0A.3
0E5F:  CALL   098
0E60:  BSF    0A.3
0E61:  MOVWF  7A
0E62:  MOVF   5A,W
0E63:  BCF    0A.3
0E64:  CALL   098
0E65:  BSF    0A.3
0E66:  MOVWF  4F
0E67:  MOVF   7A,W
0E68:  MOVWF  50
.................... 				break; 
0E69:  GOTO   6A8
.................... 			case 22: 
.................... 				rgb_bits.blue = number_lower[month_l][1]; 
0E6A:  MOVF   47,W
0E6B:  MOVWF  5A
0E6C:  MOVLW  06
0E6D:  MOVWF  5B
0E6E:  BCF    0A.3
0E6F:  CALL   7CF
0E70:  BSF    0A.3
0E71:  MOVLW  02
0E72:  ADDWF  78,W
0E73:  MOVWF  5A
0E74:  INCF   5A,W
0E75:  BCF    0A.3
0E76:  CALL   098
0E77:  BSF    0A.3
0E78:  MOVWF  7A
0E79:  MOVF   5A,W
0E7A:  BCF    0A.3
0E7B:  CALL   098
0E7C:  BSF    0A.3
0E7D:  MOVWF  4F
0E7E:  MOVF   7A,W
0E7F:  MOVWF  50
.................... 				break; 
0E80:  GOTO   6A8
.................... 			case 21: 
.................... 				rgb_bits.blue = number_lower[month_l][0]; 
0E81:  MOVF   47,W
0E82:  MOVWF  5A
0E83:  MOVLW  06
0E84:  MOVWF  5B
0E85:  BCF    0A.3
0E86:  CALL   7CF
0E87:  BSF    0A.3
0E88:  MOVF   78,W
0E89:  MOVWF  5A
0E8A:  INCF   5A,W
0E8B:  BCF    0A.3
0E8C:  CALL   098
0E8D:  BSF    0A.3
0E8E:  MOVWF  7A
0E8F:  MOVF   5A,W
0E90:  BCF    0A.3
0E91:  CALL   098
0E92:  BSF    0A.3
0E93:  MOVWF  4F
0E94:  MOVF   7A,W
0E95:  MOVWF  50
.................... 				break; 
0E96:  GOTO   6A8
.................... 			////section 29-31: display the hyphen 
.................... 			case 29: 
.................... 				rgb_bits.blue = 0x0040; 
0E97:  CLRF   50
0E98:  MOVLW  40
0E99:  MOVWF  4F
.................... 				break; 
0E9A:  GOTO   6A8
.................... 			case 30: 
.................... 				rgb_bits.blue = 0x0040; 
0E9B:  CLRF   50
0E9C:  MOVLW  40
0E9D:  MOVWF  4F
.................... 				break; 
0E9E:  GOTO   6A8
.................... 			case 31: 
.................... 				rgb_bits.blue = 0x0040; 
0E9F:  CLRF   50
0EA0:  MOVLW  40
0EA1:  MOVWF  4F
.................... 				break; 
0EA2:  GOTO   6A8
.................... 			default: 
.................... 				rgb_bits.green = 0x0000; 
0EA3:  CLRF   54
0EA4:  CLRF   53
.................... 				rgb_bits.blue = 0x0000; 
0EA5:  CLRF   50
0EA6:  CLRF   4F
.................... 				break; 
0EA7:  GOTO   6A8
.................... 		} 	 
.................... 	} 
0EA8:  GOTO   7B8
.................... 	else if (mode == MODE_D) // display running letters 
0EA9:  MOVF   34,W
0EAA:  SUBLW  05
0EAB:  BTFSS  03.2
0EAC:  GOTO   7B8
.................... 	{ 	 
.................... 		//default value 
.................... 		rgb_bits.blue = 0x0000; 
0EAD:  CLRF   50
0EAE:  CLRF   4F
.................... 		rgb_bits.red = 0x0000; 
0EAF:  CLRF   52
0EB0:  CLRF   51
.................... 		rgb_bits.green = 0x0000; 
0EB1:  CLRF   54
0EB2:  CLRF   53
.................... 		//pcount is used for "pled_inward" array index 
.................... 		//value of pcount is calculated base on NODE position and pled_position 
.................... 		int8 pcount, ycount, year_position; 
.................... 		pcount = section_count - pled_position + 14; 
0EB3:  MOVF   48,W
0EB4:  SUBWF  2E,W
0EB5:  ADDLW  0E
0EB6:  MOVWF  57
.................... 		if (pled_position < 31 ) year_position = pled_position + 30; 
0EB7:  MOVF   48,W
0EB8:  SUBLW  1E
0EB9:  BTFSS  03.0
0EBA:  GOTO   6BF
0EBB:  MOVLW  1E
0EBC:  ADDWF  48,W
0EBD:  MOVWF  59
0EBE:  GOTO   6C2
.................... 		else year_position = pled_position - 30; 
0EBF:  MOVLW  1E
0EC0:  SUBWF  48,W
0EC1:  MOVWF  59
.................... 		ycount = section_count - year_position + 14; 
0EC2:  MOVF   59,W
0EC3:  SUBWF  2E,W
0EC4:  ADDLW  0E
0EC5:  MOVWF  58
.................... 		//adjust pcount if its value out of 1-60 range 
.................... 		if (pcount >= 60)	pcount = pcount - 60; 
0EC6:  MOVF   57,W
0EC7:  SUBLW  3B
0EC8:  BTFSC  03.0
0EC9:  GOTO   6CC
0ECA:  MOVLW  3C
0ECB:  SUBWF  57,F
.................... 		if (ycount >= 60)	ycount = ycount - 60; 
0ECC:  MOVF   58,W
0ECD:  SUBLW  3B
0ECE:  BTFSC  03.0
0ECF:  GOTO   6D2
0ED0:  MOVLW  3C
0ED1:  SUBWF  58,F
.................... 		if (pcount >=0 && pcount < 15) 
0ED2:  MOVF   57,W
0ED3:  SUBLW  0E
0ED4:  BTFSS  03.0
0ED5:  GOTO   730
.................... 		{ 
.................... 			//each letter has different color 
.................... 			if(pcount > 11) rgb_bits.blue = pled_inward[pcount]; 
0ED6:  MOVF   57,W
0ED7:  SUBLW  0B
0ED8:  BTFSC  03.0
0ED9:  GOTO   6EA
0EDA:  BCF    03.0
0EDB:  RLF    57,W
0EDC:  MOVWF  5A
0EDD:  INCF   5A,W
0EDE:  BCF    0A.3
0EDF:  CALL   252
0EE0:  BSF    0A.3
0EE1:  MOVWF  7A
0EE2:  MOVF   5A,W
0EE3:  BCF    0A.3
0EE4:  CALL   252
0EE5:  BSF    0A.3
0EE6:  MOVWF  4F
0EE7:  MOVF   7A,W
0EE8:  MOVWF  50
0EE9:  GOTO   730
.................... 			else if(pcount > 7) rgb_bits.red = pled_inward[pcount]; 
0EEA:  MOVF   57,W
0EEB:  SUBLW  07
0EEC:  BTFSC  03.0
0EED:  GOTO   6FE
0EEE:  BCF    03.0
0EEF:  RLF    57,W
0EF0:  MOVWF  5A
0EF1:  INCF   5A,W
0EF2:  BCF    0A.3
0EF3:  CALL   252
0EF4:  BSF    0A.3
0EF5:  MOVWF  7A
0EF6:  MOVF   5A,W
0EF7:  BCF    0A.3
0EF8:  CALL   252
0EF9:  BSF    0A.3
0EFA:  MOVWF  51
0EFB:  MOVF   7A,W
0EFC:  MOVWF  52
0EFD:  GOTO   730
.................... 			else if(pcount > 3) rgb_bits.green = pled_inward[pcount]; 
0EFE:  MOVF   57,W
0EFF:  SUBLW  03
0F00:  BTFSC  03.0
0F01:  GOTO   712
0F02:  BCF    03.0
0F03:  RLF    57,W
0F04:  MOVWF  5A
0F05:  INCF   5A,W
0F06:  BCF    0A.3
0F07:  CALL   252
0F08:  BSF    0A.3
0F09:  MOVWF  7A
0F0A:  MOVF   5A,W
0F0B:  BCF    0A.3
0F0C:  CALL   252
0F0D:  BSF    0A.3
0F0E:  MOVWF  53
0F0F:  MOVF   7A,W
0F10:  MOVWF  54
0F11:  GOTO   730
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.red = pled_inward[pcount]; 
0F12:  BCF    03.0
0F13:  RLF    57,W
0F14:  MOVWF  5A
0F15:  INCF   5A,W
0F16:  BCF    0A.3
0F17:  CALL   252
0F18:  BSF    0A.3
0F19:  MOVWF  7A
0F1A:  MOVF   5A,W
0F1B:  BCF    0A.3
0F1C:  CALL   252
0F1D:  BSF    0A.3
0F1E:  MOVWF  51
0F1F:  MOVF   7A,W
0F20:  MOVWF  52
.................... 				rgb_bits.green = pled_inward[pcount]; 
0F21:  BCF    03.0
0F22:  RLF    57,W
0F23:  MOVWF  5A
0F24:  INCF   5A,W
0F25:  BCF    0A.3
0F26:  CALL   252
0F27:  BSF    0A.3
0F28:  MOVWF  7A
0F29:  MOVF   5A,W
0F2A:  BCF    0A.3
0F2B:  CALL   252
0F2C:  BSF    0A.3
0F2D:  MOVWF  53
0F2E:  MOVF   7A,W
0F2F:  MOVWF  54
.................... 			} 
.................... 		} 
.................... 		if (ycount >=0 && ycount < 15) 
0F30:  MOVF   58,W
0F31:  SUBLW  0E
0F32:  BTFSS  03.0
0F33:  GOTO   79D
.................... 		{ 
.................... 			if(ycount > 11) rgb_bits.blue = year_2014[ycount]; 
0F34:  MOVF   58,W
0F35:  SUBLW  0B
0F36:  BTFSC  03.0
0F37:  GOTO   748
0F38:  BCF    03.0
0F39:  RLF    58,W
0F3A:  MOVWF  5A
0F3B:  INCF   5A,W
0F3C:  BCF    0A.3
0F3D:  CALL   274
0F3E:  BSF    0A.3
0F3F:  MOVWF  7A
0F40:  MOVF   5A,W
0F41:  BCF    0A.3
0F42:  CALL   274
0F43:  BSF    0A.3
0F44:  MOVWF  4F
0F45:  MOVF   7A,W
0F46:  MOVWF  50
0F47:  GOTO   79D
.................... 			else if(ycount > 7) 
0F48:  MOVF   58,W
0F49:  SUBLW  07
0F4A:  BTFSC  03.0
0F4B:  GOTO   76B
.................... 			{ 
.................... 				rgb_bits.blue = year_2014[ycount]; 
0F4C:  BCF    03.0
0F4D:  RLF    58,W
0F4E:  MOVWF  5A
0F4F:  INCF   5A,W
0F50:  BCF    0A.3
0F51:  CALL   274
0F52:  BSF    0A.3
0F53:  MOVWF  7A
0F54:  MOVF   5A,W
0F55:  BCF    0A.3
0F56:  CALL   274
0F57:  BSF    0A.3
0F58:  MOVWF  4F
0F59:  MOVF   7A,W
0F5A:  MOVWF  50
.................... 				rgb_bits.green = year_2014[ycount]; 
0F5B:  BCF    03.0
0F5C:  RLF    58,W
0F5D:  MOVWF  5A
0F5E:  INCF   5A,W
0F5F:  BCF    0A.3
0F60:  CALL   274
0F61:  BSF    0A.3
0F62:  MOVWF  7A
0F63:  MOVF   5A,W
0F64:  BCF    0A.3
0F65:  CALL   274
0F66:  BSF    0A.3
0F67:  MOVWF  53
0F68:  MOVF   7A,W
0F69:  MOVWF  54
.................... 			} 
0F6A:  GOTO   79D
.................... 			else if(ycount > 3) rgb_bits.blue = year_2014[ycount]; 
0F6B:  MOVF   58,W
0F6C:  SUBLW  03
0F6D:  BTFSC  03.0
0F6E:  GOTO   77F
0F6F:  BCF    03.0
0F70:  RLF    58,W
0F71:  MOVWF  5A
0F72:  INCF   5A,W
0F73:  BCF    0A.3
0F74:  CALL   274
0F75:  BSF    0A.3
0F76:  MOVWF  7A
0F77:  MOVF   5A,W
0F78:  BCF    0A.3
0F79:  CALL   274
0F7A:  BSF    0A.3
0F7B:  MOVWF  4F
0F7C:  MOVF   7A,W
0F7D:  MOVWF  50
0F7E:  GOTO   79D
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.blue = year_2014[ycount]; 
0F7F:  BCF    03.0
0F80:  RLF    58,W
0F81:  MOVWF  5A
0F82:  INCF   5A,W
0F83:  BCF    0A.3
0F84:  CALL   274
0F85:  BSF    0A.3
0F86:  MOVWF  7A
0F87:  MOVF   5A,W
0F88:  BCF    0A.3
0F89:  CALL   274
0F8A:  BSF    0A.3
0F8B:  MOVWF  4F
0F8C:  MOVF   7A,W
0F8D:  MOVWF  50
.................... 				rgb_bits.green = year_2014[ycount]; 
0F8E:  BCF    03.0
0F8F:  RLF    58,W
0F90:  MOVWF  5A
0F91:  INCF   5A,W
0F92:  BCF    0A.3
0F93:  CALL   274
0F94:  BSF    0A.3
0F95:  MOVWF  7A
0F96:  MOVF   5A,W
0F97:  BCF    0A.3
0F98:  CALL   274
0F99:  BSF    0A.3
0F9A:  MOVWF  53
0F9B:  MOVF   7A,W
0F9C:  MOVWF  54
.................... 			} 
.................... 		} 
.................... 	  	 
.................... 		//change text's position 
.................... 		pled_count++; 
0F9D:  INCF   4B,F
0F9E:  BTFSC  03.2
0F9F:  INCF   4C,F
.................... 		//text position is changed each 2 frames 
.................... 		if (pled_count > 120) 
0FA0:  MOVF   4C,F
0FA1:  BTFSS  03.2
0FA2:  GOTO   7A7
0FA3:  MOVF   4B,W
0FA4:  SUBLW  78
0FA5:  BTFSC  03.0
0FA6:  GOTO   7AC
.................... 		{ 
.................... 			pled_count = 0; 
0FA7:  CLRF   4C
0FA8:  CLRF   4B
.................... 			pled_position = pled_position + pled_direction; 
0FA9:  MOVF   49,W
0FAA:  ADDWF  48,W
0FAB:  MOVWF  48
.................... 		} 
.................... 		if (pled_position == 0) pled_position = 60; 
0FAC:  MOVF   48,F
0FAD:  BTFSS  03.2
0FAE:  GOTO   7B2
0FAF:  MOVLW  3C
0FB0:  MOVWF  48
0FB1:  GOTO   7B8
.................... 		else if (pled_position == 61) pled_position = 1; 
0FB2:  MOVF   48,W
0FB3:  SUBLW  3D
0FB4:  BTFSS  03.2
0FB5:  GOTO   7B8
0FB6:  MOVLW  01
0FB7:  MOVWF  48
.................... 	} 
0FB8:  BCF    0A.3
0FB9:  BSF    0A.4
0FBA:  GOTO   61B (RETURN)
.................... } 
....................  
....................  
.................... #PRIORITY INT_CCP1, INT_TIMER0, INT_EXT, INT_RB 
....................  
.................... #INT_EXT 
.................... void EXT_isr(){ 
.................... 	//each SQW/OUT of DS1307 will trigger this isr 
.................... 	//with 1Hz frequency 
.................... 	tick += 1; 
*
0587:  MOVLW  01
0588:  ADDWF  3D,F
.................... 	sec++; 
0589:  INCF   3C,F
.................... } 
....................  
058A:  BCF    0B.1
058B:  BCF    0A.3
058C:  BCF    0A.4
058D:  GOTO   035
.................... #INT_RB 
.................... void  RB_isr(void)  
.................... { 
....................    BYTE changes; 
....................    port_b = input_b(); 
058E:  MOVLW  FF
058F:  BSF    03.5
0590:  MOVWF  06
0591:  BCF    03.5
0592:  MOVF   06,W
0593:  MOVWF  32
....................    //compare status of port B with previous value 
....................    changes = last_b ^ port_b; 
0594:  MOVF   33,W
0595:  XORWF  32,W
0596:  MOVWF  71
....................    last_b = port_b; 
0597:  MOVF   32,W
0598:  MOVWF  33
....................    if(bit_test(changes, 2)) 
0599:  BTFSS  71.2
059A:  GOTO   59F
....................    { 
....................       mode = MODE_A; 
059B:  MOVLW  02
059C:  MOVWF  34
....................       smode = 1; 
059D:  MOVLW  01
059E:  MOVWF  35
....................    } 
....................    if(bit_test(changes, 3)) 
059F:  BTFSS  71.3
05A0:  GOTO   5A5
....................    { 
....................       mode = MODE_B; 
05A1:  MOVLW  03
05A2:  MOVWF  34
....................       smode = 1; 
05A3:  MOVLW  01
05A4:  MOVWF  35
....................    } 
....................    if(bit_test(changes, 4)) 
05A5:  BTFSS  71.4
05A6:  GOTO   5C0
....................    { 
....................       mode = MODE_C; 
05A7:  MOVLW  04
05A8:  MOVWF  34
....................       //change value of smode in range of 0-3 
....................       if (smode == 0) smode = 1; 
05A9:  MOVF   35,F
05AA:  BTFSS  03.2
05AB:  GOTO   5AF
05AC:  MOVLW  01
05AD:  MOVWF  35
05AE:  GOTO   5C0
....................       else if (smode == 1) smode = 2; 
05AF:  DECFSZ 35,W
05B0:  GOTO   5B4
05B1:  MOVLW  02
05B2:  MOVWF  35
05B3:  GOTO   5C0
....................       else if (smode == 2) smode = 3; 
05B4:  MOVF   35,W
05B5:  SUBLW  02
05B6:  BTFSS  03.2
05B7:  GOTO   5BB
05B8:  MOVLW  03
05B9:  MOVWF  35
05BA:  GOTO   5C0
....................       else if (smode == 3) smode = 0; 
05BB:  MOVF   35,W
05BC:  SUBLW  03
05BD:  BTFSS  03.2
05BE:  GOTO   5C0
05BF:  CLRF   35
....................    } 
....................    if(bit_test(changes, 5)) 
05C0:  BTFSS  71.5
05C1:  GOTO   5F1
....................    { 
....................       mode = MODE_D; 
05C2:  MOVLW  05
05C3:  MOVWF  34
....................       smode = 1; 
05C4:  MOVLW  01
05C5:  MOVWF  35
....................       //change direction of text: clockwise, anti-clockwise, still 
....................       if (pled_status == 0) pled_status = 1; 
05C6:  MOVF   4A,F
05C7:  BTFSS  03.2
05C8:  GOTO   5CC
05C9:  MOVLW  01
05CA:  MOVWF  4A
05CB:  GOTO   5DD
....................       else if (pled_status == 1) pled_status = 2; 
05CC:  DECFSZ 4A,W
05CD:  GOTO   5D1
05CE:  MOVLW  02
05CF:  MOVWF  4A
05D0:  GOTO   5DD
....................       else if (pled_status == 2) pled_status = 3; 
05D1:  MOVF   4A,W
05D2:  SUBLW  02
05D3:  BTFSS  03.2
05D4:  GOTO   5D8
05D5:  MOVLW  03
05D6:  MOVWF  4A
05D7:  GOTO   5DD
....................       else if (pled_status == 3) pled_status = 0; 
05D8:  MOVF   4A,W
05D9:  SUBLW  03
05DA:  BTFSS  03.2
05DB:  GOTO   5DD
05DC:  CLRF   4A
....................       if (pled_status == 0 || pled_status == 2) 
05DD:  MOVF   4A,F
05DE:  BTFSC  03.2
05DF:  GOTO   5E4
05E0:  MOVF   4A,W
05E1:  SUBLW  02
05E2:  BTFSS  03.2
05E3:  GOTO   5E6
....................       	pled_direction = 0; 
05E4:  CLRF   49
05E5:  GOTO   5F1
....................       else if (pled_status == 1) pled_direction = 1; 
05E6:  DECFSZ 4A,W
05E7:  GOTO   5EB
05E8:  MOVLW  01
05E9:  MOVWF  49
05EA:  GOTO   5F1
....................       else if (pled_status == 3) pled_direction = -1; 
05EB:  MOVF   4A,W
05EC:  SUBLW  03
05ED:  BTFSS  03.2
05EE:  GOTO   5F1
05EF:  MOVLW  FF
05F0:  MOVWF  49
....................    } 
.................... } 
....................  
05F1:  BCF    0B.0
05F2:  BCF    0A.3
05F3:  BCF    0A.4
05F4:  GOTO   035
.................... #INT_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................    rc = getc(); 
05F5:  BTFSS  0C.5
05F6:  GOTO   5F5
05F7:  MOVF   1A,W
05F8:  MOVWF  4D
....................    //"ST" characters signal to start receive date, time data 
....................    //"ED" to end transmission 
....................    //after each byte, rs232_status changes its value 
....................    //transmission is valid only when rs232_status reach 11 
....................    switch (rs232_status) 
05F9:  MOVF   4E,W
05FA:  BTFSC  03.2
05FB:  GOTO   61B
05FC:  XORLW  01
05FD:  BTFSC  03.2
05FE:  GOTO   622
05FF:  XORLW  03
0600:  BTFSC  03.2
0601:  GOTO   629
0602:  XORLW  01
0603:  BTFSC  03.2
0604:  GOTO   62E
0605:  XORLW  07
0606:  BTFSC  03.2
0607:  GOTO   633
0608:  XORLW  01
0609:  BTFSC  03.2
060A:  GOTO   638
060B:  XORLW  03
060C:  BTFSC  03.2
060D:  GOTO   63D
060E:  XORLW  01
060F:  BTFSC  03.2
0610:  GOTO   642
0611:  XORLW  0F
0612:  BTFSC  03.2
0613:  GOTO   647
0614:  XORLW  01
0615:  BTFSC  03.2
0616:  GOTO   64C
0617:  XORLW  03
0618:  BTFSC  03.2
0619:  GOTO   653
061A:  GOTO   65A
....................    { 
....................    	case 0: 
....................    		if (rc == 83) rs232_status = 1; 
061B:  MOVF   4D,W
061C:  SUBLW  53
061D:  BTFSS  03.2
061E:  GOTO   621
061F:  MOVLW  01
0620:  MOVWF  4E
....................    		break; 
0621:  GOTO   65B
....................    	case 1: 
....................    		if (rc == 84) rs232_status = 2; 
0622:  MOVF   4D,W
0623:  SUBLW  54
0624:  BTFSS  03.2
0625:  GOTO   628
0626:  MOVLW  02
0627:  MOVWF  4E
....................    		break; 
0628:  GOTO   65B
....................    	case 2: 
....................    		day = rc; 
0629:  MOVF   4D,W
062A:  MOVWF  36
....................    		rs232_status = 3; 
062B:  MOVLW  03
062C:  MOVWF  4E
....................    		break; 
062D:  GOTO   65B
....................    	case 3: 
....................    		month = rc; 
062E:  MOVF   4D,W
062F:  MOVWF  37
....................    		rs232_status = 4; 
0630:  MOVLW  04
0631:  MOVWF  4E
....................    		break; 
0632:  GOTO   65B
....................    	case 4: 
....................    		year = rc; 
0633:  MOVF   4D,W
0634:  MOVWF  38
....................    		rs232_status = 5; 
0635:  MOVLW  05
0636:  MOVWF  4E
....................    		break; 
0637:  GOTO   65B
....................    	case 5: 
....................    		dow = rc; 
0638:  MOVF   4D,W
0639:  MOVWF  39
....................    		rs232_status = 6; 
063A:  MOVLW  06
063B:  MOVWF  4E
....................    		break; 
063C:  GOTO   65B
....................    	case 6: 
....................    		hour = rc; 
063D:  MOVF   4D,W
063E:  MOVWF  3A
....................    		rs232_status = 7; 
063F:  MOVLW  07
0640:  MOVWF  4E
....................    		break; 
0641:  GOTO   65B
....................    	case 7: 
....................    		min = rc; 
0642:  MOVF   4D,W
0643:  MOVWF  3B
....................    		rs232_status = 8; 
0644:  MOVLW  08
0645:  MOVWF  4E
....................    		break; 
0646:  GOTO   65B
....................    	case 8: 
....................    		sec = rc; 
0647:  MOVF   4D,W
0648:  MOVWF  3C
....................    		rs232_status = 9; 
0649:  MOVLW  09
064A:  MOVWF  4E
....................    		break; 
064B:  GOTO   65B
....................    	case 9: 
....................    		if (rc == 69) rs232_status = 10; 
064C:  MOVF   4D,W
064D:  SUBLW  45
064E:  BTFSS  03.2
064F:  GOTO   652
0650:  MOVLW  0A
0651:  MOVWF  4E
....................    		break; 
0652:  GOTO   65B
....................    	case 10: 
....................    		if (rc == 68) rs232_status = 11; 
0653:  MOVF   4D,W
0654:  SUBLW  44
0655:  BTFSS  03.2
0656:  GOTO   659
0657:  MOVLW  0B
0658:  MOVWF  4E
....................    		break; 
0659:  GOTO   65B
....................    	default: 
....................    		//rs232_status = 0; 
....................    		break; 
065A:  GOTO   65B
....................    } 
.................... } 
....................  
065B:  BCF    0C.5
065C:  BCF    0A.3
065D:  BCF    0A.4
065E:  GOTO   035
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    timer1_overflow++; 
065F:  INCF   27,F
.................... } 
....................  
0660:  BCF    0C.0
0661:  BCF    0A.3
0662:  BCF    0A.4
0663:  GOTO   035
.................... #INT_CCP1 
.................... void  CCP1_isr(void)  
.................... { 
.................... 	//calculate the duration between two consecutive Hall signals 
....................    sigHall_timer = ((int32)timer1_overflow * 0xFFFF + CCP_1); 
0664:  CLRF   74
0665:  CLRF   73
0666:  CLRF   72
0667:  MOVF   27,W
0668:  MOVWF  71
0669:  MOVF   74,W
066A:  MOVWF  7E
066B:  MOVF   73,W
066C:  MOVWF  7D
066D:  MOVF   72,W
066E:  MOVWF  7C
066F:  MOVF   71,W
0670:  MOVWF  7B
0671:  BSF    03.5
0672:  CLRF   23
0673:  CLRF   22
0674:  MOVLW  FF
0675:  MOVWF  21
0676:  MOVLW  FF
0677:  MOVWF  20
0678:  BCF    03.5
*
06AC:  MOVF   7A,W
06AD:  MOVWF  74
06AE:  MOVF   79,W
06AF:  MOVWF  73
06B0:  MOVF   78,W
06B1:  MOVWF  72
06B2:  MOVF   77,W
06B3:  MOVWF  71
06B4:  MOVF   15,W
06B5:  ADDWF  71,W
06B6:  MOVWF  28
06B7:  MOVF   72,W
06B8:  MOVWF  29
06B9:  MOVF   16,W
06BA:  BTFSC  03.0
06BB:  INCFSZ 16,W
06BC:  ADDWF  29,F
06BD:  MOVF   73,W
06BE:  MOVWF  2A
06BF:  MOVLW  00
06C0:  BTFSC  03.0
06C1:  MOVLW  01
06C2:  ADDWF  2A,F
06C3:  MOVF   74,W
06C4:  MOVWF  2B
06C5:  MOVLW  00
06C6:  BTFSC  03.0
06C7:  MOVLW  01
06C8:  ADDWF  2B,F
....................    timer1_overflow = 0; 
06C9:  CLRF   27
....................    set_timer1(0); 
06CA:  CLRF   0E
06CB:  CLRF   0F
06CC:  CLRF   0E
....................    //set trigger for start revolution 
....................    circle_trigger = 1; 
06CD:  MOVLW  01
06CE:  MOVWF  2C
.................... } 
....................  
06CF:  BCF    0C.2
06D0:  BCF    0A.3
06D1:  BCF    0A.4
06D2:  GOTO   035
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
.................... 	//set trigger for each NODE 
....................    section_trigger = 1; 
06D3:  MOVLW  01
06D4:  MOVWF  2D
06D5:  BCF    0B.2
06D6:  BCF    0A.3
06D7:  BCF    0A.4
06D8:  GOTO   035
.................... } 
....................  
.................... void var_init() 
.................... { 
....................    timer1_overflow = 0; 
06D9:  CLRF   27
....................    sigHall_timer = 0; 
06DA:  CLRF   2B
06DB:  CLRF   2A
06DC:  CLRF   29
06DD:  CLRF   28
....................    circle_trigger = 0; 
06DE:  CLRF   2C
....................    port_b = 0x00; 
06DF:  CLRF   32
....................    last_b = port_b; 
06E0:  MOVF   32,W
06E1:  MOVWF  33
....................    tuning = 6; 
06E2:  MOVLW  06
06E3:  MOVWF  31
....................    mode = MODE_A; 
06E4:  MOVLW  02
06E5:  MOVWF  34
....................    smode = 1; 
06E6:  MOVLW  01
06E7:  MOVWF  35
....................    tick = 1; 
06E8:  MOVLW  01
06E9:  MOVWF  3D
....................    digit_sec = 0; 
06EA:  CLRF   3E
....................    pled_position = 31; 
06EB:  MOVLW  1F
06EC:  MOVWF  48
....................    pled_direction = 1; 
06ED:  MOVLW  01
06EE:  MOVWF  49
....................    pled_status = 0; 
06EF:  CLRF   4A
....................    pled_count = 0; 
06F0:  CLRF   4C
06F1:  CLRF   4B
....................    rs232_status = 0; 
06F2:  CLRF   4E
06F3:  BCF    0A.3
06F4:  BSF    0A.4
06F5:  GOTO   022 (RETURN)
.................... } 
....................  
.................... void main() 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  BSF    03.5
1004:  BSF    03.6
1005:  BCF    07.3
1006:  MOVLW  40
1007:  BCF    03.6
1008:  MOVWF  19
1009:  MOVLW  E6
100A:  MOVWF  18
100B:  MOVLW  D0
100C:  BCF    03.5
100D:  MOVWF  18
100E:  MOVLW  FF
100F:  MOVWF  55
1010:  BSF    03.5
1011:  BSF    03.6
1012:  MOVF   09,W
1013:  ANDLW  C0
1014:  MOVWF  09
1015:  BCF    03.6
1016:  BCF    1F.4
1017:  BCF    1F.5
1018:  MOVLW  00
1019:  BSF    03.6
101A:  MOVWF  08
101B:  BCF    03.5
101C:  CLRF   07
101D:  CLRF   08
101E:  CLRF   09
101F:  BCF    03.6
.................... { 
.................... 	//initialize data 
....................    var_init(); 
1020:  BCF    0A.4
1021:  GOTO   6D9
1022:  BSF    0A.4
....................    //initialize timers and cp1 interrupt 
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_2);      //div 2 - 26.2 ms overflow 
1023:  MOVLW  15
1024:  MOVWF  10
.................... 	setup_ccp1(CCP_CAPTURE_FE); 
1025:  BSF    55.2
1026:  MOVF   55,W
1027:  BSF    03.5
1028:  MOVWF  07
1029:  BCF    03.5
102A:  CLRF   17
102B:  MOVLW  04
102C:  MOVWF  17
102D:  BSF    03.5
102E:  CLRF   1B
102F:  CLRF   1C
1030:  MOVLW  01
1031:  MOVWF  1D
....................    //with 819.2 us overflow for Timer0, motor's speed must be at least 20 RPS 
....................    setup_timer_0(T0_INTERNAL | T0_DIV_16); //div 16 - 819.2 us overflow 
1032:  MOVF   01,W
1033:  ANDLW  C0
1034:  IORLW  03
1035:  MOVWF  01
....................    //enable interrupts 
....................    enable_interrupts(INT_RB2|INT_RB3|INT_RB4|INT_RB5);; 
1036:  BCF    03.5
1037:  BSF    0B.3
1038:  MOVLW  3C
1039:  BSF    03.5
103A:  IORWF  16,F
....................    enable_interrupts(INT_EXT); 
103B:  BCF    03.5
103C:  BSF    0B.4
....................    enable_interrupts(INT_TIMER1); 
103D:  BSF    03.5
103E:  BSF    0C.0
....................    enable_interrupts(INT_CCP1); 
103F:  BSF    0C.2
....................    enable_interrupts(INT_TIMER0); 
1040:  BCF    03.5
1041:  BSF    0B.5
....................    enable_interrupts(INT_RDA); 
1042:  BSF    03.5
1043:  BSF    0C.5
.................... 	enable_interrupts(GLOBAL); 
1044:  MOVLW  C0
1045:  BCF    03.5
1046:  IORWF  0B,F
.................... 	//initialize clock 
....................    ds1307_init(); 
1047:  BCF    0A.4
1048:  BSF    0A.3
1049:  GOTO   000
104A:  BSF    0A.4
104B:  BCF    0A.3
....................   	 
.................... 	//test power on 
.................... 	rgb_bits.blue =  0xF00F; 
104C:  MOVLW  F0
104D:  MOVWF  50
104E:  MOVLW  0F
104F:  MOVWF  4F
.................... 	rgb_bits.red =   0x0F0F; 
1050:  MOVLW  0F
1051:  MOVWF  52
1052:  MOVLW  0F
1053:  MOVWF  51
.................... 	rgb_bits.green = 0x00FF; 
1054:  CLRF   54
1055:  MOVLW  FF
1056:  MOVWF  53
.................... 	latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
1057:  MOVF   50,W
1058:  MOVWF  57
1059:  MOVF   4F,W
105A:  MOVWF  56
105B:  MOVF   52,W
105C:  MOVWF  59
105D:  MOVF   51,W
105E:  MOVWF  58
105F:  MOVF   54,W
1060:  MOVWF  5B
1061:  MOVF   53,W
1062:  MOVWF  5A
....................   	 
.................... 	//get the first values of date, time 
.................... 	ds1307_get_time(hour, min, sec); 
.................... 	ds1307_get_date(day, month, year, dow); 
.................... 	// calculating hour hand's position for analog clock 
....................    anal_hour = hour % 12; 
*
1221:  MOVF   3A,W
1222:  MOVWF  5A
1223:  MOVLW  0C
1224:  MOVWF  5B
1225:  BCF    0A.4
1226:  CALL   7BA
1227:  BSF    0A.4
1228:  MOVF   77,W
1229:  MOVWF  43
....................    anal_hour = anal_hour * 5; 
122A:  MOVF   43,W
122B:  MOVWF  5A
122C:  MOVLW  05
122D:  MOVWF  5B
122E:  BCF    0A.4
122F:  CALL   7CF
1230:  BSF    0A.4
1231:  MOVF   78,W
1232:  MOVWF  43
....................    anal_hour = anal_hour + (int8)(min / 12); 
1233:  MOVF   3B,W
1234:  MOVWF  5A
1235:  MOVLW  0C
1236:  MOVWF  5B
1237:  BCF    0A.4
1238:  CALL   7BA
1239:  BSF    0A.4
123A:  MOVF   78,W
123B:  ADDWF  43,F
....................    // calculating hour, minute, day, month numbers to display in digital clock 
....................    hour_h = (int8)(hour / 10); 
123C:  MOVF   3A,W
123D:  MOVWF  5A
123E:  MOVLW  0A
123F:  MOVWF  5B
1240:  BCF    0A.4
1241:  CALL   7BA
1242:  BSF    0A.4
1243:  MOVF   78,W
1244:  MOVWF  3F
.................... 	hour_l = hour % 10; 
1245:  MOVF   3A,W
1246:  MOVWF  5A
1247:  MOVLW  0A
1248:  MOVWF  5B
1249:  BCF    0A.4
124A:  CALL   7BA
124B:  BSF    0A.4
124C:  MOVF   77,W
124D:  MOVWF  40
.................... 	min_h = (int8)(min / 10); 
124E:  MOVF   3B,W
124F:  MOVWF  5A
1250:  MOVLW  0A
1251:  MOVWF  5B
1252:  BCF    0A.4
1253:  CALL   7BA
1254:  BSF    0A.4
1255:  MOVF   78,W
1256:  MOVWF  41
.................... 	min_l = min % 10; 
1257:  MOVF   3B,W
1258:  MOVWF  5A
1259:  MOVLW  0A
125A:  MOVWF  5B
125B:  BCF    0A.4
125C:  CALL   7BA
125D:  BSF    0A.4
125E:  MOVF   77,W
125F:  MOVWF  42
.................... 	day_h = (int8)(day / 10); 
1260:  MOVF   36,W
1261:  MOVWF  5A
1262:  MOVLW  0A
1263:  MOVWF  5B
1264:  BCF    0A.4
1265:  CALL   7BA
1266:  BSF    0A.4
1267:  MOVF   78,W
1268:  MOVWF  44
.................... 	day_l = day % 10; 
1269:  MOVF   36,W
126A:  MOVWF  5A
126B:  MOVLW  0A
126C:  MOVWF  5B
126D:  BCF    0A.4
126E:  CALL   7BA
126F:  BSF    0A.4
1270:  MOVF   77,W
1271:  MOVWF  45
.................... 	month_h = (int8)(month / 10); 
1272:  MOVF   37,W
1273:  MOVWF  5A
1274:  MOVLW  0A
1275:  MOVWF  5B
1276:  BCF    0A.4
1277:  CALL   7BA
1278:  BSF    0A.4
1279:  MOVF   78,W
127A:  MOVWF  46
.................... 	month_l = month % 10; 
127B:  MOVF   37,W
127C:  MOVWF  5A
127D:  MOVLW  0A
127E:  MOVWF  5B
127F:  BCF    0A.4
1280:  CALL   7BA
1281:  BSF    0A.4
1282:  MOVF   77,W
1283:  MOVWF  47
....................    
....................    // main routine 
....................    while(true) 
....................    { 
....................    	// rs232 operation 
....................    	if (rs232_status == 11) 
1284:  MOVF   4E,W
1285:  SUBLW  0B
1286:  BTFSS  03.2
1287:  GOTO   368
....................    	{ 
....................    		//notify the RS232 transmission for date, time update is successful 
....................    		latch_write(0x0000, 0x0FF0, 0x0000); 
1288:  CLRF   57
1289:  CLRF   56
128A:  MOVLW  0F
128B:  MOVWF  59
128C:  MOVLW  F0
128D:  MOVWF  58
128E:  CLRF   5B
128F:  CLRF   5A
....................    		rs232_status = 0; 
*
130E:  CLRF   4E
....................    	   ds1307_set_date_time(day, month, year, dow, hour, min, sec); 
130F:  MOVF   36,W
1310:  MOVWF  56
1311:  MOVF   37,W
1312:  MOVWF  57
1313:  MOVF   38,W
1314:  MOVWF  58
1315:  MOVF   39,W
1316:  MOVWF  59
1317:  MOVF   3A,W
1318:  MOVWF  5A
1319:  MOVF   3B,W
131A:  MOVWF  5B
131B:  MOVF   3C,W
131C:  MOVWF  5C
131D:  BCF    0A.4
131E:  BSF    0A.3
131F:  GOTO   1E0
1320:  BSF    0A.4
1321:  BCF    0A.3
....................    	   putc('O'); 
1322:  MOVLW  4F
1323:  MOVWF  56
1324:  BCF    0A.4
1325:  BSF    0A.3
1326:  CALL   26C
1327:  BSF    0A.4
1328:  BCF    0A.3
....................    	   delay_ms(100); 
1329:  MOVLW  64
132A:  MOVWF  56
132B:  BCF    0A.4
132C:  BSF    0A.3
132D:  CALL   284
132E:  BSF    0A.4
132F:  BCF    0A.3
....................    	   putc('K'); 
1330:  MOVLW  4B
1331:  MOVWF  56
1332:  BCF    0A.4
1333:  BSF    0A.3
1334:  CALL   26C
1335:  BSF    0A.4
1336:  BCF    0A.3
....................    	   delay_ms(100); 
1337:  MOVLW  64
1338:  MOVWF  56
1339:  BCF    0A.4
133A:  BSF    0A.3
133B:  CALL   284
133C:  BSF    0A.4
133D:  BCF    0A.3
.................... 		   latch_ClearAll(); 
....................    	} 
....................    	// get the time value from ds1307 after each 5 minutes 
.................... 		if(tick == 300) 
*
1368:  MOVF   3D,W
1369:  SUBLW  2C
136A:  BTFSS  03.2
136B:  GOTO   4C9
.................... 		{ 
.................... 			ds1307_get_time(hour, min, sec); 
.................... 			ds1307_get_date(day, month, year, dow); 
.................... 		   anal_hour = hour % 12; 
*
14AC:  MOVF   3A,W
14AD:  MOVWF  5A
14AE:  MOVLW  0C
14AF:  MOVWF  5B
14B0:  BCF    0A.4
14B1:  CALL   7BA
14B2:  BSF    0A.4
14B3:  MOVF   77,W
14B4:  MOVWF  43
.................... 			anal_hour = anal_hour * 5; 
14B5:  MOVF   43,W
14B6:  MOVWF  5A
14B7:  MOVLW  05
14B8:  MOVWF  5B
14B9:  BCF    0A.4
14BA:  CALL   7CF
14BB:  BSF    0A.4
14BC:  MOVF   78,W
14BD:  MOVWF  43
.................... 			anal_hour = anal_hour + (int8)(min / 12); 
14BE:  MOVF   3B,W
14BF:  MOVWF  5A
14C0:  MOVLW  0C
14C1:  MOVWF  5B
14C2:  BCF    0A.4
14C3:  CALL   7BA
14C4:  BSF    0A.4
14C5:  MOVF   78,W
14C6:  ADDWF  43,F
.................... 		   tick = 1; 
14C7:  MOVLW  01
14C8:  MOVWF  3D
.................... 		} 
.................... 		// change values of minute and hour at appropriate value of second and minute 
.................... 		if(sec > 59) 
14C9:  MOVF   3C,W
14CA:  SUBLW  3B
14CB:  BTFSC  03.0
14CC:  GOTO   5AC
.................... 		{ 
.................... 			sec = 0; 
14CD:  CLRF   3C
.................... 			min++; 
14CE:  INCF   3B,F
.................... 			if(min > 59) 
14CF:  MOVF   3B,W
14D0:  SUBLW  3B
14D1:  BTFSC  03.0
14D2:  GOTO   588
.................... 			{ 
.................... 				min = 0; 
14D3:  CLRF   3B
.................... 				ds1307_get_time(hour, min, sec); 
.................... 				anal_hour = hour % 12; 
*
156D:  MOVF   3A,W
156E:  MOVWF  5A
156F:  MOVLW  0C
1570:  MOVWF  5B
1571:  BCF    0A.4
1572:  CALL   7BA
1573:  BSF    0A.4
1574:  MOVF   77,W
1575:  MOVWF  43
.................... 			   anal_hour = anal_hour * 5; 
1576:  MOVF   43,W
1577:  MOVWF  5A
1578:  MOVLW  05
1579:  MOVWF  5B
157A:  BCF    0A.4
157B:  CALL   7CF
157C:  BSF    0A.4
157D:  MOVF   78,W
157E:  MOVWF  43
.................... 			   anal_hour = anal_hour + (int8)(min / 12); 
157F:  MOVF   3B,W
1580:  MOVWF  5A
1581:  MOVLW  0C
1582:  MOVWF  5B
1583:  BCF    0A.4
1584:  CALL   7BA
1585:  BSF    0A.4
1586:  MOVF   78,W
1587:  ADDWF  43,F
.................... 			} 
.................... 			//refresh value for digital clock after each minute 
.................... 			hour_h = (int8)(hour / 10); 
1588:  MOVF   3A,W
1589:  MOVWF  5A
158A:  MOVLW  0A
158B:  MOVWF  5B
158C:  BCF    0A.4
158D:  CALL   7BA
158E:  BSF    0A.4
158F:  MOVF   78,W
1590:  MOVWF  3F
.................... 			hour_l = hour % 10; 
1591:  MOVF   3A,W
1592:  MOVWF  5A
1593:  MOVLW  0A
1594:  MOVWF  5B
1595:  BCF    0A.4
1596:  CALL   7BA
1597:  BSF    0A.4
1598:  MOVF   77,W
1599:  MOVWF  40
.................... 			min_h = (int8)(min / 10); 
159A:  MOVF   3B,W
159B:  MOVWF  5A
159C:  MOVLW  0A
159D:  MOVWF  5B
159E:  BCF    0A.4
159F:  CALL   7BA
15A0:  BSF    0A.4
15A1:  MOVF   78,W
15A2:  MOVWF  41
.................... 			min_l = min % 10; 
15A3:  MOVF   3B,W
15A4:  MOVWF  5A
15A5:  MOVLW  0A
15A6:  MOVWF  5B
15A7:  BCF    0A.4
15A8:  CALL   7BA
15A9:  BSF    0A.4
15AA:  MOVF   77,W
15AB:  MOVWF  42
.................... 		} 
.................... 		//display routine 
.................... 		if(circle_trigger == 1) 
15AC:  DECFSZ 2C,W
15AD:  GOTO   6DC
.................... 		{   
.................... 			circle_trigger = 0; 
15AE:  CLRF   2C
.................... 			if ((smode % 2) == 1) latch_ClearAll(); 
15AF:  MOVF   35,W
15B0:  ANDLW  01
15B1:  SUBLW  01
15B2:  BTFSS  03.2
15B3:  GOTO   5DE
.................... 			digit_sec++; 
*
15DE:  INCF   3E,F
.................... 			section_trigger = 1; 
15DF:  MOVLW  01
15E0:  MOVWF  2D
.................... 			section_count = MAX_SECTION; 
15E1:  MOVLW  3C
15E2:  MOVWF  2E
.................... 			section_timer = 256 - (int8)(sigHall_timer / (MAX_SECTION * 8)) + tuning; 
15E3:  BCF    03.1
15E4:  MOVF   2B,W
15E5:  MOVWF  59
15E6:  MOVF   2A,W
15E7:  MOVWF  58
15E8:  MOVF   29,W
15E9:  MOVWF  57
15EA:  MOVF   28,W
15EB:  MOVWF  56
15EC:  CLRF   5D
15ED:  CLRF   5C
15EE:  MOVLW  01
15EF:  MOVWF  5B
15F0:  MOVLW  E0
15F1:  MOVWF  5A
15F2:  BCF    0A.4
15F3:  BSF    0A.3
15F4:  GOTO   298
15F5:  BSF    0A.4
15F6:  BCF    0A.3
15F7:  MOVF   77,W
15F8:  SUBLW  00
15F9:  MOVWF  56
15FA:  MOVLW  01
15FB:  MOVWF  57
15FC:  MOVLW  00
15FD:  BTFSS  03.0
15FE:  MOVLW  01
15FF:  SUBWF  57,F
1600:  CLRF   7A
1601:  MOVF   31,W
1602:  MOVWF  77
1603:  BTFSC  77.7
1604:  DECF   7A,F
1605:  ADDWF  56,W
1606:  MOVWF  2F
1607:  MOVF   57,W
1608:  MOVWF  30
1609:  MOVF   7A,W
160A:  BTFSC  03.0
160B:  INCFSZ 7A,W
160C:  ADDWF  30,F
.................... 			while(circle_trigger == 0 && section_count > 0) 
160D:  MOVF   2C,F
160E:  BTFSS  03.2
160F:  GOTO   6DC
1610:  MOVF   2E,F
1611:  BTFSC  03.2
1612:  GOTO   6DC
.................... 			{ 	 
.................... 				if(section_trigger == 1) 
1613:  DECFSZ 2D,W
1614:  GOTO   6DB
.................... 				{ 
.................... 					set_timer0(section_timer); 
1615:  MOVF   2F,W
1616:  MOVWF  01
.................... 					section_trigger = 0; 
1617:  CLRF   2D
.................... 					//data calculation 
.................... 					fetch_data(); 
1618:  BCF    0A.4
1619:  BSF    0A.3
161A:  GOTO   2E9
161B:  BSF    0A.4
161C:  BCF    0A.3
.................... 					//shifting data 
.................... 					latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
161D:  MOVF   50,W
161E:  MOVWF  57
161F:  MOVF   4F,W
1620:  MOVWF  56
1621:  MOVF   52,W
1622:  MOVWF  59
1623:  MOVF   51,W
1624:  MOVWF  58
1625:  MOVF   54,W
1626:  MOVWF  5B
1627:  MOVF   53,W
1628:  MOVWF  5A
.................... 					//smode change between continuous display and discrete display 
.................... 					if ((smode % 2) == 1 && section_count > 1) latch_ClearAll(); 
*
16A7:  MOVF   35,W
16A8:  ANDLW  01
16A9:  SUBLW  01
16AA:  BTFSS  03.2
16AB:  GOTO   6DA
16AC:  MOVF   2E,W
16AD:  SUBLW  01
16AE:  BTFSC  03.0
16AF:  GOTO   6DA
.................... 					section_count--; 
*
16DA:  DECF   2E,F
.................... 				} 
16DB:  GOTO   60D
.................... 			} 
.................... 		}// circle_trigger 
16DC:  GOTO   284
....................    } // end of while(true) 
.................... } 
....................  
16DD:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
