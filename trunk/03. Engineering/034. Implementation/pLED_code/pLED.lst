CCS PCM C Compiler, Version 5.015, 5967               14-Apr-14 19:58

               Filename:   C:\Users\LongNT\SVN\03. Engineering\034. Implementation\pLED_code\pLED.lst

               ROM used:   4786 words (58%)
                           Largest free fragment is 2048
               RAM used:   62 (17%) at main() level
                           104 (28%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.2
001C:  GOTO   01F
001D:  BTFSC  0C.2
001E:  GOTO   056
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   059
0023:  BTFSS  0B.4
0024:  GOTO   027
0025:  BTFSC  0B.1
0026:  GOTO   04D
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04A
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.5
002E:  GOTO   031
002F:  BTFSC  0C.5
0030:  GOTO   050
0031:  MOVLW  8C
0032:  MOVWF  04
0033:  BTFSS  00.0
0034:  GOTO   037
0035:  BTFSC  0C.0
0036:  GOTO   053
0037:  MOVF   22,W
0038:  MOVWF  04
0039:  MOVF   23,W
003A:  MOVWF  77
003B:  MOVF   24,W
003C:  MOVWF  78
003D:  MOVF   25,W
003E:  MOVWF  79
003F:  MOVF   26,W
0040:  MOVWF  7A
0041:  MOVF   27,W
0042:  MOVWF  7B
0043:  MOVF   20,W
0044:  MOVWF  0A
0045:  SWAPF  21,W
0046:  MOVWF  03
0047:  SWAPF  7F,F
0048:  SWAPF  7F,W
0049:  RETFIE
004A:  BCF    0A.3
004B:  BCF    0A.4
004C:  GOTO   298
004D:  BCF    0A.3
004E:  BCF    0A.4
004F:  GOTO   291
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   2D3
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   33D
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   342
0059:  BCF    0A.3
005A:  BCF    0A.4
005B:  GOTO   3B1
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... // 		Main function, framework for the program                            || 
.................... //                                                                           || 
.................... //   Last edited: 13 - April - 2014                                          || 
.................... //                                                                           || 
.................... //   void var_init() - Initialize global variables' values                   || 
.................... //   void main() - main program, called when the Microcontroller start       || 
.................... //																									  || 
.................... //   There are six Interrupt Service Routine (ISR):                          || 
.................... //					- INT_TIMER1: timer1 interrupt, circle timing                 || 
.................... //					- INT_CCP1: CCP1 interrupt, circle timing                     || 
.................... //					- INT_TIMER0: timer0 interrupt, section timing                || 
.................... //					- INT_EXT: external interrupt, receive clock's SQW/OUT        || 
.................... //					- INT_RB: RB2-RB3-RB4-RB5 input change interrupt, RF signal   || 
.................... //					- INT_RDA: RS232 receive interrupt, for update date, time     || 
.................... //																									  || 
.................... //===========================================================================|| 
....................  
.................... #include "pLED.h" 
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... //		   Header file for pLED project                                        || 
.................... //                                                                           || 
.................... //   Last edited: 13 - April - 2014                                          || 
.................... //                                                                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
005C:  BCF    0A.0
005D:  BCF    0A.1
005E:  BCF    0A.2
005F:  ADDWF  02,F
0060:  RETLW  F8
0061:  RETLW  03
0062:  RETLW  08
0063:  RETLW  02
0064:  RETLW  F8
0065:  RETLW  03
0066:  RETLW  40
0067:  RETLW  00
0068:  RETLW  20
0069:  RETLW  00
006A:  RETLW  F8
006B:  RETLW  03
006C:  RETLW  C8
006D:  RETLW  03
006E:  RETLW  48
006F:  RETLW  02
0070:  RETLW  78
0071:  RETLW  02
0072:  RETLW  48
0073:  RETLW  02
0074:  RETLW  48
0075:  RETLW  02
0076:  RETLW  F8
0077:  RETLW  03
0078:  RETLW  78
0079:  RETLW  00
007A:  RETLW  40
007B:  RETLW  00
007C:  RETLW  F8
007D:  RETLW  03
007E:  RETLW  78
007F:  RETLW  02
0080:  RETLW  48
0081:  RETLW  02
0082:  RETLW  C8
0083:  RETLW  03
0084:  RETLW  F8
0085:  RETLW  03
0086:  RETLW  48
0087:  RETLW  02
0088:  RETLW  C8
0089:  RETLW  03
008A:  RETLW  08
008B:  RETLW  00
008C:  RETLW  08
008D:  RETLW  00
008E:  RETLW  F8
008F:  RETLW  03
0090:  RETLW  F8
0091:  RETLW  03
0092:  RETLW  48
0093:  RETLW  02
0094:  RETLW  F8
0095:  RETLW  03
0096:  RETLW  78
0097:  RETLW  02
0098:  RETLW  48
0099:  RETLW  02
009A:  RETLW  F8
009B:  RETLW  03
009C:  BCF    0A.0
009D:  BCF    0A.1
009E:  BCF    0A.2
009F:  ADDWF  02,F
00A0:  RETLW  F8
00A1:  RETLW  03
00A2:  RETLW  08
00A3:  RETLW  02
00A4:  RETLW  F8
00A5:  RETLW  03
00A6:  RETLW  F8
00A7:  RETLW  03
00A8:  RETLW  00
00A9:  RETLW  01
00AA:  RETLW  80
00AB:  RETLW  00
00AC:  RETLW  C8
00AD:  RETLW  03
00AE:  RETLW  48
00AF:  RETLW  02
00B0:  RETLW  78
00B1:  RETLW  02
00B2:  RETLW  F8
00B3:  RETLW  03
00B4:  RETLW  48
00B5:  RETLW  02
00B6:  RETLW  48
00B7:  RETLW  02
00B8:  RETLW  F8
00B9:  RETLW  03
00BA:  RETLW  40
00BB:  RETLW  00
00BC:  RETLW  C0
00BD:  RETLW  03
00BE:  RETLW  78
00BF:  RETLW  02
00C0:  RETLW  48
00C1:  RETLW  02
00C2:  RETLW  C8
00C3:  RETLW  03
00C4:  RETLW  78
00C5:  RETLW  02
00C6:  RETLW  48
00C7:  RETLW  02
00C8:  RETLW  F8
00C9:  RETLW  03
00CA:  RETLW  F8
00CB:  RETLW  03
00CC:  RETLW  00
00CD:  RETLW  02
00CE:  RETLW  00
00CF:  RETLW  02
00D0:  RETLW  F8
00D1:  RETLW  03
00D2:  RETLW  48
00D3:  RETLW  02
00D4:  RETLW  F8
00D5:  RETLW  03
00D6:  RETLW  F8
00D7:  RETLW  03
00D8:  RETLW  48
00D9:  RETLW  02
00DA:  RETLW  C8
00DB:  RETLW  03
00DC:  MOVWF  7B
00DD:  MOVLW  00
00DE:  ADDWF  7A,W
00DF:  MOVWF  0A
00E0:  MOVF   7B,W
00E1:  ADDLW  E5
00E2:  BTFSC  03.0
00E3:  INCF   0A,F
00E4:  MOVWF  02
00E5:  RETLW  00
00E6:  RETLW  E0
00E7:  RETLW  D8
00E8:  RETLW  E0
00E9:  RETLW  00
00EA:  RETLW  00
00EB:  RETLW  00
00EC:  RETLW  C0
00ED:  RETLW  70
00EE:  RETLW  C0
00EF:  RETLW  00
00F0:  RETLW  00
00F1:  RETLW  00
00F2:  RETLW  80
00F3:  RETLW  00
00F4:  RETLW  80
00F5:  RETLW  18
00F6:  RETLW  00
00F7:  RETLW  00
00F8:  RETLW  80
00F9:  RETLW  00
00FA:  RETLW  80
00FB:  RETLW  18
00FC:  RETLW  00
00FD:  RETLW  00
00FE:  RETLW  80
00FF:  RETLW  00
0100:  RETLW  80
0101:  RETLW  F8
0102:  RETLW  07
0103:  RETLW  00
0104:  RETLW  C0
0105:  RETLW  00
0106:  RETLW  C0
0107:  RETLW  F8
0108:  RETLW  07
0109:  RETLW  00
010A:  RETLW  E0
010B:  RETLW  00
010C:  RETLW  E0
010D:  RETLW  18
010E:  RETLW  00
010F:  RETLW  00
0110:  RETLW  C0
0111:  RETLW  00
0112:  RETLW  C0
0113:  RETLW  18
0114:  RETLW  00
0115:  RETLW  00
0116:  RETLW  80
0117:  RETLW  00
0118:  RETLW  80
0119:  RETLW  00
011A:  RETLW  00
011B:  RETLW  00
011C:  RETLW  80
011D:  RETLW  00
011E:  RETLW  80
011F:  RETLW  00
0120:  RETLW  00
0121:  RETLW  00
0122:  RETLW  80
0123:  RETLW  00
0124:  RETLW  80
0125:  RETLW  00
0126:  RETLW  00
0127:  RETLW  00
0128:  RETLW  C0
0129:  RETLW  00
012A:  RETLW  C0
012B:  RETLW  00
012C:  RETLW  00
012D:  RETLW  00
012E:  RETLW  E0
012F:  RETLW  00
0130:  RETLW  E0
0131:  RETLW  00
0132:  RETLW  00
0133:  RETLW  00
0134:  RETLW  C0
0135:  RETLW  00
0136:  RETLW  C0
0137:  RETLW  00
0138:  RETLW  00
0139:  RETLW  00
013A:  RETLW  80
013B:  RETLW  00
013C:  RETLW  80
013D:  RETLW  00
013E:  RETLW  00
013F:  RETLW  00
0140:  RETLW  80
0141:  RETLW  00
0142:  RETLW  80
0143:  RETLW  00
0144:  RETLW  00
0145:  RETLW  00
0146:  RETLW  80
0147:  RETLW  00
0148:  RETLW  80
0149:  RETLW  00
014A:  RETLW  00
014B:  RETLW  00
014C:  RETLW  C0
014D:  RETLW  00
014E:  RETLW  C0
014F:  RETLW  00
0150:  RETLW  00
0151:  RETLW  00
0152:  RETLW  E0
0153:  RETLW  00
0154:  RETLW  E0
0155:  RETLW  00
0156:  RETLW  00
0157:  RETLW  00
0158:  RETLW  C0
0159:  RETLW  00
015A:  RETLW  C0
015B:  RETLW  00
015C:  RETLW  00
015D:  RETLW  00
015E:  RETLW  80
015F:  RETLW  00
0160:  RETLW  80
0161:  RETLW  00
0162:  RETLW  00
0163:  RETLW  00
0164:  RETLW  80
0165:  RETLW  00
0166:  RETLW  80
0167:  RETLW  00
0168:  RETLW  00
0169:  RETLW  01
016A:  RETLW  80
016B:  RETLW  00
016C:  RETLW  80
016D:  RETLW  01
016E:  RETLW  00
016F:  RETLW  03
0170:  RETLW  C0
0171:  RETLW  00
0172:  RETLW  C0
0173:  RETLW  03
0174:  RETLW  00
0175:  RETLW  07
0176:  RETLW  E0
0177:  RETLW  00
0178:  RETLW  E0
0179:  RETLW  07
017A:  RETLW  00
017B:  RETLW  0F
017C:  RETLW  C0
017D:  RETLW  00
017E:  RETLW  C0
017F:  RETLW  0F
0180:  RETLW  00
0181:  RETLW  1F
0182:  RETLW  80
0183:  RETLW  00
0184:  RETLW  80
0185:  RETLW  1F
0186:  RETLW  00
0187:  RETLW  3F
0188:  RETLW  80
0189:  RETLW  00
018A:  RETLW  80
018B:  RETLW  3F
018C:  RETLW  00
018D:  RETLW  7F
018E:  RETLW  80
018F:  RETLW  00
0190:  RETLW  80
0191:  RETLW  7F
0192:  RETLW  00
0193:  RETLW  FF
0194:  RETLW  C0
0195:  RETLW  00
0196:  RETLW  C0
0197:  RETLW  FF
0198:  RETLW  00
0199:  RETLW  7F
019A:  RETLW  E0
019B:  RETLW  00
019C:  RETLW  E0
019D:  RETLW  7F
019E:  RETLW  00
019F:  RETLW  3F
01A0:  RETLW  C0
01A1:  RETLW  00
01A2:  RETLW  C0
01A3:  RETLW  3F
01A4:  RETLW  00
01A5:  RETLW  1F
01A6:  RETLW  80
01A7:  RETLW  00
01A8:  RETLW  80
01A9:  RETLW  1F
01AA:  RETLW  00
01AB:  RETLW  0F
01AC:  RETLW  80
01AD:  RETLW  00
01AE:  RETLW  80
01AF:  RETLW  0F
01B0:  RETLW  00
01B1:  RETLW  07
01B2:  RETLW  80
01B3:  RETLW  00
01B4:  RETLW  80
01B5:  RETLW  07
01B6:  RETLW  00
01B7:  RETLW  03
01B8:  RETLW  C0
01B9:  RETLW  00
01BA:  RETLW  C0
01BB:  RETLW  03
01BC:  RETLW  00
01BD:  RETLW  01
01BE:  RETLW  E0
01BF:  RETLW  00
01C0:  RETLW  E0
01C1:  RETLW  01
01C2:  RETLW  00
01C3:  RETLW  00
01C4:  RETLW  C0
01C5:  RETLW  00
01C6:  RETLW  C0
01C7:  RETLW  00
01C8:  RETLW  00
01C9:  RETLW  00
01CA:  RETLW  80
01CB:  RETLW  00
01CC:  RETLW  80
01CD:  RETLW  00
01CE:  RETLW  00
01CF:  RETLW  00
01D0:  RETLW  80
01D1:  RETLW  00
01D2:  RETLW  80
01D3:  RETLW  00
01D4:  RETLW  00
01D5:  RETLW  00
01D6:  RETLW  80
01D7:  RETLW  00
01D8:  RETLW  80
01D9:  RETLW  00
01DA:  RETLW  00
01DB:  RETLW  00
01DC:  RETLW  C0
01DD:  RETLW  00
01DE:  RETLW  C0
01DF:  RETLW  00
01E0:  RETLW  00
01E1:  RETLW  00
01E2:  RETLW  E0
01E3:  RETLW  00
01E4:  RETLW  E0
01E5:  RETLW  00
01E6:  RETLW  00
01E7:  RETLW  00
01E8:  RETLW  C0
01E9:  RETLW  00
01EA:  RETLW  C0
01EB:  RETLW  00
01EC:  RETLW  00
01ED:  RETLW  00
01EE:  RETLW  80
01EF:  RETLW  00
01F0:  RETLW  80
01F1:  RETLW  00
01F2:  RETLW  00
01F3:  RETLW  00
01F4:  RETLW  80
01F5:  RETLW  00
01F6:  RETLW  80
01F7:  RETLW  00
01F8:  RETLW  00
01F9:  RETLW  00
01FA:  RETLW  80
01FB:  RETLW  00
01FC:  RETLW  80
01FD:  RETLW  00
01FE:  RETLW  00
01FF:  RETLW  00
0200:  RETLW  C0
0201:  RETLW  00
0202:  RETLW  C0
0203:  RETLW  00
0204:  RETLW  00
0205:  RETLW  00
0206:  RETLW  E0
0207:  RETLW  00
0208:  RETLW  E0
0209:  RETLW  00
020A:  RETLW  00
020B:  RETLW  00
020C:  RETLW  C0
020D:  RETLW  00
020E:  RETLW  C0
020F:  RETLW  00
0210:  RETLW  00
0211:  RETLW  00
0212:  RETLW  80
0213:  RETLW  00
0214:  RETLW  80
0215:  RETLW  00
0216:  RETLW  00
0217:  RETLW  00
0218:  RETLW  80
0219:  RETLW  00
021A:  RETLW  80
021B:  RETLW  00
021C:  RETLW  00
021D:  RETLW  00
021E:  RETLW  80
021F:  RETLW  00
0220:  RETLW  80
0221:  RETLW  00
0222:  RETLW  00
0223:  RETLW  F8
0224:  RETLW  C7
0225:  RETLW  00
0226:  RETLW  C0
0227:  RETLW  00
0228:  RETLW  00
0229:  RETLW  F8
022A:  RETLW  E7
022B:  RETLW  00
022C:  RETLW  E0
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  D8
0230:  RETLW  C0
0231:  RETLW  00
0232:  RETLW  C0
0233:  RETLW  00
0234:  RETLW  00
0235:  RETLW  D8
0236:  RETLW  80
0237:  RETLW  00
0238:  RETLW  80
0239:  RETLW  00
023A:  RETLW  00
023B:  RETLW  18
023C:  RETLW  80
023D:  RETLW  00
023E:  RETLW  80
023F:  RETLW  00
0240:  RETLW  00
0241:  RETLW  00
0242:  RETLW  80
0243:  RETLW  F8
0244:  RETLW  87
0245:  RETLW  00
0246:  RETLW  00
0247:  RETLW  00
0248:  RETLW  C0
0249:  RETLW  F8
024A:  RETLW  C7
024B:  RETLW  00
024C:  RETLW  00
024D:  BCF    0A.0
024E:  BSF    0A.1
024F:  BCF    0A.2
0250:  ADDWF  02,F
0251:  RETLW  F0
0252:  RETLW  01
0253:  RETLW  08
0254:  RETLW  02
0255:  RETLW  F8
0256:  RETLW  03
0257:  RETLW  00
0258:  RETLW  00
0259:  RETLW  48
025A:  RETLW  02
025B:  RETLW  48
025C:  RETLW  02
025D:  RETLW  F8
025E:  RETLW  03
025F:  RETLW  00
0260:  RETLW  00
0261:  RETLW  08
0262:  RETLW  00
0263:  RETLW  08
0264:  RETLW  00
0265:  RETLW  F8
0266:  RETLW  03
0267:  RETLW  00
0268:  RETLW  00
0269:  RETLW  40
026A:  RETLW  00
026B:  RETLW  A0
026C:  RETLW  00
026D:  RETLW  F8
026E:  RETLW  00
026F:  BCF    0A.0
0270:  BSF    0A.1
0271:  BCF    0A.2
0272:  ADDWF  02,F
0273:  RETLW  C8
0274:  RETLW  03
0275:  RETLW  48
0276:  RETLW  02
0277:  RETLW  78
0278:  RETLW  02
0279:  RETLW  00
027A:  RETLW  00
027B:  RETLW  F8
027C:  RETLW  03
027D:  RETLW  08
027E:  RETLW  02
027F:  RETLW  F8
0280:  RETLW  03
0281:  RETLW  00
0282:  RETLW  00
0283:  RETLW  40
0284:  RETLW  00
0285:  RETLW  20
0286:  RETLW  00
0287:  RETLW  F8
0288:  RETLW  03
0289:  RETLW  00
028A:  RETLW  00
028B:  RETLW  78
028C:  RETLW  00
028D:  RETLW  40
028E:  RETLW  00
028F:  RETLW  F8
0290:  RETLW  03
*
0357:  MOVLW  20
0358:  BSF    03.5
0359:  MOVWF  2C
035A:  CLRF   28
035B:  CLRF   29
035C:  CLRF   2A
035D:  CLRF   2B
035E:  MOVF   23,W
035F:  MOVWF  7A
0360:  MOVF   22,W
0361:  MOVWF  79
0362:  MOVF   21,W
0363:  MOVWF  78
0364:  MOVF   20,W
0365:  MOVWF  77
0366:  BCF    03.5
0367:  BCF    03.0
0368:  BTFSS  77.0
0369:  GOTO   37A
036A:  BSF    03.5
036B:  MOVF   24,W
036C:  ADDWF  28,F
036D:  MOVF   25,W
036E:  BTFSC  03.0
036F:  INCFSZ 25,W
0370:  ADDWF  29,F
0371:  MOVF   26,W
0372:  BTFSC  03.0
0373:  INCFSZ 26,W
0374:  ADDWF  2A,F
0375:  MOVF   27,W
0376:  BTFSC  03.0
0377:  INCFSZ 27,W
0378:  ADDWF  2B,F
0379:  BCF    03.5
037A:  BSF    03.5
037B:  RRF    2B,F
037C:  RRF    2A,F
037D:  RRF    29,F
037E:  RRF    28,F
037F:  RRF    7A,F
0380:  RRF    79,F
0381:  RRF    78,F
0382:  RRF    77,F
0383:  DECFSZ 2C,F
0384:  GOTO   387
0385:  GOTO   389
0386:  BCF    03.5
0387:  BCF    03.5
0388:  GOTO   367
0389:  BCF    03.5
*
05A0:  MOVF   5B,W
05A1:  CLRF   78
05A2:  SUBWF  5A,W
05A3:  BTFSC  03.0
05A4:  GOTO   5A8
05A5:  MOVF   5A,W
05A6:  MOVWF  77
05A7:  GOTO   5B4
05A8:  CLRF   77
05A9:  MOVLW  08
05AA:  MOVWF  5C
05AB:  RLF    5A,F
05AC:  RLF    77,F
05AD:  MOVF   5B,W
05AE:  SUBWF  77,W
05AF:  BTFSC  03.0
05B0:  MOVWF  77
05B1:  RLF    78,F
05B2:  DECFSZ 5C,F
05B3:  GOTO   5AB
05B4:  RETURN
05B5:  CLRF   77
05B6:  CLRF   78
05B7:  MOVF   5A,W
05B8:  BCF    03.0
05B9:  BTFSC  5B.0
05BA:  ADDWF  77,F
05BB:  RRF    77,F
05BC:  RRF    78,F
05BD:  BTFSC  5B.1
05BE:  ADDWF  77,F
05BF:  RRF    77,F
05C0:  RRF    78,F
05C1:  BTFSC  5B.2
05C2:  ADDWF  77,F
05C3:  RRF    77,F
05C4:  RRF    78,F
05C5:  BTFSC  5B.3
05C6:  ADDWF  77,F
05C7:  RRF    77,F
05C8:  RRF    78,F
05C9:  BTFSC  5B.4
05CA:  ADDWF  77,F
05CB:  RRF    77,F
05CC:  RRF    78,F
05CD:  BTFSC  5B.5
05CE:  ADDWF  77,F
05CF:  RRF    77,F
05D0:  RRF    78,F
05D1:  BTFSC  5B.6
05D2:  ADDWF  77,F
05D3:  RRF    77,F
05D4:  RRF    78,F
05D5:  BTFSC  5B.7
05D6:  ADDWF  77,F
05D7:  RRF    77,F
05D8:  RRF    78,F
05D9:  RETURN
*
0742:  BTFSC  03.1
0743:  GOTO   747
0744:  MOVLW  5E
0745:  MOVWF  04
0746:  BCF    03.7
0747:  CLRF   77
0748:  CLRF   78
0749:  CLRF   79
074A:  CLRF   7A
074B:  CLRF   5E
074C:  CLRF   5F
074D:  CLRF   60
074E:  CLRF   61
074F:  MOVF   5D,W
0750:  IORWF  5C,W
0751:  IORWF  5B,W
0752:  IORWF  5A,W
0753:  BTFSC  03.2
0754:  GOTO   785
0755:  MOVLW  20
0756:  MOVWF  62
0757:  BCF    03.0
0758:  RLF    56,F
0759:  RLF    57,F
075A:  RLF    58,F
075B:  RLF    59,F
075C:  RLF    5E,F
075D:  RLF    5F,F
075E:  RLF    60,F
075F:  RLF    61,F
0760:  MOVF   5D,W
0761:  SUBWF  61,W
0762:  BTFSS  03.2
0763:  GOTO   76E
0764:  MOVF   5C,W
0765:  SUBWF  60,W
0766:  BTFSS  03.2
0767:  GOTO   76E
0768:  MOVF   5B,W
0769:  SUBWF  5F,W
076A:  BTFSS  03.2
076B:  GOTO   76E
076C:  MOVF   5A,W
076D:  SUBWF  5E,W
076E:  BTFSS  03.0
076F:  GOTO   77F
0770:  MOVF   5A,W
0771:  SUBWF  5E,F
0772:  MOVF   5B,W
0773:  BTFSS  03.0
0774:  INCFSZ 5B,W
0775:  SUBWF  5F,F
0776:  MOVF   5C,W
0777:  BTFSS  03.0
0778:  INCFSZ 5C,W
0779:  SUBWF  60,F
077A:  MOVF   5D,W
077B:  BTFSS  03.0
077C:  INCFSZ 5D,W
077D:  SUBWF  61,F
077E:  BSF    03.0
077F:  RLF    77,F
0780:  RLF    78,F
0781:  RLF    79,F
0782:  RLF    7A,F
0783:  DECFSZ 62,F
0784:  GOTO   757
0785:  MOVF   5E,W
0786:  MOVWF  00
0787:  INCF   04,F
0788:  MOVF   5F,W
0789:  MOVWF  00
078A:  INCF   04,F
078B:  MOVF   60,W
078C:  MOVWF  00
078D:  INCF   04,F
078E:  MOVF   61,W
078F:  MOVWF  00
0790:  BCF    0A.3
0791:  BSF    0A.4
0792:  GOTO   5DD (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES MCLR 
.................... #FUSES NOPROTECT 
.................... #FUSES NOCPD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO 
.................... #FUSES FCMEN 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG 
.................... //configuration bits: 2007-2CE2(); 2008-0700(FFFF) 
....................  
.................... #use delay(crystal=20000000) 
*
072E:  MOVLW  56
072F:  MOVWF  04
0730:  BCF    03.7
0731:  MOVF   00,W
0732:  BTFSC  03.2
0733:  GOTO   741
0734:  MOVLW  06
0735:  MOVWF  78
0736:  CLRF   77
0737:  DECFSZ 77,F
0738:  GOTO   737
0739:  DECFSZ 78,F
073A:  GOTO   736
073B:  MOVLW  7B
073C:  MOVWF  77
073D:  DECFSZ 77,F
073E:  GOTO   73D
073F:  DECFSZ 00,F
0740:  GOTO   734
0741:  RETURN
.................... #use FIXED_IO( E_outputs=PIN_E2,PIN_E1,PIN_E0 ) 
.................... #use rs232(baud=19200,parity=E,xmit=PIN_C6,rcv=PIN_C7,bits=8,stop=1,stream=PORT1) 
*
0716:  MOVLW  08
0717:  MOVWF  78
0718:  CLRF   57
0719:  MOVF   56,W
071A:  MOVWF  77
071B:  MOVF   77,W
071C:  XORWF  57,F
071D:  RRF    77,F
071E:  DECFSZ 78,F
071F:  GOTO   71B
0720:  BTFSS  0C.4
0721:  GOTO   720
0722:  MOVLW  FE
0723:  BSF    03.5
0724:  ANDWF  18,F
0725:  BCF    03.5
0726:  BTFSS  57.0
0727:  GOTO   72B
0728:  BSF    03.5
0729:  BSF    18.0
072A:  BCF    03.5
072B:  MOVF   56,W
072C:  MOVWF  19
072D:  RETURN
....................  
.................... #OPT 1 
....................  
.................... #define MAX_SECTION 60 
.................... #define MODE_A 2 
.................... #define MODE_B 3 
.................... #define MODE_C 4 
.................... #define MODE_D 5 
....................  
.................... //variables for CCP1 interrupt 
.................... int8 timer1_overflow; 
.................... int32 sigHall_timer; 
.................... //variables for display routine 
.................... int8 circle_trigger; 
.................... int8 section_trigger; 
.................... int8 section_count; 
.................... int16 section_timer; 
.................... signed int8 tuning; 
.................... //variables for RB interrupt, RF input 
.................... BYTE port_b, last_b; 
.................... int8 mode, smode; 
.................... //variables for date, time values 
.................... int8 day, month, year, dow; 
.................... int8 hour, min, sec; 
.................... int8 tick, digit_sec; 
.................... //variables for digital clock 
.................... int8 hour_h, hour_l, min_h, min_l, anal_hour; 
.................... int8 day_h, day_l, month_h, month_l; 
.................... //variables for MODE_D, running letters 
.................... int8 pled_position; 
.................... signed int8 pled_direction; 
.................... int16 pled_count; 
.................... //variables for RS232 communication 
.................... int8 rc, rs232_status; 
....................  
.................... //leds' values at one moment 
.................... struct 
.................... { 
.................... 	int16 blue; 
.................... 	int16 red; 
.................... 	int16 green; 
.................... } rgb_bits; 
....................  
.................... //number to display at upper position (hour-minute) 
.................... const int16 number_upper[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x0040, 0x0020, 0x03F8}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x0248, 0x0248, 0x03F8}, // 3 
.................... 	{0x0078, 0x0040, 0x03F8}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x03F8, 0x0248, 0x03C8}, // 6 
.................... 	{0x0008, 0x0008, 0x03F8}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x0278, 0x0248, 0x03F8}  // 9 
.................... }; 
.................... //number to display at lower position (day-month) 
.................... const int16 number_lower[10][3] =  
.................... { 
.................... 	{0x03F8, 0x0208, 0x03F8}, // 0 
.................... 	{0x03F8, 0x0100, 0x0080}, // 1 
.................... 	{0x03C8, 0x0248, 0x0278}, // 2 
.................... 	{0x03F8, 0x0248, 0x0248}, // 3 
.................... 	{0x03F8, 0x0040, 0x03C0}, // 4 
.................... 	{0x0278, 0x0248, 0x03C8}, // 5 
.................... 	{0x0278, 0x0248, 0x03F8}, // 6 
.................... 	{0x03F8, 0x0200, 0x0200}, // 7 
.................... 	{0x03F8, 0x0248, 0x03F8}, // 8 
.................... 	{0x03F8, 0x0248, 0x03C8}  // 9 
.................... }; 
....................  
.................... //data for MODE_C, FPT logo 
.................... const int16 fpt[180] =  
.................... { 
.................... 	0xE000, 0xE0D8, 0x0000,	0xC000, 0xC070, 0x0000, 
.................... 	0x8000, 0x8000, 0x0018,	0x8000, 0x8000, 0x0018, 
.................... 	0x8000, 0x8000, 0x07F8,	0xC000, 0xC000, 0x07F8, 
.................... 	0xE000, 0xE000, 0x0018,	0xC000, 0xC000, 0x0018, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8001, 0x8000, 0x0001,	0xC003, 0xC000, 0x0003, 
.................... 	0xE007, 0xE000, 0x0007,	0xC00F, 0xC000, 0x000F, 
.................... 	0x801F, 0x8000, 0x001F,	0x803F, 0x8000, 0x003F, 
.................... 	0x807F, 0x8000, 0x007F,	0xC0FF, 0xC000, 0x00FF, 
.................... 	0xE07F, 0xE000, 0x007F,	0xC03F, 0xC000, 0x003F, 
.................... 	0x801F, 0x8000, 0x001F,	0x800F, 0x8000, 0x000F, 
.................... 	0x8007, 0x8000, 0x0007,	0xC003, 0xC000, 0x0003, 
.................... 	0xE001, 0xE000, 0x0001,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0xE000, 0xE000, 0x0000,	0xC000, 0xC000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0x8000, 0x8000, 0x0000, 
.................... 	0x8000, 0x8000, 0x0000,	0xC7F8, 0xC000, 0x0000, 
.................... 	0xE7F8, 0xE000, 0x0000,	0xC0D8, 0xC000, 0x0000, 
.................... 	0x80D8, 0x8000, 0x0000,	0x8018, 0x8000, 0x0000, 
.................... 	0x8000, 0x87F8, 0x0000,	0xC000, 0xC7F8, 0x0000, 
.................... }; 
....................  
.................... //data for MODE_D, running letters 
.................... const int16 pled_inward[15] =  
.................... { 
.................... 	0x01F0, 0x0208, 0x03F8, 0x0000, 
.................... 	0x0248, 0x0248, 0x03F8, 0x0000, 
.................... 	0x0008, 0x0008, 0x03F8, 0x0000, 
.................... 	0x0040, 0x00A0, 0x00F8 
.................... }; 
....................  
.................... const int16 year_2014[15] =  
.................... { 
.................... 	0x03C8, 0x0248, 0x0278, 0x0000, 
.................... 	0x03F8, 0x0208, 0x03F8, 0x0000, 
.................... 	0x0040, 0x0020, 0x03F8, 0x0000, 
.................... 	0x0078, 0x0040, 0x03F8 
.................... }; 
....................  
.................... #include "24256.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC256 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   32768 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    while(status==1) 
....................    { 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    } 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... #include "74595.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for latch 74HC595 - Base on source code from CCS library         || 
.................... //   Last edited: 1 - April - 2014                                           || 
.................... //                                                                           || 
.................... // void latch_write(int16 blue, int16 red, int16 green)                      || 
.................... //                  Writes 48 bits to the 6 chips                            || 
.................... //                                                                           || 
.................... // void latch_ClearAll()      turn off all the leds                          || 
.................... //                                                                           || 
.................... // void latch_SetAll()        turn on all the leds                           || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #IFNDEF EXP_OUT_ENABLE 
....................  
.................... #define EXP_OUT_ENABLE  PIN_E2 
.................... #define EXP_OUT_CLOCK   PIN_E1 
.................... #define EXP_OUT_DO      PIN_E0 
.................... #define NUMBER_OF_74595 6 
....................  
.................... #ENDIF 
....................  
.................... #INLINE 
.................... void latch_write(int16 blue, int16 red, int16 green) 
.................... { 
.................... 	BYTE i; 
.................... 	output_low(EXP_OUT_CLOCK); 
*
1061:  MOVLW  E8
1062:  BSF    03.5
1063:  MOVWF  09
1064:  BCF    03.5
1065:  BCF    09.1
*
128B:  MOVLW  E8
128C:  BSF    03.5
128D:  MOVWF  09
128E:  BCF    03.5
128F:  BCF    09.1
*
1610:  MOVLW  E8
1611:  BSF    03.5
1612:  MOVWF  09
1613:  BCF    03.5
1614:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1066:  MOVLW  E8
1067:  BSF    03.5
1068:  MOVWF  09
1069:  BCF    03.5
106A:  BCF    09.2
*
1290:  MOVLW  E8
1291:  BSF    03.5
1292:  MOVWF  09
1293:  BCF    03.5
1294:  BCF    09.2
*
1615:  MOVLW  E8
1616:  BSF    03.5
1617:  MOVWF  09
1618:  BCF    03.5
1619:  BCF    09.2
....................   	 
.................... 	for(i = 16; i > 0; i--) 
*
106B:  MOVLW  10
106C:  MOVWF  5C
106D:  MOVF   5C,F
106E:  BTFSC  03.2
106F:  GOTO   0D2
*
1295:  MOVLW  10
1296:  MOVWF  5C
1297:  MOVF   5C,F
1298:  BTFSC  03.2
1299:  GOTO   2FC
*
161A:  MOVLW  10
161B:  MOVWF  5C
161C:  MOVF   5C,F
161D:  BTFSC  03.2
161E:  GOTO   681
.................... 	{ 
.................... 		//write green led first, the first bit output will be on the last latch 
.................... 		if(green & 0x01) 
*
1070:  MOVF   5A,W
1071:  ANDLW  01
1072:  MOVWF  77
1073:  CLRF   7A
1074:  MOVF   77,W
1075:  IORWF  7A,W
1076:  BTFSC  03.2
1077:  GOTO   07E
*
129A:  MOVF   5A,W
129B:  ANDLW  01
129C:  MOVWF  77
129D:  CLRF   7A
129E:  MOVF   77,W
129F:  IORWF  7A,W
12A0:  BTFSC  03.2
12A1:  GOTO   2A8
*
161F:  MOVF   5A,W
1620:  ANDLW  01
1621:  MOVWF  77
1622:  CLRF   7A
1623:  MOVF   77,W
1624:  IORWF  7A,W
1625:  BTFSC  03.2
1626:  GOTO   62D
.................... 			output_high(EXP_OUT_DO); 
*
1078:  MOVLW  E8
1079:  BSF    03.5
107A:  MOVWF  09
107B:  BCF    03.5
107C:  BSF    09.0
107D:  GOTO   083
*
12A2:  MOVLW  E8
12A3:  BSF    03.5
12A4:  MOVWF  09
12A5:  BCF    03.5
12A6:  BSF    09.0
12A7:  GOTO   2AD
*
1627:  MOVLW  E8
1628:  BSF    03.5
1629:  MOVWF  09
162A:  BCF    03.5
162B:  BSF    09.0
162C:  GOTO   632
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
107E:  MOVLW  E8
107F:  BSF    03.5
1080:  MOVWF  09
1081:  BCF    03.5
1082:  BCF    09.0
*
12A8:  MOVLW  E8
12A9:  BSF    03.5
12AA:  MOVWF  09
12AB:  BCF    03.5
12AC:  BCF    09.0
*
162D:  MOVLW  E8
162E:  BSF    03.5
162F:  MOVWF  09
1630:  BCF    03.5
1631:  BCF    09.0
.................... 		shift_right(&green, 2, 0); 
*
1083:  BCF    03.0
1084:  RRF    5B,F
1085:  RRF    5A,F
*
12AD:  BCF    03.0
12AE:  RRF    5B,F
12AF:  RRF    5A,F
*
1632:  BCF    03.0
1633:  RRF    5B,F
1634:  RRF    5A,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
1086:  MOVLW  E8
1087:  BSF    03.5
1088:  MOVWF  09
1089:  BCF    03.5
108A:  BSF    09.1
*
12B0:  MOVLW  E8
12B1:  BSF    03.5
12B2:  MOVWF  09
12B3:  BCF    03.5
12B4:  BSF    09.1
*
1635:  MOVLW  E8
1636:  BSF    03.5
1637:  MOVWF  09
1638:  BCF    03.5
1639:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
108B:  MOVLW  E8
108C:  BSF    03.5
108D:  MOVWF  09
108E:  BCF    03.5
108F:  BCF    09.1
*
12B5:  MOVLW  E8
12B6:  BSF    03.5
12B7:  MOVWF  09
12B8:  BCF    03.5
12B9:  BCF    09.1
*
163A:  MOVLW  E8
163B:  BSF    03.5
163C:  MOVWF  09
163D:  BCF    03.5
163E:  BCF    09.1
.................... 	  	 
.................... 		//output red 
.................... 		if(red & 0x01) 
*
1090:  MOVF   58,W
1091:  ANDLW  01
1092:  MOVWF  77
1093:  CLRF   7A
1094:  MOVF   77,W
1095:  IORWF  7A,W
1096:  BTFSC  03.2
1097:  GOTO   09E
*
12BA:  MOVF   58,W
12BB:  ANDLW  01
12BC:  MOVWF  77
12BD:  CLRF   7A
12BE:  MOVF   77,W
12BF:  IORWF  7A,W
12C0:  BTFSC  03.2
12C1:  GOTO   2C8
*
163F:  MOVF   58,W
1640:  ANDLW  01
1641:  MOVWF  77
1642:  CLRF   7A
1643:  MOVF   77,W
1644:  IORWF  7A,W
1645:  BTFSC  03.2
1646:  GOTO   64D
.................... 			output_high(EXP_OUT_DO); 
*
1098:  MOVLW  E8
1099:  BSF    03.5
109A:  MOVWF  09
109B:  BCF    03.5
109C:  BSF    09.0
109D:  GOTO   0A3
*
12C2:  MOVLW  E8
12C3:  BSF    03.5
12C4:  MOVWF  09
12C5:  BCF    03.5
12C6:  BSF    09.0
12C7:  GOTO   2CD
*
1647:  MOVLW  E8
1648:  BSF    03.5
1649:  MOVWF  09
164A:  BCF    03.5
164B:  BSF    09.0
164C:  GOTO   652
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
109E:  MOVLW  E8
109F:  BSF    03.5
10A0:  MOVWF  09
10A1:  BCF    03.5
10A2:  BCF    09.0
*
12C8:  MOVLW  E8
12C9:  BSF    03.5
12CA:  MOVWF  09
12CB:  BCF    03.5
12CC:  BCF    09.0
*
164D:  MOVLW  E8
164E:  BSF    03.5
164F:  MOVWF  09
1650:  BCF    03.5
1651:  BCF    09.0
.................... 		shift_right(&red, 2, 0); 
*
10A3:  BCF    03.0
10A4:  RRF    59,F
10A5:  RRF    58,F
*
12CD:  BCF    03.0
12CE:  RRF    59,F
12CF:  RRF    58,F
*
1652:  BCF    03.0
1653:  RRF    59,F
1654:  RRF    58,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10A6:  MOVLW  E8
10A7:  BSF    03.5
10A8:  MOVWF  09
10A9:  BCF    03.5
10AA:  BSF    09.1
*
12D0:  MOVLW  E8
12D1:  BSF    03.5
12D2:  MOVWF  09
12D3:  BCF    03.5
12D4:  BSF    09.1
*
1655:  MOVLW  E8
1656:  BSF    03.5
1657:  MOVWF  09
1658:  BCF    03.5
1659:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10AB:  MOVLW  E8
10AC:  BSF    03.5
10AD:  MOVWF  09
10AE:  BCF    03.5
10AF:  BCF    09.1
*
12D5:  MOVLW  E8
12D6:  BSF    03.5
12D7:  MOVWF  09
12D8:  BCF    03.5
12D9:  BCF    09.1
*
165A:  MOVLW  E8
165B:  BSF    03.5
165C:  MOVWF  09
165D:  BCF    03.5
165E:  BCF    09.1
.................... 	  	 
.................... 		//output blue 
.................... 		if(blue & 0x01) 
*
10B0:  MOVF   56,W
10B1:  ANDLW  01
10B2:  MOVWF  77
10B3:  CLRF   7A
10B4:  MOVF   77,W
10B5:  IORWF  7A,W
10B6:  BTFSC  03.2
10B7:  GOTO   0BE
*
12DA:  MOVF   56,W
12DB:  ANDLW  01
12DC:  MOVWF  77
12DD:  CLRF   7A
12DE:  MOVF   77,W
12DF:  IORWF  7A,W
12E0:  BTFSC  03.2
12E1:  GOTO   2E8
*
165F:  MOVF   56,W
1660:  ANDLW  01
1661:  MOVWF  77
1662:  CLRF   7A
1663:  MOVF   77,W
1664:  IORWF  7A,W
1665:  BTFSC  03.2
1666:  GOTO   66D
.................... 			output_high(EXP_OUT_DO); 
*
10B8:  MOVLW  E8
10B9:  BSF    03.5
10BA:  MOVWF  09
10BB:  BCF    03.5
10BC:  BSF    09.0
10BD:  GOTO   0C3
*
12E2:  MOVLW  E8
12E3:  BSF    03.5
12E4:  MOVWF  09
12E5:  BCF    03.5
12E6:  BSF    09.0
12E7:  GOTO   2ED
*
1667:  MOVLW  E8
1668:  BSF    03.5
1669:  MOVWF  09
166A:  BCF    03.5
166B:  BSF    09.0
166C:  GOTO   672
.................... 		else 
.................... 			output_low(EXP_OUT_DO); 
*
10BE:  MOVLW  E8
10BF:  BSF    03.5
10C0:  MOVWF  09
10C1:  BCF    03.5
10C2:  BCF    09.0
*
12E8:  MOVLW  E8
12E9:  BSF    03.5
12EA:  MOVWF  09
12EB:  BCF    03.5
12EC:  BCF    09.0
*
166D:  MOVLW  E8
166E:  BSF    03.5
166F:  MOVWF  09
1670:  BCF    03.5
1671:  BCF    09.0
.................... 		shift_right(&blue, 2, 0); 
*
10C3:  BCF    03.0
10C4:  RRF    57,F
10C5:  RRF    56,F
*
12ED:  BCF    03.0
12EE:  RRF    57,F
12EF:  RRF    56,F
*
1672:  BCF    03.0
1673:  RRF    57,F
1674:  RRF    56,F
.................... 		output_high(EXP_OUT_CLOCK); 
*
10C6:  MOVLW  E8
10C7:  BSF    03.5
10C8:  MOVWF  09
10C9:  BCF    03.5
10CA:  BSF    09.1
*
12F0:  MOVLW  E8
12F1:  BSF    03.5
12F2:  MOVWF  09
12F3:  BCF    03.5
12F4:  BSF    09.1
*
1675:  MOVLW  E8
1676:  BSF    03.5
1677:  MOVWF  09
1678:  BCF    03.5
1679:  BSF    09.1
.................... 		output_low(EXP_OUT_CLOCK); 
*
10CB:  MOVLW  E8
10CC:  BSF    03.5
10CD:  MOVWF  09
10CE:  BCF    03.5
10CF:  BCF    09.1
10D0:  DECF   5C,F
10D1:  GOTO   06D
*
12F5:  MOVLW  E8
12F6:  BSF    03.5
12F7:  MOVWF  09
12F8:  BCF    03.5
12F9:  BCF    09.1
12FA:  DECF   5C,F
12FB:  GOTO   297
*
167A:  MOVLW  E8
167B:  BSF    03.5
167C:  MOVWF  09
167D:  BCF    03.5
167E:  BCF    09.1
167F:  DECF   5C,F
1680:  GOTO   61C
.................... 	} 
....................   	 
.................... 	output_high(EXP_OUT_ENABLE); 
*
10D2:  MOVLW  E8
10D3:  BSF    03.5
10D4:  MOVWF  09
10D5:  BCF    03.5
10D6:  BSF    09.2
*
12FC:  MOVLW  E8
12FD:  BSF    03.5
12FE:  MOVWF  09
12FF:  BCF    03.5
1300:  BSF    09.2
*
1681:  MOVLW  E8
1682:  BSF    03.5
1683:  MOVWF  09
1684:  BCF    03.5
1685:  BSF    09.2
.................... 	output_low(EXP_OUT_ENABLE); 
*
10D7:  MOVLW  E8
10D8:  BSF    03.5
10D9:  MOVWF  09
10DA:  BCF    03.5
10DB:  BCF    09.2
*
1301:  MOVLW  E8
1302:  BSF    03.5
1303:  MOVWF  09
1304:  BCF    03.5
1305:  BCF    09.2
*
1686:  MOVLW  E8
1687:  BSF    03.5
1688:  MOVWF  09
1689:  BCF    03.5
168A:  BCF    09.2
.................... } 
....................  
.................... #INLINE 
.................... void latch_ClearAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
*
132C:  MOVLW  E8
132D:  BSF    03.5
132E:  MOVWF  09
132F:  BCF    03.5
1330:  BCF    09.1
*
159D:  MOVLW  E8
159E:  BSF    03.5
159F:  MOVWF  09
15A0:  BCF    03.5
15A1:  BCF    09.1
*
1692:  MOVLW  E8
1693:  BSF    03.5
1694:  MOVWF  09
1695:  BCF    03.5
1696:  BCF    09.1
.................... 	output_low(EXP_OUT_ENABLE); 
*
1331:  MOVLW  E8
1332:  BSF    03.5
1333:  MOVWF  09
1334:  BCF    03.5
1335:  BCF    09.2
*
15A2:  MOVLW  E8
15A3:  BSF    03.5
15A4:  MOVWF  09
15A5:  BCF    03.5
15A6:  BCF    09.2
*
1697:  MOVLW  E8
1698:  BSF    03.5
1699:  MOVWF  09
169A:  BCF    03.5
169B:  BCF    09.2
.................... 	output_low(EXP_OUT_DO); 
*
1336:  MOVLW  E8
1337:  BSF    03.5
1338:  MOVWF  09
1339:  BCF    03.5
133A:  BCF    09.0
*
15A7:  MOVLW  E8
15A8:  BSF    03.5
15A9:  MOVWF  09
15AA:  BCF    03.5
15AB:  BCF    09.0
*
169C:  MOVLW  E8
169D:  BSF    03.5
169E:  MOVWF  09
169F:  BCF    03.5
16A0:  BCF    09.0
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
*
133B:  MOVLW  30
133C:  MOVWF  56
133D:  MOVF   56,F
133E:  BTFSC  03.2
133F:  GOTO   34C
*
15AC:  MOVLW  30
15AD:  MOVWF  56
15AE:  MOVF   56,F
15AF:  BTFSC  03.2
15B0:  GOTO   5BD
*
16A1:  MOVLW  30
16A2:  MOVWF  56
16A3:  MOVF   56,F
16A4:  BTFSC  03.2
16A5:  GOTO   6B2
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
*
1340:  MOVLW  E8
1341:  BSF    03.5
1342:  MOVWF  09
1343:  BCF    03.5
1344:  BSF    09.1
*
15B1:  MOVLW  E8
15B2:  BSF    03.5
15B3:  MOVWF  09
15B4:  BCF    03.5
15B5:  BSF    09.1
*
16A6:  MOVLW  E8
16A7:  BSF    03.5
16A8:  MOVWF  09
16A9:  BCF    03.5
16AA:  BSF    09.1
....................    	output_low(EXP_OUT_CLOCK); 
*
1345:  MOVLW  E8
1346:  BSF    03.5
1347:  MOVWF  09
1348:  BCF    03.5
1349:  BCF    09.1
134A:  DECF   56,F
134B:  GOTO   33D
*
15B6:  MOVLW  E8
15B7:  BSF    03.5
15B8:  MOVWF  09
15B9:  BCF    03.5
15BA:  BCF    09.1
15BB:  DECF   56,F
15BC:  GOTO   5AE
*
16AB:  MOVLW  E8
16AC:  BSF    03.5
16AD:  MOVWF  09
16AE:  BCF    03.5
16AF:  BCF    09.1
16B0:  DECF   56,F
16B1:  GOTO   6A3
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
*
134C:  MOVLW  E8
134D:  BSF    03.5
134E:  MOVWF  09
134F:  BCF    03.5
1350:  BSF    09.2
*
15BD:  MOVLW  E8
15BE:  BSF    03.5
15BF:  MOVWF  09
15C0:  BCF    03.5
15C1:  BSF    09.2
*
16B2:  MOVLW  E8
16B3:  BSF    03.5
16B4:  MOVWF  09
16B5:  BCF    03.5
16B6:  BSF    09.2
....................    output_low(EXP_OUT_ENABLE); 
*
1351:  MOVLW  E8
1352:  BSF    03.5
1353:  MOVWF  09
1354:  BCF    03.5
1355:  BCF    09.2
*
15C2:  MOVLW  E8
15C3:  BSF    03.5
15C4:  MOVWF  09
15C5:  BCF    03.5
15C6:  BCF    09.2
*
16B7:  MOVLW  E8
16B8:  BSF    03.5
16B9:  MOVWF  09
16BA:  BCF    03.5
16BB:  BCF    09.2
.................... } 
....................  
.................... void latch_SetAll() 
.................... { 
.................... 	BYTE i; 
....................    output_low(EXP_OUT_CLOCK); 
.................... 	output_low(EXP_OUT_ENABLE); 
.................... 	output_high(EXP_OUT_DO); 
.................... 	for(i = NUMBER_OF_74595 * 8; i > 0; i--) 
.................... 	{ 
.................... 		output_high(EXP_OUT_CLOCK); 
....................    	output_low(EXP_OUT_CLOCK); 
.................... 	} 
.................... 	output_high(EXP_OUT_ENABLE); 
....................    output_low(EXP_OUT_ENABLE); 
.................... } 
....................  
....................  
.................... #include "ds1307.c" 
.................... //===========================================================================|| 
.................... //   pLED - FPT University                                                   || 
.................... //   Driver for Real Time Clock - Base on source code from ccsinfo.com       || 
.................... //   Last edited: 20 - March - 2014                                          || 
.................... //                                                                           || 
.................... // ds1307_init() - Enable oscillator without clearing the seconds register   || 
.................... //                 used when PIC loses power and DS1307 run from 3V BAT      || 
.................... //               - Enable squarewave output with 1Hz frequency               || 
.................... //                                                                           || 
.................... // ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time    || 
.................... //                                                                           || 
.................... // ds1307_get_date(day,mth,year,dow)               Get the date              || 
.................... //                                                                           || 
.................... // ds1307_get_time(hr,min,sec)                     Get the time              || 
.................... //                                                                           || 
.................... //===========================================================================|| 
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL, slow)  
*
03D2:  MOVLW  08
03D3:  MOVWF  78
03D4:  MOVLW  04
03D5:  MOVWF  77
03D6:  DECFSZ 77,F
03D7:  GOTO   3D6
03D8:  BCF    07.3
03D9:  BCF    55.3
03DA:  MOVF   55,W
03DB:  BSF    03.5
03DC:  MOVWF  07
03DD:  MOVLW  03
03DE:  MOVWF  77
03DF:  BCF    03.5
03E0:  DECFSZ 77,F
03E1:  GOTO   3E0
03E2:  RLF    5E,F
03E3:  BCF    07.4
03E4:  BTFSS  03.0
03E5:  GOTO   3EC
03E6:  BSF    55.4
03E7:  MOVF   55,W
03E8:  BSF    03.5
03E9:  MOVWF  07
03EA:  BCF    03.5
03EB:  GOTO   3F1
03EC:  BCF    55.4
03ED:  MOVF   55,W
03EE:  BSF    03.5
03EF:  MOVWF  07
03F0:  BCF    03.5
03F1:  NOP
03F2:  BSF    55.3
03F3:  MOVF   55,W
03F4:  BSF    03.5
03F5:  MOVWF  07
03F6:  BCF    03.5
03F7:  BTFSS  07.3
03F8:  GOTO   3F7
03F9:  DECFSZ 78,F
03FA:  GOTO   3D4
03FB:  MOVLW  04
03FC:  MOVWF  77
03FD:  DECFSZ 77,F
03FE:  GOTO   3FD
03FF:  BCF    07.3
0400:  BCF    55.3
0401:  MOVF   55,W
0402:  BSF    03.5
0403:  MOVWF  07
0404:  NOP
0405:  BCF    03.5
0406:  BSF    55.4
0407:  MOVF   55,W
0408:  BSF    03.5
0409:  MOVWF  07
040A:  MOVLW  03
040B:  MOVWF  77
040C:  BCF    03.5
040D:  DECFSZ 77,F
040E:  GOTO   40D
040F:  MOVLW  03
0410:  MOVWF  77
0411:  DECFSZ 77,F
0412:  GOTO   411
0413:  BSF    55.3
0414:  MOVF   55,W
0415:  BSF    03.5
0416:  MOVWF  07
0417:  BCF    03.5
0418:  BTFSS  07.3
0419:  GOTO   418
041A:  CLRF   78
041B:  MOVLW  03
041C:  MOVWF  77
041D:  DECFSZ 77,F
041E:  GOTO   41D
041F:  BTFSC  07.4
0420:  BSF    78.0
0421:  BCF    07.3
0422:  BCF    55.3
0423:  MOVF   55,W
0424:  BSF    03.5
0425:  MOVWF  07
0426:  BCF    03.5
0427:  BCF    07.4
0428:  BCF    55.4
0429:  MOVF   55,W
042A:  BSF    03.5
042B:  MOVWF  07
042C:  BCF    03.5
042D:  RETURN
042E:  MOVLW  08
042F:  MOVWF  5B
0430:  MOVF   77,W
0431:  MOVWF  5C
0432:  BSF    55.4
0433:  MOVF   55,W
0434:  BSF    03.5
0435:  MOVWF  07
0436:  MOVLW  03
0437:  MOVWF  77
0438:  BCF    03.5
0439:  DECFSZ 77,F
043A:  GOTO   439
043B:  BSF    55.3
043C:  MOVF   55,W
043D:  BSF    03.5
043E:  MOVWF  07
043F:  BCF    03.5
0440:  BTFSS  07.3
0441:  GOTO   440
0442:  BTFSC  07.4
0443:  BSF    03.0
0444:  BTFSS  07.4
0445:  BCF    03.0
0446:  RLF    78,F
0447:  MOVLW  04
0448:  MOVWF  77
0449:  DECFSZ 77,F
044A:  GOTO   449
044B:  BCF    55.3
044C:  MOVF   55,W
044D:  BSF    03.5
044E:  MOVWF  07
044F:  BCF    03.5
0450:  BCF    07.3
0451:  DECFSZ 5B,F
0452:  GOTO   432
0453:  BSF    55.4
0454:  MOVF   55,W
0455:  BSF    03.5
0456:  MOVWF  07
0457:  MOVLW  03
0458:  MOVWF  77
0459:  BCF    03.5
045A:  DECFSZ 77,F
045B:  GOTO   45A
045C:  BCF    07.4
045D:  MOVF   5C,W
045E:  BTFSC  03.2
045F:  GOTO   465
0460:  BCF    55.4
0461:  MOVF   55,W
0462:  BSF    03.5
0463:  MOVWF  07
0464:  BCF    03.5
0465:  NOP
0466:  BSF    55.3
0467:  MOVF   55,W
0468:  BSF    03.5
0469:  MOVWF  07
046A:  BCF    03.5
046B:  BTFSS  07.3
046C:  GOTO   46B
046D:  MOVLW  04
046E:  MOVWF  77
046F:  DECFSZ 77,F
0470:  GOTO   46F
0471:  BCF    07.3
0472:  BCF    55.3
0473:  MOVF   55,W
0474:  BSF    03.5
0475:  MOVWF  07
0476:  MOVLW  03
0477:  MOVWF  77
0478:  BCF    03.5
0479:  DECFSZ 77,F
047A:  GOTO   479
047B:  BCF    07.4
047C:  BCF    55.4
047D:  MOVF   55,W
047E:  BSF    03.5
047F:  MOVWF  07
0480:  BCF    03.5
0481:  RETURN
....................  
.................... int8 bin2bcd(int8 bin_value);  
.................... int8 bcd2bin(int8 bcd_value);  
....................  
.................... void ds1307_init(void)  
0482:  CLRF   56
.................... {  
....................    int8 byte0 = 0;  
....................  
....................    i2c_start();          // send start signal 
0483:  BSF    55.4
0484:  MOVF   55,W
0485:  BSF    03.5
0486:  MOVWF  07
0487:  MOVLW  04
0488:  MOVWF  77
0489:  BCF    03.5
048A:  DECFSZ 77,F
048B:  GOTO   48A
048C:  BSF    55.3
048D:  MOVF   55,W
048E:  BSF    03.5
048F:  MOVWF  07
0490:  MOVLW  03
0491:  MOVWF  77
0492:  BCF    03.5
0493:  DECFSZ 77,F
0494:  GOTO   493
0495:  BCF    07.4
0496:  BCF    55.4
0497:  MOVF   55,W
0498:  BSF    03.5
0499:  MOVWF  07
049A:  MOVLW  04
049B:  MOVWF  77
049C:  BCF    03.5
049D:  DECFSZ 77,F
049E:  GOTO   49D
049F:  BCF    07.3
04A0:  BCF    55.3
04A1:  MOVF   55,W
04A2:  BSF    03.5
04A3:  MOVWF  07
....................    i2c_write(0xD0);      // indentification of I2C slave device with write operation 
04A4:  MOVLW  D0
04A5:  BCF    03.5
04A6:  MOVWF  5E
04A7:  CALL   3D2
....................    i2c_write(0x00);      // address of register 0 
04A8:  CLRF   5E
04A9:  CALL   3D2
....................    i2c_start(); 
04AA:  BSF    55.4
04AB:  MOVF   55,W
04AC:  BSF    03.5
04AD:  MOVWF  07
04AE:  MOVLW  04
04AF:  MOVWF  77
04B0:  BCF    03.5
04B1:  DECFSZ 77,F
04B2:  GOTO   4B1
04B3:  BSF    55.3
04B4:  MOVF   55,W
04B5:  BSF    03.5
04B6:  MOVWF  07
04B7:  MOVLW  03
04B8:  MOVWF  77
04B9:  BCF    03.5
04BA:  DECFSZ 77,F
04BB:  GOTO   4BA
04BC:  BTFSS  07.3
04BD:  GOTO   4BC
04BE:  BCF    07.4
04BF:  BCF    55.4
04C0:  MOVF   55,W
04C1:  BSF    03.5
04C2:  MOVWF  07
04C3:  MOVLW  04
04C4:  MOVWF  77
04C5:  BCF    03.5
04C6:  DECFSZ 77,F
04C7:  GOTO   4C6
04C8:  BCF    07.3
04C9:  BCF    55.3
04CA:  MOVF   55,W
04CB:  BSF    03.5
04CC:  MOVWF  07
....................    i2c_write(0xD1);      // change operation to read 
04CD:  MOVLW  D1
04CE:  BCF    03.5
04CF:  MOVWF  5E
04D0:  CALL   3D2
....................    byte0 = i2c_read(0);  // read current first byte in DS1307, which stores seconds value and CH bit (Clock Halt) 
04D1:  CLRF   77
04D2:  CALL   42E
04D3:  MOVF   78,W
04D4:  MOVWF  56
....................    i2c_stop();           // send stop signal 
04D5:  BCF    55.4
04D6:  MOVF   55,W
04D7:  BSF    03.5
04D8:  MOVWF  07
04D9:  NOP
04DA:  BCF    03.5
04DB:  BSF    55.3
04DC:  MOVF   55,W
04DD:  BSF    03.5
04DE:  MOVWF  07
04DF:  BCF    03.5
04E0:  BTFSS  07.3
04E1:  GOTO   4E0
04E2:  MOVLW  04
04E3:  MOVWF  77
04E4:  DECFSZ 77,F
04E5:  GOTO   4E4
04E6:  GOTO   4E7
04E7:  NOP
04E8:  BSF    55.4
04E9:  MOVF   55,W
04EA:  BSF    03.5
04EB:  MOVWF  07
04EC:  MOVLW  04
04ED:  MOVWF  77
04EE:  BCF    03.5
04EF:  DECFSZ 77,F
04F0:  GOTO   4EF
....................    bit_clear(byte0, 7);  // clear bit 7 to enable oscillator, needed for clock to run 
04F1:  BCF    56.7
....................  
....................    delay_us(3);          // make sure another transmit is possible, base on datasheet 
04F2:  MOVLW  04
04F3:  MOVWF  77
04F4:  DECFSZ 77,F
04F5:  GOTO   4F4
04F6:  GOTO   4F7
....................  
....................    i2c_start();  
04F7:  BSF    55.4
04F8:  MOVF   55,W
04F9:  BSF    03.5
04FA:  MOVWF  07
04FB:  MOVLW  04
04FC:  MOVWF  77
04FD:  BCF    03.5
04FE:  DECFSZ 77,F
04FF:  GOTO   4FE
0500:  BSF    55.3
0501:  MOVF   55,W
0502:  BSF    03.5
0503:  MOVWF  07
0504:  MOVLW  03
0505:  MOVWF  77
0506:  BCF    03.5
0507:  DECFSZ 77,F
0508:  GOTO   507
0509:  BCF    07.4
050A:  BCF    55.4
050B:  MOVF   55,W
050C:  BSF    03.5
050D:  MOVWF  07
050E:  MOVLW  04
050F:  MOVWF  77
0510:  BCF    03.5
0511:  DECFSZ 77,F
0512:  GOTO   511
0513:  BCF    07.3
0514:  BCF    55.3
0515:  MOVF   55,W
0516:  BSF    03.5
0517:  MOVWF  07
....................    i2c_write(0xD0);      // write to ds1307 
0518:  MOVLW  D0
0519:  BCF    03.5
051A:  MOVWF  5E
051B:  CALL   3D2
....................    i2c_write(0x00);      // register 0 
051C:  CLRF   5E
051D:  CALL   3D2
....................    i2c_write(byte0);     // write to register 0 with the same seconds and bit 7 cleared 
051E:  MOVF   56,W
051F:  MOVWF  5E
0520:  CALL   3D2
....................    i2c_stop(); 
0521:  BCF    55.4
0522:  MOVF   55,W
0523:  BSF    03.5
0524:  MOVWF  07
0525:  NOP
0526:  BCF    03.5
0527:  BSF    55.3
0528:  MOVF   55,W
0529:  BSF    03.5
052A:  MOVWF  07
052B:  BCF    03.5
052C:  BTFSS  07.3
052D:  GOTO   52C
052E:  MOVLW  04
052F:  MOVWF  77
0530:  DECFSZ 77,F
0531:  GOTO   530
0532:  GOTO   533
0533:  NOP
0534:  BSF    55.4
0535:  MOVF   55,W
0536:  BSF    03.5
0537:  MOVWF  07
0538:  MOVLW  04
0539:  MOVWF  77
053A:  BCF    03.5
053B:  DECFSZ 77,F
053C:  GOTO   53B
....................     
....................    delay_us(3); 
053D:  MOVLW  04
053E:  MOVWF  77
053F:  DECFSZ 77,F
0540:  GOTO   53F
0541:  GOTO   542
....................     
....................    i2c_start(); 
0542:  BSF    55.4
0543:  MOVF   55,W
0544:  BSF    03.5
0545:  MOVWF  07
0546:  MOVLW  04
0547:  MOVWF  77
0548:  BCF    03.5
0549:  DECFSZ 77,F
054A:  GOTO   549
054B:  BSF    55.3
054C:  MOVF   55,W
054D:  BSF    03.5
054E:  MOVWF  07
054F:  MOVLW  03
0550:  MOVWF  77
0551:  BCF    03.5
0552:  DECFSZ 77,F
0553:  GOTO   552
0554:  BCF    07.4
0555:  BCF    55.4
0556:  MOVF   55,W
0557:  BSF    03.5
0558:  MOVWF  07
0559:  MOVLW  04
055A:  MOVWF  77
055B:  BCF    03.5
055C:  DECFSZ 77,F
055D:  GOTO   55C
055E:  BCF    07.3
055F:  BCF    55.3
0560:  MOVF   55,W
0561:  BSF    03.5
0562:  MOVWF  07
....................    i2c_write(0xD0); 
0563:  MOVLW  D0
0564:  BCF    03.5
0565:  MOVWF  5E
0566:  CALL   3D2
....................    i2c_write(0x07);      // Control Register  
0567:  MOVLW  07
0568:  MOVWF  5E
0569:  CALL   3D2
....................    i2c_write(0x10);      // enable squarewave output pin with frequency 1Hz 
056A:  MOVLW  10
056B:  MOVWF  5E
056C:  CALL   3D2
....................    i2c_stop();  
056D:  BCF    55.4
056E:  MOVF   55,W
056F:  BSF    03.5
0570:  MOVWF  07
0571:  NOP
0572:  BCF    03.5
0573:  BSF    55.3
0574:  MOVF   55,W
0575:  BSF    03.5
0576:  MOVWF  07
0577:  BCF    03.5
0578:  BTFSS  07.3
0579:  GOTO   578
057A:  MOVLW  04
057B:  MOVWF  77
057C:  DECFSZ 77,F
057D:  GOTO   57C
057E:  GOTO   57F
057F:  NOP
0580:  BSF    55.4
0581:  MOVF   55,W
0582:  BSF    03.5
0583:  MOVWF  07
0584:  MOVLW  04
0585:  MOVWF  77
0586:  BCF    03.5
0587:  DECFSZ 77,F
0588:  GOTO   587
0589:  BCF    0A.3
058A:  BSF    0A.4
058B:  GOTO   049 (RETURN)
....................  
.................... }  
....................  
.................... void ds1307_set_date_time(int8 day, int8 mth, int8 year, int8 dow, int8 hr, int8 min, int8 sec)  
.................... {  
....................   sec &= 0x7F;           // clear CH bit 
*
069C:  BCF    5C.7
....................   hr  &= 0x3F;           // set 24h time mode 
069D:  MOVLW  3F
069E:  ANDWF  5A,F
....................  
....................   i2c_start();  
069F:  BSF    55.4
06A0:  MOVF   55,W
06A1:  BSF    03.5
06A2:  MOVWF  07
06A3:  MOVLW  04
06A4:  MOVWF  77
06A5:  BCF    03.5
06A6:  DECFSZ 77,F
06A7:  GOTO   6A6
06A8:  BSF    55.3
06A9:  MOVF   55,W
06AA:  BSF    03.5
06AB:  MOVWF  07
06AC:  MOVLW  03
06AD:  MOVWF  77
06AE:  BCF    03.5
06AF:  DECFSZ 77,F
06B0:  GOTO   6AF
06B1:  BCF    07.4
06B2:  BCF    55.4
06B3:  MOVF   55,W
06B4:  BSF    03.5
06B5:  MOVWF  07
06B6:  MOVLW  04
06B7:  MOVWF  77
06B8:  BCF    03.5
06B9:  DECFSZ 77,F
06BA:  GOTO   6B9
06BB:  BCF    07.3
06BC:  BCF    55.3
06BD:  MOVF   55,W
06BE:  BSF    03.5
06BF:  MOVWF  07
....................   i2c_write(0xD0);            // I2C write address  
06C0:  MOVLW  D0
06C1:  BCF    03.5
06C2:  MOVWF  5E
06C3:  CALL   3D2
....................   i2c_write(0x00);            // Start at REG 0 
06C4:  CLRF   5E
06C5:  CALL   3D2
....................   i2c_write(bin2bcd(sec));    // REG 0 - seconds 
06C6:  MOVF   5C,W
06C7:  MOVWF  5D
06C8:  CALL   5DA
06C9:  MOVF   78,W
06CA:  MOVWF  5D
06CB:  MOVWF  5E
06CC:  CALL   3D2
....................   i2c_write(bin2bcd(min));    // REG 1 - minutes 
06CD:  MOVF   5B,W
06CE:  MOVWF  5D
06CF:  CALL   5DA
06D0:  MOVF   78,W
06D1:  MOVWF  5D
06D2:  MOVWF  5E
06D3:  CALL   3D2
....................   i2c_write(bin2bcd(hr));     // REG 2 - hours 
06D4:  MOVF   5A,W
06D5:  MOVWF  5D
06D6:  CALL   5DA
06D7:  MOVF   78,W
06D8:  MOVWF  5D
06D9:  MOVWF  5E
06DA:  CALL   3D2
....................   i2c_write(bin2bcd(dow));    // REG 3 - date of week 
06DB:  MOVF   59,W
06DC:  MOVWF  5D
06DD:  CALL   5DA
06DE:  MOVF   78,W
06DF:  MOVWF  5D
06E0:  MOVWF  5E
06E1:  CALL   3D2
....................   i2c_write(bin2bcd(day));    // REG 4 - day of month 
06E2:  MOVF   56,W
06E3:  MOVWF  5D
06E4:  CALL   5DA
06E5:  MOVF   78,W
06E6:  MOVWF  5D
06E7:  MOVWF  5E
06E8:  CALL   3D2
....................   i2c_write(bin2bcd(mth));    // REG 5 - month 
06E9:  MOVF   57,W
06EA:  MOVWF  5D
06EB:  CALL   5DA
06EC:  MOVF   78,W
06ED:  MOVWF  5D
06EE:  MOVWF  5E
06EF:  CALL   3D2
....................   i2c_write(bin2bcd(year));   // REG 6 - year 
06F0:  MOVF   58,W
06F1:  MOVWF  5D
06F2:  CALL   5DA
06F3:  MOVF   78,W
06F4:  MOVWF  5D
06F5:  MOVWF  5E
06F6:  CALL   3D2
....................   //i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
....................   i2c_stop();  
06F7:  BCF    55.4
06F8:  MOVF   55,W
06F9:  BSF    03.5
06FA:  MOVWF  07
06FB:  NOP
06FC:  BCF    03.5
06FD:  BSF    55.3
06FE:  MOVF   55,W
06FF:  BSF    03.5
0700:  MOVWF  07
0701:  BCF    03.5
0702:  BTFSS  07.3
0703:  GOTO   702
0704:  MOVLW  04
0705:  MOVWF  77
0706:  DECFSZ 77,F
0707:  GOTO   706
0708:  GOTO   709
0709:  NOP
070A:  BSF    55.4
070B:  MOVF   55,W
070C:  BSF    03.5
070D:  MOVWF  07
070E:  MOVLW  04
070F:  MOVWF  77
0710:  BCF    03.5
0711:  DECFSZ 77,F
0712:  GOTO   711
0713:  BCF    0A.3
0714:  BSF    0A.4
0715:  GOTO   317 (RETURN)
.................... }  
....................  
.................... void ds1307_get_date(int8 &day, int8 &mth, int8 &year, int8 &dow)  
.................... {  
....................   i2c_start();  
*
1175:  BSF    55.4
1176:  MOVF   55,W
1177:  BSF    03.5
1178:  MOVWF  07
1179:  MOVLW  04
117A:  MOVWF  77
117B:  BCF    03.5
117C:  DECFSZ 77,F
117D:  GOTO   17C
117E:  BSF    55.3
117F:  MOVF   55,W
1180:  BSF    03.5
1181:  MOVWF  07
1182:  MOVLW  03
1183:  MOVWF  77
1184:  BCF    03.5
1185:  DECFSZ 77,F
1186:  GOTO   185
1187:  BCF    07.4
1188:  BCF    55.4
1189:  MOVF   55,W
118A:  BSF    03.5
118B:  MOVWF  07
118C:  MOVLW  04
118D:  MOVWF  77
118E:  BCF    03.5
118F:  DECFSZ 77,F
1190:  GOTO   18F
1191:  BCF    07.3
1192:  BCF    55.3
1193:  MOVF   55,W
1194:  BSF    03.5
1195:  MOVWF  07
*
13F3:  BSF    55.4
13F4:  MOVF   55,W
13F5:  BSF    03.5
13F6:  MOVWF  07
13F7:  MOVLW  04
13F8:  MOVWF  77
13F9:  BCF    03.5
13FA:  DECFSZ 77,F
13FB:  GOTO   3FA
13FC:  BSF    55.3
13FD:  MOVF   55,W
13FE:  BSF    03.5
13FF:  MOVWF  07
1400:  MOVLW  03
1401:  MOVWF  77
1402:  BCF    03.5
1403:  DECFSZ 77,F
1404:  GOTO   403
1405:  BCF    07.4
1406:  BCF    55.4
1407:  MOVF   55,W
1408:  BSF    03.5
1409:  MOVWF  07
140A:  MOVLW  04
140B:  MOVWF  77
140C:  BCF    03.5
140D:  DECFSZ 77,F
140E:  GOTO   40D
140F:  BCF    07.3
1410:  BCF    55.3
1411:  MOVF   55,W
1412:  BSF    03.5
1413:  MOVWF  07
....................   i2c_write(0xD0);  
*
1196:  MOVLW  D0
1197:  BCF    03.5
1198:  MOVWF  5E
1199:  BCF    0A.4
119A:  CALL   3D2
119B:  BSF    0A.4
*
1414:  MOVLW  D0
1415:  BCF    03.5
1416:  MOVWF  5E
1417:  BCF    0A.4
1418:  CALL   3D2
1419:  BSF    0A.4
....................   i2c_write(0x03);            // Start at REG 3 
*
119C:  MOVLW  03
119D:  MOVWF  5E
119E:  BCF    0A.4
119F:  CALL   3D2
11A0:  BSF    0A.4
*
141A:  MOVLW  03
141B:  MOVWF  5E
141C:  BCF    0A.4
141D:  CALL   3D2
141E:  BSF    0A.4
....................   i2c_start();  
*
11A1:  BSF    55.4
11A2:  MOVF   55,W
11A3:  BSF    03.5
11A4:  MOVWF  07
11A5:  MOVLW  04
11A6:  MOVWF  77
11A7:  BCF    03.5
11A8:  DECFSZ 77,F
11A9:  GOTO   1A8
11AA:  BSF    55.3
11AB:  MOVF   55,W
11AC:  BSF    03.5
11AD:  MOVWF  07
11AE:  MOVLW  03
11AF:  MOVWF  77
11B0:  BCF    03.5
11B1:  DECFSZ 77,F
11B2:  GOTO   1B1
11B3:  BTFSS  07.3
11B4:  GOTO   1B3
11B5:  BCF    07.4
11B6:  BCF    55.4
11B7:  MOVF   55,W
11B8:  BSF    03.5
11B9:  MOVWF  07
11BA:  MOVLW  04
11BB:  MOVWF  77
11BC:  BCF    03.5
11BD:  DECFSZ 77,F
11BE:  GOTO   1BD
11BF:  BCF    07.3
11C0:  BCF    55.3
11C1:  MOVF   55,W
11C2:  BSF    03.5
11C3:  MOVWF  07
*
141F:  BSF    55.4
1420:  MOVF   55,W
1421:  BSF    03.5
1422:  MOVWF  07
1423:  MOVLW  04
1424:  MOVWF  77
1425:  BCF    03.5
1426:  DECFSZ 77,F
1427:  GOTO   426
1428:  BSF    55.3
1429:  MOVF   55,W
142A:  BSF    03.5
142B:  MOVWF  07
142C:  MOVLW  03
142D:  MOVWF  77
142E:  BCF    03.5
142F:  DECFSZ 77,F
1430:  GOTO   42F
1431:  BTFSS  07.3
1432:  GOTO   431
1433:  BCF    07.4
1434:  BCF    55.4
1435:  MOVF   55,W
1436:  BSF    03.5
1437:  MOVWF  07
1438:  MOVLW  04
1439:  MOVWF  77
143A:  BCF    03.5
143B:  DECFSZ 77,F
143C:  GOTO   43B
143D:  BCF    07.3
143E:  BCF    55.3
143F:  MOVF   55,W
1440:  BSF    03.5
1441:  MOVWF  07
....................   i2c_write(0xD1);            // change to read 
*
11C4:  MOVLW  D1
11C5:  BCF    03.5
11C6:  MOVWF  5E
11C7:  BCF    0A.4
11C8:  CALL   3D2
11C9:  BSF    0A.4
*
1442:  MOVLW  D1
1443:  BCF    03.5
1444:  MOVWF  5E
1445:  BCF    0A.4
1446:  CALL   3D2
1447:  BSF    0A.4
....................   dow  = bcd2bin(i2c_read(1) & 0x07);   // REG 3 - date of week  
*
11CA:  MOVLW  01
11CB:  MOVWF  77
11CC:  BCF    0A.4
11CD:  CALL   42E
11CE:  BSF    0A.4
11CF:  MOVF   78,W
11D0:  ANDLW  07
11D1:  MOVWF  56
11D2:  MOVWF  5B
11D3:  BCF    0A.4
11D4:  CALL   58C
11D5:  BSF    0A.4
11D6:  MOVF   78,W
11D7:  MOVWF  3A
*
1448:  MOVLW  01
1449:  MOVWF  77
144A:  BCF    0A.4
144B:  CALL   42E
144C:  BSF    0A.4
144D:  MOVF   78,W
144E:  ANDLW  07
144F:  MOVWF  56
1450:  MOVWF  5B
1451:  BCF    0A.4
1452:  CALL   58C
1453:  BSF    0A.4
1454:  MOVF   78,W
1455:  MOVWF  3A
....................   day  = bcd2bin(i2c_read(1) & 0x3f);   // REG 4 - day of month 
*
11D8:  MOVLW  01
11D9:  MOVWF  77
11DA:  BCF    0A.4
11DB:  CALL   42E
11DC:  BSF    0A.4
11DD:  MOVF   78,W
11DE:  ANDLW  3F
11DF:  MOVWF  56
11E0:  MOVWF  5B
11E1:  BCF    0A.4
11E2:  CALL   58C
11E3:  BSF    0A.4
11E4:  MOVF   78,W
11E5:  MOVWF  37
*
1456:  MOVLW  01
1457:  MOVWF  77
1458:  BCF    0A.4
1459:  CALL   42E
145A:  BSF    0A.4
145B:  MOVF   78,W
145C:  ANDLW  3F
145D:  MOVWF  56
145E:  MOVWF  5B
145F:  BCF    0A.4
1460:  CALL   58C
1461:  BSF    0A.4
1462:  MOVF   78,W
1463:  MOVWF  37
....................   mth  = bcd2bin(i2c_read(1) & 0x1f);   // REG 5 - month 
*
11E6:  MOVLW  01
11E7:  MOVWF  77
11E8:  BCF    0A.4
11E9:  CALL   42E
11EA:  BSF    0A.4
11EB:  MOVF   78,W
11EC:  ANDLW  1F
11ED:  MOVWF  56
11EE:  MOVWF  5B
11EF:  BCF    0A.4
11F0:  CALL   58C
11F1:  BSF    0A.4
11F2:  MOVF   78,W
11F3:  MOVWF  38
*
1464:  MOVLW  01
1465:  MOVWF  77
1466:  BCF    0A.4
1467:  CALL   42E
1468:  BSF    0A.4
1469:  MOVF   78,W
146A:  ANDLW  1F
146B:  MOVWF  56
146C:  MOVWF  5B
146D:  BCF    0A.4
146E:  CALL   58C
146F:  BSF    0A.4
1470:  MOVF   78,W
1471:  MOVWF  38
....................   year = bcd2bin(i2c_read(0));          // REG 6 - year 
*
11F4:  CLRF   77
11F5:  BCF    0A.4
11F6:  CALL   42E
11F7:  BSF    0A.4
11F8:  MOVF   78,W
11F9:  MOVWF  56
11FA:  MOVWF  5B
11FB:  BCF    0A.4
11FC:  CALL   58C
11FD:  BSF    0A.4
11FE:  MOVF   78,W
11FF:  MOVWF  39
*
1472:  CLRF   77
1473:  BCF    0A.4
1474:  CALL   42E
1475:  BSF    0A.4
1476:  MOVF   78,W
1477:  MOVWF  56
1478:  MOVWF  5B
1479:  BCF    0A.4
147A:  CALL   58C
147B:  BSF    0A.4
147C:  MOVF   78,W
147D:  MOVWF  39
....................   i2c_stop();  
*
1200:  BCF    55.4
1201:  MOVF   55,W
1202:  BSF    03.5
1203:  MOVWF  07
1204:  NOP
1205:  BCF    03.5
1206:  BSF    55.3
1207:  MOVF   55,W
1208:  BSF    03.5
1209:  MOVWF  07
120A:  BCF    03.5
120B:  BTFSS  07.3
120C:  GOTO   20B
120D:  MOVLW  04
120E:  MOVWF  77
120F:  DECFSZ 77,F
1210:  GOTO   20F
1211:  GOTO   212
1212:  NOP
1213:  BSF    55.4
1214:  MOVF   55,W
1215:  BSF    03.5
1216:  MOVWF  07
1217:  MOVLW  04
1218:  MOVWF  77
1219:  BCF    03.5
121A:  DECFSZ 77,F
121B:  GOTO   21A
*
147E:  BCF    55.4
147F:  MOVF   55,W
1480:  BSF    03.5
1481:  MOVWF  07
1482:  NOP
1483:  BCF    03.5
1484:  BSF    55.3
1485:  MOVF   55,W
1486:  BSF    03.5
1487:  MOVWF  07
1488:  BCF    03.5
1489:  BTFSS  07.3
148A:  GOTO   489
148B:  MOVLW  04
148C:  MOVWF  77
148D:  DECFSZ 77,F
148E:  GOTO   48D
148F:  GOTO   490
1490:  NOP
1491:  BSF    55.4
1492:  MOVF   55,W
1493:  BSF    03.5
1494:  MOVWF  07
1495:  MOVLW  04
1496:  MOVWF  77
1497:  BCF    03.5
1498:  DECFSZ 77,F
1499:  GOTO   498
.................... }  
....................  
.................... void ds1307_get_time(int8 &hr, int8 &min, int8 &sec)  
.................... {  
....................   i2c_start();  
*
10DC:  BSF    55.4
10DD:  MOVF   55,W
10DE:  BSF    03.5
10DF:  MOVWF  07
10E0:  MOVLW  04
10E1:  MOVWF  77
10E2:  BCF    03.5
10E3:  DECFSZ 77,F
10E4:  GOTO   0E3
10E5:  BSF    55.3
10E6:  MOVF   55,W
10E7:  BSF    03.5
10E8:  MOVWF  07
10E9:  MOVLW  03
10EA:  MOVWF  77
10EB:  BCF    03.5
10EC:  DECFSZ 77,F
10ED:  GOTO   0EC
10EE:  BCF    07.4
10EF:  BCF    55.4
10F0:  MOVF   55,W
10F1:  BSF    03.5
10F2:  MOVWF  07
10F3:  MOVLW  04
10F4:  MOVWF  77
10F5:  BCF    03.5
10F6:  DECFSZ 77,F
10F7:  GOTO   0F6
10F8:  BCF    07.3
10F9:  BCF    55.3
10FA:  MOVF   55,W
10FB:  BSF    03.5
10FC:  MOVWF  07
*
135A:  BSF    55.4
135B:  MOVF   55,W
135C:  BSF    03.5
135D:  MOVWF  07
135E:  MOVLW  04
135F:  MOVWF  77
1360:  BCF    03.5
1361:  DECFSZ 77,F
1362:  GOTO   361
1363:  BSF    55.3
1364:  MOVF   55,W
1365:  BSF    03.5
1366:  MOVWF  07
1367:  MOVLW  03
1368:  MOVWF  77
1369:  BCF    03.5
136A:  DECFSZ 77,F
136B:  GOTO   36A
136C:  BCF    07.4
136D:  BCF    55.4
136E:  MOVF   55,W
136F:  BSF    03.5
1370:  MOVWF  07
1371:  MOVLW  04
1372:  MOVWF  77
1373:  BCF    03.5
1374:  DECFSZ 77,F
1375:  GOTO   374
1376:  BCF    07.3
1377:  BCF    55.3
1378:  MOVF   55,W
1379:  BSF    03.5
137A:  MOVWF  07
*
14C2:  BSF    55.4
14C3:  MOVF   55,W
14C4:  BSF    03.5
14C5:  MOVWF  07
14C6:  MOVLW  04
14C7:  MOVWF  77
14C8:  BCF    03.5
14C9:  DECFSZ 77,F
14CA:  GOTO   4C9
14CB:  BSF    55.3
14CC:  MOVF   55,W
14CD:  BSF    03.5
14CE:  MOVWF  07
14CF:  MOVLW  03
14D0:  MOVWF  77
14D1:  BCF    03.5
14D2:  DECFSZ 77,F
14D3:  GOTO   4D2
14D4:  BCF    07.4
14D5:  BCF    55.4
14D6:  MOVF   55,W
14D7:  BSF    03.5
14D8:  MOVWF  07
14D9:  MOVLW  04
14DA:  MOVWF  77
14DB:  BCF    03.5
14DC:  DECFSZ 77,F
14DD:  GOTO   4DC
14DE:  BCF    07.3
14DF:  BCF    55.3
14E0:  MOVF   55,W
14E1:  BSF    03.5
14E2:  MOVWF  07
....................   i2c_write(0xD0);  
*
10FD:  MOVLW  D0
10FE:  BCF    03.5
10FF:  MOVWF  5E
1100:  BCF    0A.4
1101:  CALL   3D2
1102:  BSF    0A.4
*
137B:  MOVLW  D0
137C:  BCF    03.5
137D:  MOVWF  5E
137E:  BCF    0A.4
137F:  CALL   3D2
1380:  BSF    0A.4
*
14E3:  MOVLW  D0
14E4:  BCF    03.5
14E5:  MOVWF  5E
14E6:  BCF    0A.4
14E7:  CALL   3D2
14E8:  BSF    0A.4
....................   i2c_write(0x00);                    // Start at REG 0 
*
1103:  CLRF   5E
1104:  BCF    0A.4
1105:  CALL   3D2
1106:  BSF    0A.4
*
1381:  CLRF   5E
1382:  BCF    0A.4
1383:  CALL   3D2
1384:  BSF    0A.4
*
14E9:  CLRF   5E
14EA:  BCF    0A.4
14EB:  CALL   3D2
14EC:  BSF    0A.4
....................   i2c_start();  
*
1107:  BSF    55.4
1108:  MOVF   55,W
1109:  BSF    03.5
110A:  MOVWF  07
110B:  MOVLW  04
110C:  MOVWF  77
110D:  BCF    03.5
110E:  DECFSZ 77,F
110F:  GOTO   10E
1110:  BSF    55.3
1111:  MOVF   55,W
1112:  BSF    03.5
1113:  MOVWF  07
1114:  MOVLW  03
1115:  MOVWF  77
1116:  BCF    03.5
1117:  DECFSZ 77,F
1118:  GOTO   117
1119:  BTFSS  07.3
111A:  GOTO   119
111B:  BCF    07.4
111C:  BCF    55.4
111D:  MOVF   55,W
111E:  BSF    03.5
111F:  MOVWF  07
1120:  MOVLW  04
1121:  MOVWF  77
1122:  BCF    03.5
1123:  DECFSZ 77,F
1124:  GOTO   123
1125:  BCF    07.3
1126:  BCF    55.3
1127:  MOVF   55,W
1128:  BSF    03.5
1129:  MOVWF  07
*
1385:  BSF    55.4
1386:  MOVF   55,W
1387:  BSF    03.5
1388:  MOVWF  07
1389:  MOVLW  04
138A:  MOVWF  77
138B:  BCF    03.5
138C:  DECFSZ 77,F
138D:  GOTO   38C
138E:  BSF    55.3
138F:  MOVF   55,W
1390:  BSF    03.5
1391:  MOVWF  07
1392:  MOVLW  03
1393:  MOVWF  77
1394:  BCF    03.5
1395:  DECFSZ 77,F
1396:  GOTO   395
1397:  BTFSS  07.3
1398:  GOTO   397
1399:  BCF    07.4
139A:  BCF    55.4
139B:  MOVF   55,W
139C:  BSF    03.5
139D:  MOVWF  07
139E:  MOVLW  04
139F:  MOVWF  77
13A0:  BCF    03.5
13A1:  DECFSZ 77,F
13A2:  GOTO   3A1
13A3:  BCF    07.3
13A4:  BCF    55.3
13A5:  MOVF   55,W
13A6:  BSF    03.5
13A7:  MOVWF  07
*
14ED:  BSF    55.4
14EE:  MOVF   55,W
14EF:  BSF    03.5
14F0:  MOVWF  07
14F1:  MOVLW  04
14F2:  MOVWF  77
14F3:  BCF    03.5
14F4:  DECFSZ 77,F
14F5:  GOTO   4F4
14F6:  BSF    55.3
14F7:  MOVF   55,W
14F8:  BSF    03.5
14F9:  MOVWF  07
14FA:  MOVLW  03
14FB:  MOVWF  77
14FC:  BCF    03.5
14FD:  DECFSZ 77,F
14FE:  GOTO   4FD
14FF:  BTFSS  07.3
1500:  GOTO   4FF
1501:  BCF    07.4
1502:  BCF    55.4
1503:  MOVF   55,W
1504:  BSF    03.5
1505:  MOVWF  07
1506:  MOVLW  04
1507:  MOVWF  77
1508:  BCF    03.5
1509:  DECFSZ 77,F
150A:  GOTO   509
150B:  BCF    07.3
150C:  BCF    55.3
150D:  MOVF   55,W
150E:  BSF    03.5
150F:  MOVWF  07
....................   i2c_write(0xD1);                    // read mode 
*
112A:  MOVLW  D1
112B:  BCF    03.5
112C:  MOVWF  5E
112D:  BCF    0A.4
112E:  CALL   3D2
112F:  BSF    0A.4
*
13A8:  MOVLW  D1
13A9:  BCF    03.5
13AA:  MOVWF  5E
13AB:  BCF    0A.4
13AC:  CALL   3D2
13AD:  BSF    0A.4
*
1510:  MOVLW  D1
1511:  BCF    03.5
1512:  MOVWF  5E
1513:  BCF    0A.4
1514:  CALL   3D2
1515:  BSF    0A.4
....................   sec = bcd2bin(i2c_read(1) & 0x7f);  // REG 0 - seconds, exclude CH bit 
*
1130:  MOVLW  01
1131:  MOVWF  77
1132:  BCF    0A.4
1133:  CALL   42E
1134:  BSF    0A.4
1135:  MOVF   78,W
1136:  ANDLW  7F
1137:  MOVWF  56
1138:  MOVWF  5B
1139:  BCF    0A.4
113A:  CALL   58C
113B:  BSF    0A.4
113C:  MOVF   78,W
113D:  MOVWF  3D
*
13AE:  MOVLW  01
13AF:  MOVWF  77
13B0:  BCF    0A.4
13B1:  CALL   42E
13B2:  BSF    0A.4
13B3:  MOVF   78,W
13B4:  ANDLW  7F
13B5:  MOVWF  56
13B6:  MOVWF  5B
13B7:  BCF    0A.4
13B8:  CALL   58C
13B9:  BSF    0A.4
13BA:  MOVF   78,W
13BB:  MOVWF  3D
*
1516:  MOVLW  01
1517:  MOVWF  77
1518:  BCF    0A.4
1519:  CALL   42E
151A:  BSF    0A.4
151B:  MOVF   78,W
151C:  ANDLW  7F
151D:  MOVWF  56
151E:  MOVWF  5B
151F:  BCF    0A.4
1520:  CALL   58C
1521:  BSF    0A.4
1522:  MOVF   78,W
1523:  MOVWF  3D
....................   min = bcd2bin(i2c_read(1) & 0x7f);  // REG 1 - minutes 
*
113E:  MOVLW  01
113F:  MOVWF  77
1140:  BCF    0A.4
1141:  CALL   42E
1142:  BSF    0A.4
1143:  MOVF   78,W
1144:  ANDLW  7F
1145:  MOVWF  56
1146:  MOVWF  5B
1147:  BCF    0A.4
1148:  CALL   58C
1149:  BSF    0A.4
114A:  MOVF   78,W
114B:  MOVWF  3C
*
13BC:  MOVLW  01
13BD:  MOVWF  77
13BE:  BCF    0A.4
13BF:  CALL   42E
13C0:  BSF    0A.4
13C1:  MOVF   78,W
13C2:  ANDLW  7F
13C3:  MOVWF  56
13C4:  MOVWF  5B
13C5:  BCF    0A.4
13C6:  CALL   58C
13C7:  BSF    0A.4
13C8:  MOVF   78,W
13C9:  MOVWF  3C
*
1524:  MOVLW  01
1525:  MOVWF  77
1526:  BCF    0A.4
1527:  CALL   42E
1528:  BSF    0A.4
1529:  MOVF   78,W
152A:  ANDLW  7F
152B:  MOVWF  56
152C:  MOVWF  5B
152D:  BCF    0A.4
152E:  CALL   58C
152F:  BSF    0A.4
1530:  MOVF   78,W
1531:  MOVWF  3C
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  // REG 2 - hours, 24h mode 
*
114C:  CLRF   77
114D:  BCF    0A.4
114E:  CALL   42E
114F:  BSF    0A.4
1150:  MOVF   78,W
1151:  ANDLW  3F
1152:  MOVWF  56
1153:  MOVWF  5B
1154:  BCF    0A.4
1155:  CALL   58C
1156:  BSF    0A.4
1157:  MOVF   78,W
1158:  MOVWF  3B
*
13CA:  CLRF   77
13CB:  BCF    0A.4
13CC:  CALL   42E
13CD:  BSF    0A.4
13CE:  MOVF   78,W
13CF:  ANDLW  3F
13D0:  MOVWF  56
13D1:  MOVWF  5B
13D2:  BCF    0A.4
13D3:  CALL   58C
13D4:  BSF    0A.4
13D5:  MOVF   78,W
13D6:  MOVWF  3B
*
1532:  CLRF   77
1533:  BCF    0A.4
1534:  CALL   42E
1535:  BSF    0A.4
1536:  MOVF   78,W
1537:  ANDLW  3F
1538:  MOVWF  56
1539:  MOVWF  5B
153A:  BCF    0A.4
153B:  CALL   58C
153C:  BSF    0A.4
153D:  MOVF   78,W
153E:  MOVWF  3B
....................   i2c_stop();  
*
1159:  BCF    55.4
115A:  MOVF   55,W
115B:  BSF    03.5
115C:  MOVWF  07
115D:  NOP
115E:  BCF    03.5
115F:  BSF    55.3
1160:  MOVF   55,W
1161:  BSF    03.5
1162:  MOVWF  07
1163:  BCF    03.5
1164:  BTFSS  07.3
1165:  GOTO   164
1166:  MOVLW  04
1167:  MOVWF  77
1168:  DECFSZ 77,F
1169:  GOTO   168
116A:  GOTO   16B
116B:  NOP
116C:  BSF    55.4
116D:  MOVF   55,W
116E:  BSF    03.5
116F:  MOVWF  07
1170:  MOVLW  04
1171:  MOVWF  77
1172:  BCF    03.5
1173:  DECFSZ 77,F
1174:  GOTO   173
*
13D7:  BCF    55.4
13D8:  MOVF   55,W
13D9:  BSF    03.5
13DA:  MOVWF  07
13DB:  NOP
13DC:  BCF    03.5
13DD:  BSF    55.3
13DE:  MOVF   55,W
13DF:  BSF    03.5
13E0:  MOVWF  07
13E1:  BCF    03.5
13E2:  BTFSS  07.3
13E3:  GOTO   3E2
13E4:  MOVLW  04
13E5:  MOVWF  77
13E6:  DECFSZ 77,F
13E7:  GOTO   3E6
13E8:  GOTO   3E9
13E9:  NOP
13EA:  BSF    55.4
13EB:  MOVF   55,W
13EC:  BSF    03.5
13ED:  MOVWF  07
13EE:  MOVLW  04
13EF:  MOVWF  77
13F0:  BCF    03.5
13F1:  DECFSZ 77,F
13F2:  GOTO   3F1
*
153F:  BCF    55.4
1540:  MOVF   55,W
1541:  BSF    03.5
1542:  MOVWF  07
1543:  NOP
1544:  BCF    03.5
1545:  BSF    55.3
1546:  MOVF   55,W
1547:  BSF    03.5
1548:  MOVWF  07
1549:  BCF    03.5
154A:  BTFSS  07.3
154B:  GOTO   54A
154C:  MOVLW  04
154D:  MOVWF  77
154E:  DECFSZ 77,F
154F:  GOTO   54E
1550:  GOTO   551
1551:  NOP
1552:  BSF    55.4
1553:  MOVF   55,W
1554:  BSF    03.5
1555:  MOVWF  07
1556:  MOVLW  04
1557:  MOVWF  77
1558:  BCF    03.5
1559:  DECFSZ 77,F
155A:  GOTO   559
....................  
.................... }  
....................  
.................... //convert binary to BCD value using double dabble algorithm 
.................... int8 bin2bcd(int8 bin_value)  
.................... {  
....................   int32 dabble; 
....................   int8 hyaku, juu, ichi; 
....................   int8 i; 
....................  
....................   dabble = bin_value & 0x000000FF; 
*
05DA:  MOVF   5D,W
05DB:  MOVWF  5E
05DC:  CLRF   5F
05DD:  CLRF   60
05DE:  CLRF   61
....................   for(i = 0; i < 8; i++) 
05DF:  CLRF   65
05E0:  MOVF   65,W
05E1:  SUBLW  07
05E2:  BTFSS  03.0
05E3:  GOTO   674
....................   { 
....................     hyaku = (int8)(dabble >> 16) & 0x0F; 
05E4:  MOVF   60,W
05E5:  MOVWF  77
05E6:  MOVF   61,W
05E7:  MOVWF  78
05E8:  CLRF   79
05E9:  CLRF   7A
05EA:  MOVF   77,W
05EB:  ANDLW  0F
05EC:  MOVWF  62
....................     juu   = (int8)(dabble >> 12) & 0x0F; 
05ED:  CLRF   7A
05EE:  RRF    61,W
05EF:  MOVWF  79
05F0:  RRF    60,W
05F1:  MOVWF  78
05F2:  RRF    5F,W
05F3:  MOVWF  77
05F4:  RRF    79,F
05F5:  RRF    78,F
05F6:  RRF    77,F
05F7:  RRF    79,F
05F8:  RRF    78,F
05F9:  RRF    77,F
05FA:  RRF    79,F
05FB:  RRF    78,F
05FC:  RRF    77,F
05FD:  MOVLW  0F
05FE:  ANDWF  79,F
05FF:  MOVF   77,W
0600:  ANDLW  0F
0601:  MOVWF  63
....................     ichi  = (int8)(dabble >> 8)  & 0x0F; 
0602:  MOVF   5F,W
0603:  MOVWF  77
0604:  MOVF   60,W
0605:  MOVWF  78
0606:  MOVF   61,W
0607:  MOVWF  79
0608:  CLRF   7A
0609:  MOVF   77,W
060A:  ANDLW  0F
060B:  MOVWF  64
....................     if(hyaku >= 5) hyaku += 3; 
060C:  MOVF   62,W
060D:  SUBLW  04
060E:  BTFSC  03.0
060F:  GOTO   612
0610:  MOVLW  03
0611:  ADDWF  62,F
....................     if(juu   >= 5) juu   += 3; 
0612:  MOVF   63,W
0613:  SUBLW  04
0614:  BTFSC  03.0
0615:  GOTO   618
0616:  MOVLW  03
0617:  ADDWF  63,F
....................     if(ichi  >= 5) ichi  += 3; 
0618:  MOVF   64,W
0619:  SUBLW  04
061A:  BTFSC  03.0
061B:  GOTO   61E
061C:  MOVLW  03
061D:  ADDWF  64,F
....................     dabble = ((int32)hyaku << 16) | ((int32)juu << 12) | ((int32)ichi << 8) | (dabble & 0x000000FF); 
061E:  CLRF   69
061F:  CLRF   68
0620:  CLRF   67
0621:  MOVF   62,W
0622:  MOVWF  66
0623:  MOVF   67,W
0624:  MOVWF  69
0625:  MOVF   66,W
0626:  MOVWF  68
0627:  CLRF   66
0628:  CLRF   67
0629:  CLRF   6E
062A:  CLRF   6D
062B:  CLRF   6C
062C:  MOVF   63,W
062D:  MOVWF  6B
062E:  CLRF   77
062F:  RLF    6B,W
0630:  MOVWF  78
0631:  RLF    6C,W
0632:  MOVWF  79
0633:  RLF    6D,W
0634:  MOVWF  7A
0635:  RLF    78,F
0636:  RLF    79,F
0637:  RLF    7A,F
0638:  RLF    78,F
0639:  RLF    79,F
063A:  RLF    7A,F
063B:  RLF    78,F
063C:  RLF    79,F
063D:  RLF    7A,F
063E:  MOVLW  F0
063F:  ANDWF  78,F
0640:  MOVF   77,W
0641:  IORWF  66,F
0642:  MOVF   78,W
0643:  IORWF  67,F
0644:  MOVF   79,W
0645:  IORWF  68,F
0646:  MOVF   7A,W
0647:  IORWF  69,F
0648:  CLRF   6E
0649:  CLRF   6D
064A:  CLRF   6C
064B:  MOVF   64,W
064C:  MOVWF  6B
064D:  MOVF   6D,W
064E:  MOVWF  7A
064F:  MOVF   6C,W
0650:  MOVWF  79
0651:  MOVF   6B,W
0652:  MOVWF  78
0653:  CLRF   77
0654:  MOVF   77,W
0655:  IORWF  66,F
0656:  MOVF   78,W
0657:  IORWF  67,F
0658:  MOVF   79,W
0659:  IORWF  68,F
065A:  MOVF   7A,W
065B:  IORWF  69,F
065C:  MOVF   5E,W
065D:  MOVWF  77
065E:  CLRF   78
065F:  CLRF   79
0660:  CLRF   7A
0661:  MOVF   77,W
0662:  IORWF  66,W
0663:  MOVWF  5E
0664:  MOVF   78,W
0665:  IORWF  67,W
0666:  MOVWF  5F
0667:  MOVF   79,W
0668:  IORWF  68,W
0669:  MOVWF  60
066A:  MOVF   7A,W
066B:  IORWF  69,W
066C:  MOVWF  61
....................     dabble <<= 1; 
066D:  BCF    03.0
066E:  RLF    5E,F
066F:  RLF    5F,F
0670:  RLF    60,F
0671:  RLF    61,F
0672:  INCF   65,F
0673:  GOTO   5E0
....................   } 
....................   juu   = (int8)(dabble >> 12) & 0x0F; 
0674:  CLRF   7A
0675:  RRF    61,W
0676:  MOVWF  79
0677:  RRF    60,W
0678:  MOVWF  78
0679:  RRF    5F,W
067A:  MOVWF  77
067B:  RRF    79,F
067C:  RRF    78,F
067D:  RRF    77,F
067E:  RRF    79,F
067F:  RRF    78,F
0680:  RRF    77,F
0681:  RRF    79,F
0682:  RRF    78,F
0683:  RRF    77,F
0684:  MOVLW  0F
0685:  ANDWF  79,F
0686:  MOVF   77,W
0687:  ANDLW  0F
0688:  MOVWF  63
....................   ichi  = (int8)(dabble >> 8)  & 0x0F; 
0689:  MOVF   5F,W
068A:  MOVWF  77
068B:  MOVF   60,W
068C:  MOVWF  78
068D:  MOVF   61,W
068E:  MOVWF  79
068F:  CLRF   7A
0690:  MOVF   77,W
0691:  ANDLW  0F
0692:  MOVWF  64
....................   return((juu << 4) | (ichi & 0x0F));  
0693:  SWAPF  63,W
0694:  MOVWF  66
0695:  MOVLW  F0
0696:  ANDWF  66,F
0697:  MOVF   64,W
0698:  ANDLW  0F
0699:  IORWF  66,W
069A:  MOVWF  78
069B:  RETURN
.................... }  
....................  
....................  
.................... // BCD range 00 - 99 
.................... int8 bcd2bin(int8 bcd_value)  
.................... {  
....................   int8 temp; 
....................   temp = bcd_value; 
*
058C:  MOVF   5B,W
058D:  MOVWF  5C
....................   temp &= 0xF0; //get high nibble which store tens value 
058E:  MOVLW  F0
058F:  ANDWF  5C,F
....................   return((temp >> 1) + (temp >> 3) + (bcd_value & 0x0F)); //(tens * 8) + (tens * 2) + ones 
0590:  BCF    03.0
0591:  RRF    5C,W
0592:  MOVWF  5D
0593:  RRF    5C,W
0594:  MOVWF  77
0595:  RRF    77,F
0596:  RRF    77,F
0597:  MOVLW  1F
0598:  ANDWF  77,F
0599:  MOVF   77,W
059A:  ADDWF  5D,F
059B:  MOVF   5B,W
059C:  ANDLW  0F
059D:  ADDWF  5D,W
059E:  MOVWF  78
059F:  RETURN
.................... }  
....................  
.................... #include "data.c" 
.................... //===========================================================================|| 
.................... //   pLED - Capstone Project                                                 || 
.................... //   FPT University - Spring 2014                                            || 
.................... //                                                                           || 
.................... // 		Function for fetching the data to rgb_bits structure                || 
.................... //                                                                           || 
.................... //   Last edited: 13 - April - 2014                                          || 
.................... //                                                                           || 
.................... //   void fetch_data() - depend on chosen mode, the board position and timing|| 
.................... //                       fetch appropriate data to rgb_bits structure        || 
.................... //																									  || 
.................... //   There are four modes:                                                   || 
.................... //					- MODE_A: data for analog clock                               || 
.................... //					- MODE_B: data for digital clock                              || 
.................... //					- MODE_C: data for an image, FPT logo                         || 
.................... //					- MODE_D: data for running letters, pLED                      || 
.................... //																									  || 
.................... //===========================================================================|| 
....................  
.................... void fetch_data() 
.................... { 
.................... 	if(mode == MODE_A) // display analog clock 
*
0800:  MOVF   35,W
0801:  SUBLW  02
0802:  BTFSS  03.2
0803:  GOTO   04E
.................... 	{ 
.................... 		// the section_count vary from 1-60 and need to adjust to 0-59 value of minute and second 
.................... 		int8 pos = section_count; 
0804:  MOVF   2F,W
0805:  MOVWF  56
.................... 		if (section_count == 60)	pos = 0; 
0806:  MOVF   2F,W
0807:  SUBLW  3C
0808:  BTFSS  03.2
0809:  GOTO   00B
080A:  CLRF   56
.................... 		// set default value for normal section 
.................... 		rgb_bits.blue =  0x0001; 
080B:  CLRF   50
080C:  MOVLW  01
080D:  MOVWF  4F
.................... 		rgb_bits.red =   0x0001; 
080E:  CLRF   52
080F:  MOVLW  01
0810:  MOVWF  51
.................... 		rgb_bits.green = 0x0001; 
0811:  CLRF   54
0812:  MOVLW  01
0813:  MOVWF  53
.................... 		// leds' value for hour mark on analog clock 
.................... 		if((section_count % 5) == 0) 
0814:  MOVF   2F,W
0815:  MOVWF  5A
0816:  MOVLW  05
0817:  MOVWF  5B
0818:  BCF    0A.3
0819:  CALL   5A0
081A:  BSF    0A.3
081B:  MOVF   77,F
081C:  BTFSS  03.2
081D:  GOTO   027
.................... 		{ 
.................... 			rgb_bits.blue =  0x0003; 
081E:  CLRF   50
081F:  MOVLW  03
0820:  MOVWF  4F
.................... 			rgb_bits.red =   0x0003; 
0821:  CLRF   52
0822:  MOVLW  03
0823:  MOVWF  51
.................... 			rgb_bits.green = 0x0003; 
0824:  CLRF   54
0825:  MOVLW  03
0826:  MOVWF  53
.................... 		} 
.................... 		// leds' value at 3-6-9-12 hour 
.................... 		if((section_count % 15) == 0) 
0827:  MOVF   2F,W
0828:  MOVWF  5A
0829:  MOVLW  0F
082A:  MOVWF  5B
082B:  BCF    0A.3
082C:  CALL   5A0
082D:  BSF    0A.3
082E:  MOVF   77,F
082F:  BTFSS  03.2
0830:  GOTO   037
.................... 		{ 
.................... 			rgb_bits.blue =  0x007; 
0831:  CLRF   50
0832:  MOVLW  07
0833:  MOVWF  4F
.................... 			rgb_bits.red =   0x007; 
0834:  CLRF   52
0835:  MOVLW  07
0836:  MOVWF  51
.................... 		} 
.................... 		// hour hand's position 
.................... 		if(pos == anal_hour) 
0837:  MOVF   44,W
0838:  SUBWF  56,W
0839:  BTFSS  03.2
083A:  GOTO   03E
.................... 		{ 
.................... 			rgb_bits.blue = 0xFC00; 
083B:  MOVLW  FC
083C:  MOVWF  50
083D:  CLRF   4F
.................... 		} 
.................... 		// minute hand's position 
.................... 		if(pos == min) 
083E:  MOVF   3C,W
083F:  SUBWF  56,W
0840:  BTFSS  03.2
0841:  GOTO   045
.................... 		{ 
.................... 			rgb_bits.red = 0xFF00; 
0842:  MOVLW  FF
0843:  MOVWF  52
0844:  CLRF   51
.................... 		} 
.................... 		//second hand's position 
.................... 		if(pos == sec) 
0845:  MOVF   3D,W
0846:  SUBWF  56,W
0847:  BTFSS  03.2
0848:  GOTO   04D
.................... 		{ 
.................... 			rgb_bits.green = 0xFFF1; 
0849:  MOVLW  FF
084A:  MOVWF  54
084B:  MOVLW  F1
084C:  MOVWF  53
.................... 		} 
.................... 	} 
084D:  GOTO   45C
.................... 	else if(mode == MODE_C) // display an image - FPT logo 
084E:  MOVF   35,W
084F:  SUBLW  04
0850:  BTFSS  03.2
0851:  GOTO   0AF
.................... 	{ 
.................... 		//the image data, which store information for entire circle, is an array 
.................... 		if (section_count == 16) 
0852:  MOVF   2F,W
0853:  SUBLW  10
0854:  BTFSS  03.2
0855:  GOTO   057
.................... 		{ 
.................... 		  section_count--; 
0856:  DECF   2F,F
.................... 		} 
.................... 		rgb_bits.blue = fpt[section_count * 3 - 3]; 
0857:  MOVF   2F,W
0858:  MOVWF  5A
0859:  MOVLW  03
085A:  MOVWF  5B
085B:  BCF    0A.3
085C:  CALL   5B5
085D:  BSF    0A.3
085E:  MOVLW  03
085F:  SUBWF  78,W
0860:  CLRF   7A
0861:  MOVWF  79
0862:  BCF    03.0
0863:  RLF    79,F
0864:  RLF    7A,F
0865:  MOVF   79,W
0866:  MOVWF  5A
0867:  BCF    0A.3
0868:  CALL   0DC
0869:  BSF    0A.3
086A:  MOVWF  77
086B:  INCF   5A,W
086C:  BCF    0A.3
086D:  CALL   0DC
086E:  BSF    0A.3
086F:  MOVWF  7A
0870:  MOVF   77,W
0871:  MOVWF  4F
0872:  MOVF   7A,W
0873:  MOVWF  50
.................... 		rgb_bits.red = fpt[section_count * 3 - 2]; 
0874:  MOVF   2F,W
0875:  MOVWF  5A
0876:  MOVLW  03
0877:  MOVWF  5B
0878:  BCF    0A.3
0879:  CALL   5B5
087A:  BSF    0A.3
087B:  MOVLW  02
087C:  SUBWF  78,W
087D:  CLRF   7A
087E:  MOVWF  79
087F:  BCF    03.0
0880:  RLF    79,F
0881:  RLF    7A,F
0882:  MOVF   79,W
0883:  MOVWF  5A
0884:  BCF    0A.3
0885:  CALL   0DC
0886:  BSF    0A.3
0887:  MOVWF  77
0888:  INCF   5A,W
0889:  BCF    0A.3
088A:  CALL   0DC
088B:  BSF    0A.3
088C:  MOVWF  7A
088D:  MOVF   77,W
088E:  MOVWF  51
088F:  MOVF   7A,W
0890:  MOVWF  52
.................... 		rgb_bits.green = fpt[section_count * 3 - 1]; 
0891:  MOVF   2F,W
0892:  MOVWF  5A
0893:  MOVLW  03
0894:  MOVWF  5B
0895:  BCF    0A.3
0896:  CALL   5B5
0897:  BSF    0A.3
0898:  MOVLW  01
0899:  SUBWF  78,W
089A:  CLRF   7A
089B:  MOVWF  79
089C:  BCF    03.0
089D:  RLF    79,F
089E:  RLF    7A,F
089F:  MOVF   79,W
08A0:  MOVWF  5A
08A1:  BCF    0A.3
08A2:  CALL   0DC
08A3:  BSF    0A.3
08A4:  MOVWF  77
08A5:  INCF   5A,W
08A6:  BCF    0A.3
08A7:  CALL   0DC
08A8:  BSF    0A.3
08A9:  MOVWF  7A
08AA:  MOVF   77,W
08AB:  MOVWF  53
08AC:  MOVF   7A,W
08AD:  MOVWF  54
.................... 	} 
08AE:  GOTO   45C
.................... 	else if(mode == MODE_B) // display digital clock with format hour-minute, day-month 
08AF:  MOVF   35,W
08B0:  SUBLW  03
08B1:  BTFSS  03.2
08B2:  GOTO   34E
.................... 	{ 
.................... 		rgb_bits.red = 0x8000; 
08B3:  MOVLW  80
08B4:  MOVWF  52
08B5:  CLRF   51
.................... 		switch (section_count) 
08B6:  MOVF   2F,W
08B7:  XORLW  34
08B8:  BTFSC  03.2
08B9:  GOTO   10C
08BA:  XORLW  01
08BB:  BTFSC  03.2
08BC:  GOTO   122
08BD:  XORLW  03
08BE:  BTFSC  03.2
08BF:  GOTO   139
08C0:  XORLW  0E
08C1:  BTFSC  03.2
08C2:  GOTO   150
08C3:  XORLW  01
08C4:  BTFSC  03.2
08C5:  GOTO   166
08C6:  XORLW  03
08C7:  BTFSC  03.2
08C8:  GOTO   17D
08C9:  XORLW  38
08CA:  BTFSC  03.2
08CB:  GOTO   194
08CC:  XORLW  01
08CD:  BTFSC  03.2
08CE:  GOTO   1AA
08CF:  XORLW  07
08D0:  BTFSC  03.2
08D1:  GOTO   1C1
08D2:  XORLW  02
08D3:  BTFSC  03.2
08D4:  GOTO   1D8
08D5:  XORLW  01
08D6:  BTFSC  03.2
08D7:  GOTO   1EE
08D8:  XORLW  0F
08D9:  BTFSC  03.2
08DA:  GOTO   205
08DB:  XORLW  34
08DC:  BTFSC  03.2
08DD:  GOTO   21C
08DE:  XORLW  1B
08DF:  BTFSC  03.2
08E0:  GOTO   22C
08E1:  XORLW  01
08E2:  BTFSC  03.2
08E3:  GOTO   243
08E4:  XORLW  03
08E5:  BTFSC  03.2
08E6:  GOTO   25A
08E7:  XORLW  06
08E8:  BTFSC  03.2
08E9:  GOTO   270
08EA:  XORLW  01
08EB:  BTFSC  03.2
08EC:  GOTO   287
08ED:  XORLW  03
08EE:  BTFSC  03.2
08EF:  GOTO   29E
08F0:  XORLW  3A
08F1:  BTFSC  03.2
08F2:  GOTO   2B4
08F3:  XORLW  01
08F4:  BTFSC  03.2
08F5:  GOTO   2CB
08F6:  XORLW  03
08F7:  BTFSC  03.2
08F8:  GOTO   2E2
08F9:  XORLW  0E
08FA:  BTFSC  03.2
08FB:  GOTO   2F8
08FC:  XORLW  01
08FD:  BTFSC  03.2
08FE:  GOTO   30F
08FF:  XORLW  03
0900:  BTFSC  03.2
0901:  GOTO   326
0902:  XORLW  08
0903:  BTFSC  03.2
0904:  GOTO   33C
0905:  XORLW  03
0906:  BTFSC  03.2
0907:  GOTO   340
0908:  XORLW  01
0909:  BTFSC  03.2
090A:  GOTO   344
090B:  GOTO   348
.................... 		{ 
.................... 			//section 52-54: display the ten of hour 
.................... 			case 52: 
.................... 				rgb_bits.green = number_upper[hour_h][0]; 
090C:  MOVF   40,W
090D:  MOVWF  5A
090E:  MOVLW  06
090F:  MOVWF  5B
0910:  BCF    0A.3
0911:  CALL   5B5
0912:  BSF    0A.3
0913:  MOVF   78,W
0914:  MOVWF  5A
0915:  INCF   5A,W
0916:  BCF    0A.3
0917:  CALL   05C
0918:  BSF    0A.3
0919:  MOVWF  7A
091A:  MOVF   5A,W
091B:  BCF    0A.3
091C:  CALL   05C
091D:  BSF    0A.3
091E:  MOVWF  53
091F:  MOVF   7A,W
0920:  MOVWF  54
.................... 				break; 
0921:  GOTO   34D
.................... 			case 53: 
.................... 				rgb_bits.green = number_upper[hour_h][1]; 
0922:  MOVF   40,W
0923:  MOVWF  5A
0924:  MOVLW  06
0925:  MOVWF  5B
0926:  BCF    0A.3
0927:  CALL   5B5
0928:  BSF    0A.3
0929:  MOVLW  02
092A:  ADDWF  78,W
092B:  MOVWF  5A
092C:  INCF   5A,W
092D:  BCF    0A.3
092E:  CALL   05C
092F:  BSF    0A.3
0930:  MOVWF  7A
0931:  MOVF   5A,W
0932:  BCF    0A.3
0933:  CALL   05C
0934:  BSF    0A.3
0935:  MOVWF  53
0936:  MOVF   7A,W
0937:  MOVWF  54
.................... 				break; 
0938:  GOTO   34D
.................... 			case 54: 
.................... 				rgb_bits.green = number_upper[hour_h][2]; 
0939:  MOVF   40,W
093A:  MOVWF  5A
093B:  MOVLW  06
093C:  MOVWF  5B
093D:  BCF    0A.3
093E:  CALL   5B5
093F:  BSF    0A.3
0940:  MOVLW  04
0941:  ADDWF  78,W
0942:  MOVWF  5A
0943:  INCF   5A,W
0944:  BCF    0A.3
0945:  CALL   05C
0946:  BSF    0A.3
0947:  MOVWF  7A
0948:  MOVF   5A,W
0949:  BCF    0A.3
094A:  CALL   05C
094B:  BSF    0A.3
094C:  MOVWF  53
094D:  MOVF   7A,W
094E:  MOVWF  54
.................... 				break; 
094F:  GOTO   34D
.................... 			//section 56-58: display the unit of hour 
.................... 			case 56: 
.................... 				rgb_bits.green = number_upper[hour_l][0]; 
0950:  MOVF   41,W
0951:  MOVWF  5A
0952:  MOVLW  06
0953:  MOVWF  5B
0954:  BCF    0A.3
0955:  CALL   5B5
0956:  BSF    0A.3
0957:  MOVF   78,W
0958:  MOVWF  5A
0959:  INCF   5A,W
095A:  BCF    0A.3
095B:  CALL   05C
095C:  BSF    0A.3
095D:  MOVWF  7A
095E:  MOVF   5A,W
095F:  BCF    0A.3
0960:  CALL   05C
0961:  BSF    0A.3
0962:  MOVWF  53
0963:  MOVF   7A,W
0964:  MOVWF  54
.................... 				break; 
0965:  GOTO   34D
.................... 			case 57: 
.................... 				rgb_bits.green = number_upper[hour_l][1]; 
0966:  MOVF   41,W
0967:  MOVWF  5A
0968:  MOVLW  06
0969:  MOVWF  5B
096A:  BCF    0A.3
096B:  CALL   5B5
096C:  BSF    0A.3
096D:  MOVLW  02
096E:  ADDWF  78,W
096F:  MOVWF  5A
0970:  INCF   5A,W
0971:  BCF    0A.3
0972:  CALL   05C
0973:  BSF    0A.3
0974:  MOVWF  7A
0975:  MOVF   5A,W
0976:  BCF    0A.3
0977:  CALL   05C
0978:  BSF    0A.3
0979:  MOVWF  53
097A:  MOVF   7A,W
097B:  MOVWF  54
.................... 				break; 
097C:  GOTO   34D
.................... 			case 58: 
.................... 				rgb_bits.green = number_upper[hour_l][2]; 
097D:  MOVF   41,W
097E:  MOVWF  5A
097F:  MOVLW  06
0980:  MOVWF  5B
0981:  BCF    0A.3
0982:  CALL   5B5
0983:  BSF    0A.3
0984:  MOVLW  04
0985:  ADDWF  78,W
0986:  MOVWF  5A
0987:  INCF   5A,W
0988:  BCF    0A.3
0989:  CALL   05C
098A:  BSF    0A.3
098B:  MOVWF  7A
098C:  MOVF   5A,W
098D:  BCF    0A.3
098E:  CALL   05C
098F:  BSF    0A.3
0990:  MOVWF  53
0991:  MOVF   7A,W
0992:  MOVWF  54
.................... 				break; 
0993:  GOTO   34D
.................... 			//section 2-4: display the ten of minute 
.................... 			case 2: 
.................... 				rgb_bits.green = number_upper[min_h][0]; 
0994:  MOVF   42,W
0995:  MOVWF  5A
0996:  MOVLW  06
0997:  MOVWF  5B
0998:  BCF    0A.3
0999:  CALL   5B5
099A:  BSF    0A.3
099B:  MOVF   78,W
099C:  MOVWF  5A
099D:  INCF   5A,W
099E:  BCF    0A.3
099F:  CALL   05C
09A0:  BSF    0A.3
09A1:  MOVWF  7A
09A2:  MOVF   5A,W
09A3:  BCF    0A.3
09A4:  CALL   05C
09A5:  BSF    0A.3
09A6:  MOVWF  53
09A7:  MOVF   7A,W
09A8:  MOVWF  54
.................... 				break; 
09A9:  GOTO   34D
.................... 			case 3: 
.................... 				rgb_bits.green = number_upper[min_h][1]; 
09AA:  MOVF   42,W
09AB:  MOVWF  5A
09AC:  MOVLW  06
09AD:  MOVWF  5B
09AE:  BCF    0A.3
09AF:  CALL   5B5
09B0:  BSF    0A.3
09B1:  MOVLW  02
09B2:  ADDWF  78,W
09B3:  MOVWF  5A
09B4:  INCF   5A,W
09B5:  BCF    0A.3
09B6:  CALL   05C
09B7:  BSF    0A.3
09B8:  MOVWF  7A
09B9:  MOVF   5A,W
09BA:  BCF    0A.3
09BB:  CALL   05C
09BC:  BSF    0A.3
09BD:  MOVWF  53
09BE:  MOVF   7A,W
09BF:  MOVWF  54
.................... 				break; 
09C0:  GOTO   34D
.................... 			case 4: 
.................... 				rgb_bits.green = number_upper[min_h][2]; 
09C1:  MOVF   42,W
09C2:  MOVWF  5A
09C3:  MOVLW  06
09C4:  MOVWF  5B
09C5:  BCF    0A.3
09C6:  CALL   5B5
09C7:  BSF    0A.3
09C8:  MOVLW  04
09C9:  ADDWF  78,W
09CA:  MOVWF  5A
09CB:  INCF   5A,W
09CC:  BCF    0A.3
09CD:  CALL   05C
09CE:  BSF    0A.3
09CF:  MOVWF  7A
09D0:  MOVF   5A,W
09D1:  BCF    0A.3
09D2:  CALL   05C
09D3:  BSF    0A.3
09D4:  MOVWF  53
09D5:  MOVF   7A,W
09D6:  MOVWF  54
.................... 				break; 
09D7:  GOTO   34D
.................... 			//section 6-8: display the unit of minute 
.................... 			case 6: 
.................... 				rgb_bits.green = number_upper[min_l][0]; 
09D8:  MOVF   43,W
09D9:  MOVWF  5A
09DA:  MOVLW  06
09DB:  MOVWF  5B
09DC:  BCF    0A.3
09DD:  CALL   5B5
09DE:  BSF    0A.3
09DF:  MOVF   78,W
09E0:  MOVWF  5A
09E1:  INCF   5A,W
09E2:  BCF    0A.3
09E3:  CALL   05C
09E4:  BSF    0A.3
09E5:  MOVWF  7A
09E6:  MOVF   5A,W
09E7:  BCF    0A.3
09E8:  CALL   05C
09E9:  BSF    0A.3
09EA:  MOVWF  53
09EB:  MOVF   7A,W
09EC:  MOVWF  54
.................... 				break; 
09ED:  GOTO   34D
.................... 			case 7: 
.................... 				rgb_bits.green = number_upper[min_l][1]; 
09EE:  MOVF   43,W
09EF:  MOVWF  5A
09F0:  MOVLW  06
09F1:  MOVWF  5B
09F2:  BCF    0A.3
09F3:  CALL   5B5
09F4:  BSF    0A.3
09F5:  MOVLW  02
09F6:  ADDWF  78,W
09F7:  MOVWF  5A
09F8:  INCF   5A,W
09F9:  BCF    0A.3
09FA:  CALL   05C
09FB:  BSF    0A.3
09FC:  MOVWF  7A
09FD:  MOVF   5A,W
09FE:  BCF    0A.3
09FF:  CALL   05C
0A00:  BSF    0A.3
0A01:  MOVWF  53
0A02:  MOVF   7A,W
0A03:  MOVWF  54
.................... 				break; 
0A04:  GOTO   34D
.................... 			case 8: 
.................... 				rgb_bits.green = number_upper[min_l][2]; 
0A05:  MOVF   43,W
0A06:  MOVWF  5A
0A07:  MOVLW  06
0A08:  MOVWF  5B
0A09:  BCF    0A.3
0A0A:  CALL   5B5
0A0B:  BSF    0A.3
0A0C:  MOVLW  04
0A0D:  ADDWF  78,W
0A0E:  MOVWF  5A
0A0F:  INCF   5A,W
0A10:  BCF    0A.3
0A11:  CALL   05C
0A12:  BSF    0A.3
0A13:  MOVWF  7A
0A14:  MOVF   5A,W
0A15:  BCF    0A.3
0A16:  CALL   05C
0A17:  BSF    0A.3
0A18:  MOVWF  53
0A19:  MOVF   7A,W
0A1A:  MOVWF  54
.................... 				break; 
0A1B:  GOTO   34D
.................... 			////section 60: display the second mark, 0.5s on and 0.5s off 
.................... 			case 60: 
.................... 				if(digit_sec < 15) 
0A1C:  MOVF   3F,W
0A1D:  SUBLW  0E
0A1E:  BTFSS  03.0
0A1F:  GOTO   224
.................... 					rgb_bits.green = 0x00A0; 
0A20:  CLRF   54
0A21:  MOVLW  A0
0A22:  MOVWF  53
0A23:  GOTO   226
.................... 				else 
.................... 					rgb_bits.green = 0x0000; 
0A24:  CLRF   54
0A25:  CLRF   53
.................... 				if(digit_sec > 30) 
0A26:  MOVF   3F,W
0A27:  SUBLW  1E
0A28:  BTFSC  03.0
0A29:  GOTO   22B
.................... 					digit_sec = 0; 
0A2A:  CLRF   3F
.................... 				break; 
0A2B:  GOTO   34D
.................... 			//section 37-39: display the ten of day 
.................... 			case 39: 
.................... 				rgb_bits.blue = number_lower[day_h][2]; 
0A2C:  MOVF   45,W
0A2D:  MOVWF  5A
0A2E:  MOVLW  06
0A2F:  MOVWF  5B
0A30:  BCF    0A.3
0A31:  CALL   5B5
0A32:  BSF    0A.3
0A33:  MOVLW  04
0A34:  ADDWF  78,W
0A35:  MOVWF  5A
0A36:  INCF   5A,W
0A37:  BCF    0A.3
0A38:  CALL   09C
0A39:  BSF    0A.3
0A3A:  MOVWF  7A
0A3B:  MOVF   5A,W
0A3C:  BCF    0A.3
0A3D:  CALL   09C
0A3E:  BSF    0A.3
0A3F:  MOVWF  4F
0A40:  MOVF   7A,W
0A41:  MOVWF  50
.................... 				break; 
0A42:  GOTO   34D
.................... 			case 38: 
.................... 				rgb_bits.blue = number_lower[day_h][1]; 
0A43:  MOVF   45,W
0A44:  MOVWF  5A
0A45:  MOVLW  06
0A46:  MOVWF  5B
0A47:  BCF    0A.3
0A48:  CALL   5B5
0A49:  BSF    0A.3
0A4A:  MOVLW  02
0A4B:  ADDWF  78,W
0A4C:  MOVWF  5A
0A4D:  INCF   5A,W
0A4E:  BCF    0A.3
0A4F:  CALL   09C
0A50:  BSF    0A.3
0A51:  MOVWF  7A
0A52:  MOVF   5A,W
0A53:  BCF    0A.3
0A54:  CALL   09C
0A55:  BSF    0A.3
0A56:  MOVWF  4F
0A57:  MOVF   7A,W
0A58:  MOVWF  50
.................... 				break; 
0A59:  GOTO   34D
.................... 			case 37: 
.................... 				rgb_bits.blue = number_lower[day_h][0]; 
0A5A:  MOVF   45,W
0A5B:  MOVWF  5A
0A5C:  MOVLW  06
0A5D:  MOVWF  5B
0A5E:  BCF    0A.3
0A5F:  CALL   5B5
0A60:  BSF    0A.3
0A61:  MOVF   78,W
0A62:  MOVWF  5A
0A63:  INCF   5A,W
0A64:  BCF    0A.3
0A65:  CALL   09C
0A66:  BSF    0A.3
0A67:  MOVWF  7A
0A68:  MOVF   5A,W
0A69:  BCF    0A.3
0A6A:  CALL   09C
0A6B:  BSF    0A.3
0A6C:  MOVWF  4F
0A6D:  MOVF   7A,W
0A6E:  MOVWF  50
.................... 				break; 
0A6F:  GOTO   34D
.................... 			//section 33-35: display the unit of day 
.................... 			case 35: 
.................... 				rgb_bits.blue = number_lower[day_l][2]; 
0A70:  MOVF   46,W
0A71:  MOVWF  5A
0A72:  MOVLW  06
0A73:  MOVWF  5B
0A74:  BCF    0A.3
0A75:  CALL   5B5
0A76:  BSF    0A.3
0A77:  MOVLW  04
0A78:  ADDWF  78,W
0A79:  MOVWF  5A
0A7A:  INCF   5A,W
0A7B:  BCF    0A.3
0A7C:  CALL   09C
0A7D:  BSF    0A.3
0A7E:  MOVWF  7A
0A7F:  MOVF   5A,W
0A80:  BCF    0A.3
0A81:  CALL   09C
0A82:  BSF    0A.3
0A83:  MOVWF  4F
0A84:  MOVF   7A,W
0A85:  MOVWF  50
.................... 				break; 
0A86:  GOTO   34D
.................... 			case 34: 
.................... 				rgb_bits.blue = number_lower[day_l][1]; 
0A87:  MOVF   46,W
0A88:  MOVWF  5A
0A89:  MOVLW  06
0A8A:  MOVWF  5B
0A8B:  BCF    0A.3
0A8C:  CALL   5B5
0A8D:  BSF    0A.3
0A8E:  MOVLW  02
0A8F:  ADDWF  78,W
0A90:  MOVWF  5A
0A91:  INCF   5A,W
0A92:  BCF    0A.3
0A93:  CALL   09C
0A94:  BSF    0A.3
0A95:  MOVWF  7A
0A96:  MOVF   5A,W
0A97:  BCF    0A.3
0A98:  CALL   09C
0A99:  BSF    0A.3
0A9A:  MOVWF  4F
0A9B:  MOVF   7A,W
0A9C:  MOVWF  50
.................... 				break; 
0A9D:  GOTO   34D
.................... 			case 33: 
.................... 				rgb_bits.blue = number_lower[day_l][0]; 
0A9E:  MOVF   46,W
0A9F:  MOVWF  5A
0AA0:  MOVLW  06
0AA1:  MOVWF  5B
0AA2:  BCF    0A.3
0AA3:  CALL   5B5
0AA4:  BSF    0A.3
0AA5:  MOVF   78,W
0AA6:  MOVWF  5A
0AA7:  INCF   5A,W
0AA8:  BCF    0A.3
0AA9:  CALL   09C
0AAA:  BSF    0A.3
0AAB:  MOVWF  7A
0AAC:  MOVF   5A,W
0AAD:  BCF    0A.3
0AAE:  CALL   09C
0AAF:  BSF    0A.3
0AB0:  MOVWF  4F
0AB1:  MOVF   7A,W
0AB2:  MOVWF  50
.................... 				break; 
0AB3:  GOTO   34D
.................... 			//section 25-27: display the ten of month 
.................... 			case 27: 
.................... 				rgb_bits.blue = number_lower[month_h][2]; 
0AB4:  MOVF   47,W
0AB5:  MOVWF  5A
0AB6:  MOVLW  06
0AB7:  MOVWF  5B
0AB8:  BCF    0A.3
0AB9:  CALL   5B5
0ABA:  BSF    0A.3
0ABB:  MOVLW  04
0ABC:  ADDWF  78,W
0ABD:  MOVWF  5A
0ABE:  INCF   5A,W
0ABF:  BCF    0A.3
0AC0:  CALL   09C
0AC1:  BSF    0A.3
0AC2:  MOVWF  7A
0AC3:  MOVF   5A,W
0AC4:  BCF    0A.3
0AC5:  CALL   09C
0AC6:  BSF    0A.3
0AC7:  MOVWF  4F
0AC8:  MOVF   7A,W
0AC9:  MOVWF  50
.................... 				break; 
0ACA:  GOTO   34D
.................... 			case 26: 
.................... 				rgb_bits.blue = number_lower[month_h][1]; 
0ACB:  MOVF   47,W
0ACC:  MOVWF  5A
0ACD:  MOVLW  06
0ACE:  MOVWF  5B
0ACF:  BCF    0A.3
0AD0:  CALL   5B5
0AD1:  BSF    0A.3
0AD2:  MOVLW  02
0AD3:  ADDWF  78,W
0AD4:  MOVWF  5A
0AD5:  INCF   5A,W
0AD6:  BCF    0A.3
0AD7:  CALL   09C
0AD8:  BSF    0A.3
0AD9:  MOVWF  7A
0ADA:  MOVF   5A,W
0ADB:  BCF    0A.3
0ADC:  CALL   09C
0ADD:  BSF    0A.3
0ADE:  MOVWF  4F
0ADF:  MOVF   7A,W
0AE0:  MOVWF  50
.................... 				break; 
0AE1:  GOTO   34D
.................... 			case 25: 
.................... 				rgb_bits.blue = number_lower[month_h][0]; 
0AE2:  MOVF   47,W
0AE3:  MOVWF  5A
0AE4:  MOVLW  06
0AE5:  MOVWF  5B
0AE6:  BCF    0A.3
0AE7:  CALL   5B5
0AE8:  BSF    0A.3
0AE9:  MOVF   78,W
0AEA:  MOVWF  5A
0AEB:  INCF   5A,W
0AEC:  BCF    0A.3
0AED:  CALL   09C
0AEE:  BSF    0A.3
0AEF:  MOVWF  7A
0AF0:  MOVF   5A,W
0AF1:  BCF    0A.3
0AF2:  CALL   09C
0AF3:  BSF    0A.3
0AF4:  MOVWF  4F
0AF5:  MOVF   7A,W
0AF6:  MOVWF  50
.................... 				break; 
0AF7:  GOTO   34D
.................... 			//section 21-23: display the unit of month 
.................... 			case 23: 
.................... 				rgb_bits.blue = number_lower[month_l][2]; 
0AF8:  MOVF   48,W
0AF9:  MOVWF  5A
0AFA:  MOVLW  06
0AFB:  MOVWF  5B
0AFC:  BCF    0A.3
0AFD:  CALL   5B5
0AFE:  BSF    0A.3
0AFF:  MOVLW  04
0B00:  ADDWF  78,W
0B01:  MOVWF  5A
0B02:  INCF   5A,W
0B03:  BCF    0A.3
0B04:  CALL   09C
0B05:  BSF    0A.3
0B06:  MOVWF  7A
0B07:  MOVF   5A,W
0B08:  BCF    0A.3
0B09:  CALL   09C
0B0A:  BSF    0A.3
0B0B:  MOVWF  4F
0B0C:  MOVF   7A,W
0B0D:  MOVWF  50
.................... 				break; 
0B0E:  GOTO   34D
.................... 			case 22: 
.................... 				rgb_bits.blue = number_lower[month_l][1]; 
0B0F:  MOVF   48,W
0B10:  MOVWF  5A
0B11:  MOVLW  06
0B12:  MOVWF  5B
0B13:  BCF    0A.3
0B14:  CALL   5B5
0B15:  BSF    0A.3
0B16:  MOVLW  02
0B17:  ADDWF  78,W
0B18:  MOVWF  5A
0B19:  INCF   5A,W
0B1A:  BCF    0A.3
0B1B:  CALL   09C
0B1C:  BSF    0A.3
0B1D:  MOVWF  7A
0B1E:  MOVF   5A,W
0B1F:  BCF    0A.3
0B20:  CALL   09C
0B21:  BSF    0A.3
0B22:  MOVWF  4F
0B23:  MOVF   7A,W
0B24:  MOVWF  50
.................... 				break; 
0B25:  GOTO   34D
.................... 			case 21: 
.................... 				rgb_bits.blue = number_lower[month_l][0]; 
0B26:  MOVF   48,W
0B27:  MOVWF  5A
0B28:  MOVLW  06
0B29:  MOVWF  5B
0B2A:  BCF    0A.3
0B2B:  CALL   5B5
0B2C:  BSF    0A.3
0B2D:  MOVF   78,W
0B2E:  MOVWF  5A
0B2F:  INCF   5A,W
0B30:  BCF    0A.3
0B31:  CALL   09C
0B32:  BSF    0A.3
0B33:  MOVWF  7A
0B34:  MOVF   5A,W
0B35:  BCF    0A.3
0B36:  CALL   09C
0B37:  BSF    0A.3
0B38:  MOVWF  4F
0B39:  MOVF   7A,W
0B3A:  MOVWF  50
.................... 				break; 
0B3B:  GOTO   34D
.................... 			////section 29-31: display the hyphen 
.................... 			case 29: 
.................... 				rgb_bits.blue = 0x0040; 
0B3C:  CLRF   50
0B3D:  MOVLW  40
0B3E:  MOVWF  4F
.................... 				break; 
0B3F:  GOTO   34D
.................... 			case 30: 
.................... 				rgb_bits.blue = 0x0040; 
0B40:  CLRF   50
0B41:  MOVLW  40
0B42:  MOVWF  4F
.................... 				break; 
0B43:  GOTO   34D
.................... 			case 31: 
.................... 				rgb_bits.blue = 0x0040; 
0B44:  CLRF   50
0B45:  MOVLW  40
0B46:  MOVWF  4F
.................... 				break; 
0B47:  GOTO   34D
.................... 			default: 
.................... 				rgb_bits.green = 0x0000; 
0B48:  CLRF   54
0B49:  CLRF   53
.................... 				rgb_bits.blue = 0x0000; 
0B4A:  CLRF   50
0B4B:  CLRF   4F
.................... 				break; 
0B4C:  GOTO   34D
.................... 		} 	 
.................... 	} 
0B4D:  GOTO   45C
.................... 	else if (mode == MODE_D) // display running letters 
0B4E:  MOVF   35,W
0B4F:  SUBLW  05
0B50:  BTFSS  03.2
0B51:  GOTO   45C
.................... 	{ 	 
.................... 		rgb_bits.blue = 0x0000; 
0B52:  CLRF   50
0B53:  CLRF   4F
.................... 		rgb_bits.red = 0x0000; 
0B54:  CLRF   52
0B55:  CLRF   51
.................... 		rgb_bits.green = 0x0000; 
0B56:  CLRF   54
0B57:  CLRF   53
.................... 	  	 
.................... 		int8 pcount, ycount, year_position; 
.................... 		pcount = section_count - pled_position + 14; 
0B58:  MOVF   49,W
0B59:  SUBWF  2F,W
0B5A:  ADDLW  0E
0B5B:  MOVWF  57
.................... 		if (pled_position < 31 ) year_position = pled_position + 30; 
0B5C:  MOVF   49,W
0B5D:  SUBLW  1E
0B5E:  BTFSS  03.0
0B5F:  GOTO   364
0B60:  MOVLW  1E
0B61:  ADDWF  49,W
0B62:  MOVWF  59
0B63:  GOTO   367
.................... 		else year_position = pled_position - 30; 
0B64:  MOVLW  1E
0B65:  SUBWF  49,W
0B66:  MOVWF  59
.................... 		ycount = section_count - year_position + 14; 
0B67:  MOVF   59,W
0B68:  SUBWF  2F,W
0B69:  ADDLW  0E
0B6A:  MOVWF  58
.................... 		if (pcount >= 60) 
0B6B:  MOVF   57,W
0B6C:  SUBLW  3B
0B6D:  BTFSC  03.0
0B6E:  GOTO   371
.................... 		{ 
.................... 			pcount = pcount - 60; 
0B6F:  MOVLW  3C
0B70:  SUBWF  57,F
.................... 		} 
.................... 		if (ycount >= 60) 
0B71:  MOVF   58,W
0B72:  SUBLW  3B
0B73:  BTFSC  03.0
0B74:  GOTO   377
.................... 		{ 
.................... 			ycount = ycount - 60; 
0B75:  MOVLW  3C
0B76:  SUBWF  58,F
.................... 		} 
.................... 		if (pcount >=0 && pcount < 15) 
0B77:  MOVF   57,W
0B78:  SUBLW  0E
0B79:  BTFSS  03.0
0B7A:  GOTO   3D5
.................... 		{ 
.................... 			if(pcount > 11) rgb_bits.blue = pled_inward[pcount]; 
0B7B:  MOVF   57,W
0B7C:  SUBLW  0B
0B7D:  BTFSC  03.0
0B7E:  GOTO   38F
0B7F:  BCF    03.0
0B80:  RLF    57,W
0B81:  MOVWF  5A
0B82:  INCF   5A,W
0B83:  BCF    0A.3
0B84:  CALL   24D
0B85:  BSF    0A.3
0B86:  MOVWF  7A
0B87:  MOVF   5A,W
0B88:  BCF    0A.3
0B89:  CALL   24D
0B8A:  BSF    0A.3
0B8B:  MOVWF  4F
0B8C:  MOVF   7A,W
0B8D:  MOVWF  50
0B8E:  GOTO   3D5
.................... 			else if(pcount > 7) rgb_bits.red = pled_inward[pcount]; 
0B8F:  MOVF   57,W
0B90:  SUBLW  07
0B91:  BTFSC  03.0
0B92:  GOTO   3A3
0B93:  BCF    03.0
0B94:  RLF    57,W
0B95:  MOVWF  5A
0B96:  INCF   5A,W
0B97:  BCF    0A.3
0B98:  CALL   24D
0B99:  BSF    0A.3
0B9A:  MOVWF  7A
0B9B:  MOVF   5A,W
0B9C:  BCF    0A.3
0B9D:  CALL   24D
0B9E:  BSF    0A.3
0B9F:  MOVWF  51
0BA0:  MOVF   7A,W
0BA1:  MOVWF  52
0BA2:  GOTO   3D5
.................... 			else if(pcount > 3) rgb_bits.green = pled_inward[pcount]; 
0BA3:  MOVF   57,W
0BA4:  SUBLW  03
0BA5:  BTFSC  03.0
0BA6:  GOTO   3B7
0BA7:  BCF    03.0
0BA8:  RLF    57,W
0BA9:  MOVWF  5A
0BAA:  INCF   5A,W
0BAB:  BCF    0A.3
0BAC:  CALL   24D
0BAD:  BSF    0A.3
0BAE:  MOVWF  7A
0BAF:  MOVF   5A,W
0BB0:  BCF    0A.3
0BB1:  CALL   24D
0BB2:  BSF    0A.3
0BB3:  MOVWF  53
0BB4:  MOVF   7A,W
0BB5:  MOVWF  54
0BB6:  GOTO   3D5
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.red = pled_inward[pcount]; 
0BB7:  BCF    03.0
0BB8:  RLF    57,W
0BB9:  MOVWF  5A
0BBA:  INCF   5A,W
0BBB:  BCF    0A.3
0BBC:  CALL   24D
0BBD:  BSF    0A.3
0BBE:  MOVWF  7A
0BBF:  MOVF   5A,W
0BC0:  BCF    0A.3
0BC1:  CALL   24D
0BC2:  BSF    0A.3
0BC3:  MOVWF  51
0BC4:  MOVF   7A,W
0BC5:  MOVWF  52
.................... 				rgb_bits.green = pled_inward[pcount]; 
0BC6:  BCF    03.0
0BC7:  RLF    57,W
0BC8:  MOVWF  5A
0BC9:  INCF   5A,W
0BCA:  BCF    0A.3
0BCB:  CALL   24D
0BCC:  BSF    0A.3
0BCD:  MOVWF  7A
0BCE:  MOVF   5A,W
0BCF:  BCF    0A.3
0BD0:  CALL   24D
0BD1:  BSF    0A.3
0BD2:  MOVWF  53
0BD3:  MOVF   7A,W
0BD4:  MOVWF  54
.................... 			} 
.................... 		} 
.................... 		if (ycount >=0 && ycount < 15) 
0BD5:  MOVF   58,W
0BD6:  SUBLW  0E
0BD7:  BTFSS  03.0
0BD8:  GOTO   442
.................... 		{ 
.................... 			if(ycount > 11) rgb_bits.blue = year_2014[ycount]; 
0BD9:  MOVF   58,W
0BDA:  SUBLW  0B
0BDB:  BTFSC  03.0
0BDC:  GOTO   3ED
0BDD:  BCF    03.0
0BDE:  RLF    58,W
0BDF:  MOVWF  5A
0BE0:  INCF   5A,W
0BE1:  BCF    0A.3
0BE2:  CALL   26F
0BE3:  BSF    0A.3
0BE4:  MOVWF  7A
0BE5:  MOVF   5A,W
0BE6:  BCF    0A.3
0BE7:  CALL   26F
0BE8:  BSF    0A.3
0BE9:  MOVWF  4F
0BEA:  MOVF   7A,W
0BEB:  MOVWF  50
0BEC:  GOTO   442
.................... 			else if(ycount > 7) 
0BED:  MOVF   58,W
0BEE:  SUBLW  07
0BEF:  BTFSC  03.0
0BF0:  GOTO   410
.................... 			{ 
.................... 				rgb_bits.blue = year_2014[ycount]; 
0BF1:  BCF    03.0
0BF2:  RLF    58,W
0BF3:  MOVWF  5A
0BF4:  INCF   5A,W
0BF5:  BCF    0A.3
0BF6:  CALL   26F
0BF7:  BSF    0A.3
0BF8:  MOVWF  7A
0BF9:  MOVF   5A,W
0BFA:  BCF    0A.3
0BFB:  CALL   26F
0BFC:  BSF    0A.3
0BFD:  MOVWF  4F
0BFE:  MOVF   7A,W
0BFF:  MOVWF  50
.................... 				rgb_bits.green = year_2014[ycount]; 
0C00:  BCF    03.0
0C01:  RLF    58,W
0C02:  MOVWF  5A
0C03:  INCF   5A,W
0C04:  BCF    0A.3
0C05:  CALL   26F
0C06:  BSF    0A.3
0C07:  MOVWF  7A
0C08:  MOVF   5A,W
0C09:  BCF    0A.3
0C0A:  CALL   26F
0C0B:  BSF    0A.3
0C0C:  MOVWF  53
0C0D:  MOVF   7A,W
0C0E:  MOVWF  54
.................... 			} 
0C0F:  GOTO   442
.................... 			else if(ycount > 3) rgb_bits.blue = year_2014[ycount]; 
0C10:  MOVF   58,W
0C11:  SUBLW  03
0C12:  BTFSC  03.0
0C13:  GOTO   424
0C14:  BCF    03.0
0C15:  RLF    58,W
0C16:  MOVWF  5A
0C17:  INCF   5A,W
0C18:  BCF    0A.3
0C19:  CALL   26F
0C1A:  BSF    0A.3
0C1B:  MOVWF  7A
0C1C:  MOVF   5A,W
0C1D:  BCF    0A.3
0C1E:  CALL   26F
0C1F:  BSF    0A.3
0C20:  MOVWF  4F
0C21:  MOVF   7A,W
0C22:  MOVWF  50
0C23:  GOTO   442
.................... 			else 
.................... 			{ 
.................... 				rgb_bits.blue = year_2014[ycount]; 
0C24:  BCF    03.0
0C25:  RLF    58,W
0C26:  MOVWF  5A
0C27:  INCF   5A,W
0C28:  BCF    0A.3
0C29:  CALL   26F
0C2A:  BSF    0A.3
0C2B:  MOVWF  7A
0C2C:  MOVF   5A,W
0C2D:  BCF    0A.3
0C2E:  CALL   26F
0C2F:  BSF    0A.3
0C30:  MOVWF  4F
0C31:  MOVF   7A,W
0C32:  MOVWF  50
.................... 				rgb_bits.green = year_2014[ycount]; 
0C33:  BCF    03.0
0C34:  RLF    58,W
0C35:  MOVWF  5A
0C36:  INCF   5A,W
0C37:  BCF    0A.3
0C38:  CALL   26F
0C39:  BSF    0A.3
0C3A:  MOVWF  7A
0C3B:  MOVF   5A,W
0C3C:  BCF    0A.3
0C3D:  CALL   26F
0C3E:  BSF    0A.3
0C3F:  MOVWF  53
0C40:  MOVF   7A,W
0C41:  MOVWF  54
.................... 			} 
.................... 		} 
.................... 	  	 
.................... 		//change text's position 
.................... 		pled_count++; 
0C42:  INCF   4B,F
0C43:  BTFSC  03.2
0C44:  INCF   4C,F
.................... 		if (pled_count > 120) 
0C45:  MOVF   4C,F
0C46:  BTFSS  03.2
0C47:  GOTO   44C
0C48:  MOVF   4B,W
0C49:  SUBLW  78
0C4A:  BTFSC  03.0
0C4B:  GOTO   450
.................... 		{ 
.................... 			pled_count = 0; 
0C4C:  CLRF   4C
0C4D:  CLRF   4B
.................... 			pled_position = pled_position + pled_direction; 
0C4E:  MOVF   4A,W
0C4F:  ADDWF  49,F
.................... 		} 
.................... 		if (pled_position == 0) pled_position = 60; 
0C50:  MOVF   49,F
0C51:  BTFSS  03.2
0C52:  GOTO   456
0C53:  MOVLW  3C
0C54:  MOVWF  49
0C55:  GOTO   45C
.................... 		else if (pled_position == 61) pled_position = 1; 
0C56:  MOVF   49,W
0C57:  SUBLW  3D
0C58:  BTFSS  03.2
0C59:  GOTO   45C
0C5A:  MOVLW  01
0C5B:  MOVWF  49
.................... 	} 
0C5C:  BCF    0A.3
0C5D:  BSF    0A.4
0C5E:  GOTO   602 (RETURN)
.................... } 
....................  
....................  
.................... #PRIORITY INT_CCP1, INT_TIMER0, INT_EXT, INT_RB 
....................  
.................... #INT_EXT 
.................... void EXT_isr(){ 
.................... 	tick += 1; 
*
0291:  MOVLW  01
0292:  ADDWF  3E,F
.................... 	sec++; 
0293:  INCF   3D,F
.................... } 
....................  
0294:  BCF    0B.1
0295:  BCF    0A.3
0296:  BCF    0A.4
0297:  GOTO   037
.................... #INT_RB 
.................... void  RB_isr(void)  
.................... { 
....................    BYTE changes; 
....................    port_b = input_b(); 
0298:  MOVLW  FF
0299:  BSF    03.5
029A:  MOVWF  06
029B:  BCF    03.5
029C:  MOVF   06,W
029D:  MOVWF  33
....................    changes = last_b ^ port_b; 
029E:  MOVF   34,W
029F:  XORWF  33,W
02A0:  MOVWF  71
....................    last_b = port_b; 
02A1:  MOVF   33,W
02A2:  MOVWF  34
....................    if(bit_test(changes, 2)) 
02A3:  BTFSS  71.2
02A4:  GOTO   2A8
....................    { 
....................       mode = MODE_A; 
02A5:  MOVLW  02
02A6:  MOVWF  35
....................       smode = 0; 
02A7:  CLRF   36
....................    } 
....................    if(bit_test(changes, 3)) 
02A8:  BTFSS  71.3
02A9:  GOTO   2AD
....................    { 
....................       mode = MODE_B; 
02AA:  MOVLW  03
02AB:  MOVWF  35
....................       smode = 0; 
02AC:  CLRF   36
....................    } 
....................    if(bit_test(changes, 4)) 
02AD:  BTFSS  71.4
02AE:  GOTO   2BA
....................    { 
....................       mode = MODE_C; 
02AF:  MOVLW  04
02B0:  MOVWF  35
....................       if (smode == 1) 
02B1:  DECFSZ 36,W
02B2:  GOTO   2B5
....................       	smode = 0; 
02B3:  CLRF   36
02B4:  GOTO   2BA
....................       else if (smode == 0) 
02B5:  MOVF   36,F
02B6:  BTFSS  03.2
02B7:  GOTO   2BA
....................       	smode = 1; 
02B8:  MOVLW  01
02B9:  MOVWF  36
....................    } 
....................    if(bit_test(changes, 5)) 
02BA:  BTFSS  71.5
02BB:  GOTO   2CF
....................    { 
....................       mode = MODE_D; 
02BC:  MOVLW  05
02BD:  MOVWF  35
....................       smode = 0; 
02BE:  CLRF   36
....................       if (pled_direction == 1) 
02BF:  DECFSZ 4A,W
02C0:  GOTO   2C4
....................       	pled_direction = -1; 
02C1:  MOVLW  FF
02C2:  MOVWF  4A
02C3:  GOTO   2CF
....................       else if (pled_direction == -1) 
02C4:  MOVF   4A,W
02C5:  SUBLW  FF
02C6:  BTFSS  03.2
02C7:  GOTO   2CA
....................       	pled_direction = 0; 
02C8:  CLRF   4A
02C9:  GOTO   2CF
....................       else if (pled_direction == 0) 
02CA:  MOVF   4A,F
02CB:  BTFSS  03.2
02CC:  GOTO   2CF
....................       	pled_direction = 1; 
02CD:  MOVLW  01
02CE:  MOVWF  4A
....................    } 
.................... } 
....................  
02CF:  BCF    0B.0
02D0:  BCF    0A.3
02D1:  BCF    0A.4
02D2:  GOTO   037
.................... #INT_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................    rc = getc(); 
02D3:  BTFSS  0C.5
02D4:  GOTO   2D3
02D5:  MOVF   1A,W
02D6:  MOVWF  4D
....................    switch (rs232_status) 
02D7:  MOVF   4E,W
02D8:  BTFSC  03.2
02D9:  GOTO   2F9
02DA:  XORLW  01
02DB:  BTFSC  03.2
02DC:  GOTO   300
02DD:  XORLW  03
02DE:  BTFSC  03.2
02DF:  GOTO   307
02E0:  XORLW  01
02E1:  BTFSC  03.2
02E2:  GOTO   30C
02E3:  XORLW  07
02E4:  BTFSC  03.2
02E5:  GOTO   311
02E6:  XORLW  01
02E7:  BTFSC  03.2
02E8:  GOTO   316
02E9:  XORLW  03
02EA:  BTFSC  03.2
02EB:  GOTO   31B
02EC:  XORLW  01
02ED:  BTFSC  03.2
02EE:  GOTO   320
02EF:  XORLW  0F
02F0:  BTFSC  03.2
02F1:  GOTO   325
02F2:  XORLW  01
02F3:  BTFSC  03.2
02F4:  GOTO   32A
02F5:  XORLW  03
02F6:  BTFSC  03.2
02F7:  GOTO   331
02F8:  GOTO   338
....................    { 
....................    	case 0: 
....................    		if (rc == 83) rs232_status = 1; 
02F9:  MOVF   4D,W
02FA:  SUBLW  53
02FB:  BTFSS  03.2
02FC:  GOTO   2FF
02FD:  MOVLW  01
02FE:  MOVWF  4E
....................    		break; 
02FF:  GOTO   339
....................    	case 1: 
....................    		if (rc == 84) rs232_status = 2; 
0300:  MOVF   4D,W
0301:  SUBLW  54
0302:  BTFSS  03.2
0303:  GOTO   306
0304:  MOVLW  02
0305:  MOVWF  4E
....................    		break; 
0306:  GOTO   339
....................    	case 2: 
....................    		day = rc; 
0307:  MOVF   4D,W
0308:  MOVWF  37
....................    		rs232_status = 3; 
0309:  MOVLW  03
030A:  MOVWF  4E
....................    		break; 
030B:  GOTO   339
....................    	case 3: 
....................    		month = rc; 
030C:  MOVF   4D,W
030D:  MOVWF  38
....................    		rs232_status = 4; 
030E:  MOVLW  04
030F:  MOVWF  4E
....................    		break; 
0310:  GOTO   339
....................    	case 4: 
....................    		year = rc; 
0311:  MOVF   4D,W
0312:  MOVWF  39
....................    		rs232_status = 5; 
0313:  MOVLW  05
0314:  MOVWF  4E
....................    		break; 
0315:  GOTO   339
....................    	case 5: 
....................    		dow = rc; 
0316:  MOVF   4D,W
0317:  MOVWF  3A
....................    		rs232_status = 6; 
0318:  MOVLW  06
0319:  MOVWF  4E
....................    		break; 
031A:  GOTO   339
....................    	case 6: 
....................    		hour = rc; 
031B:  MOVF   4D,W
031C:  MOVWF  3B
....................    		rs232_status = 7; 
031D:  MOVLW  07
031E:  MOVWF  4E
....................    		break; 
031F:  GOTO   339
....................    	case 7: 
....................    		min = rc; 
0320:  MOVF   4D,W
0321:  MOVWF  3C
....................    		rs232_status = 8; 
0322:  MOVLW  08
0323:  MOVWF  4E
....................    		break; 
0324:  GOTO   339
....................    	case 8: 
....................    		sec = rc; 
0325:  MOVF   4D,W
0326:  MOVWF  3D
....................    		rs232_status = 9; 
0327:  MOVLW  09
0328:  MOVWF  4E
....................    		break; 
0329:  GOTO   339
....................    	case 9: 
....................    		if (rc == 69) rs232_status = 10; 
032A:  MOVF   4D,W
032B:  SUBLW  45
032C:  BTFSS  03.2
032D:  GOTO   330
032E:  MOVLW  0A
032F:  MOVWF  4E
....................    		break; 
0330:  GOTO   339
....................    	case 10: 
....................    		if (rc == 68) rs232_status = 11; 
0331:  MOVF   4D,W
0332:  SUBLW  44
0333:  BTFSS  03.2
0334:  GOTO   337
0335:  MOVLW  0B
0336:  MOVWF  4E
....................    		break; 
0337:  GOTO   339
....................    	default: 
....................    		//rs232_status = 0; 
....................    		break; 
0338:  GOTO   339
....................    } 
.................... } 
....................  
0339:  BCF    0C.5
033A:  BCF    0A.3
033B:  BCF    0A.4
033C:  GOTO   037
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    timer1_overflow++; 
033D:  INCF   28,F
.................... } 
....................  
033E:  BCF    0C.0
033F:  BCF    0A.3
0340:  BCF    0A.4
0341:  GOTO   037
.................... #INT_CCP1 
.................... void  CCP1_isr(void)  
.................... { 
....................    sigHall_timer = ((int32)timer1_overflow * 0xFFFF + CCP_1); 
0342:  CLRF   74
0343:  CLRF   73
0344:  CLRF   72
0345:  MOVF   28,W
0346:  MOVWF  71
0347:  MOVF   74,W
0348:  BSF    03.5
0349:  MOVWF  23
034A:  MOVF   73,W
034B:  MOVWF  22
034C:  MOVF   72,W
034D:  MOVWF  21
034E:  MOVF   71,W
034F:  MOVWF  20
0350:  CLRF   27
0351:  CLRF   26
0352:  MOVLW  FF
0353:  MOVWF  25
0354:  MOVLW  FF
0355:  MOVWF  24
0356:  BCF    03.5
*
038A:  MOVF   7A,W
038B:  MOVWF  74
038C:  MOVF   79,W
038D:  MOVWF  73
038E:  MOVF   78,W
038F:  MOVWF  72
0390:  MOVF   77,W
0391:  MOVWF  71
0392:  MOVF   15,W
0393:  ADDWF  71,W
0394:  MOVWF  29
0395:  MOVF   72,W
0396:  MOVWF  2A
0397:  MOVF   16,W
0398:  BTFSC  03.0
0399:  INCFSZ 16,W
039A:  ADDWF  2A,F
039B:  MOVF   73,W
039C:  MOVWF  2B
039D:  MOVLW  00
039E:  BTFSC  03.0
039F:  MOVLW  01
03A0:  ADDWF  2B,F
03A1:  MOVF   74,W
03A2:  MOVWF  2C
03A3:  MOVLW  00
03A4:  BTFSC  03.0
03A5:  MOVLW  01
03A6:  ADDWF  2C,F
....................    timer1_overflow = 0; 
03A7:  CLRF   28
....................    set_timer1(0); 
03A8:  CLRF   0E
03A9:  CLRF   0F
03AA:  CLRF   0E
....................    circle_trigger = 1; 
03AB:  MOVLW  01
03AC:  MOVWF  2D
.................... } 
....................  
03AD:  BCF    0C.2
03AE:  BCF    0A.3
03AF:  BCF    0A.4
03B0:  GOTO   037
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    section_trigger = 1; 
03B1:  MOVLW  01
03B2:  MOVWF  2E
03B3:  BCF    0B.2
03B4:  BCF    0A.3
03B5:  BCF    0A.4
03B6:  GOTO   037
.................... } 
....................  
.................... void var_init() 
.................... { 
....................    timer1_overflow = 0; 
03B7:  CLRF   28
....................    sigHall_timer = 0; 
03B8:  CLRF   2C
03B9:  CLRF   2B
03BA:  CLRF   2A
03BB:  CLRF   29
....................    circle_trigger = 0; 
03BC:  CLRF   2D
....................    port_b = 0x00; 
03BD:  CLRF   33
....................    last_b = port_b; 
03BE:  MOVF   33,W
03BF:  MOVWF  34
....................    tuning = 6; 
03C0:  MOVLW  06
03C1:  MOVWF  32
....................    mode = MODE_A; 
03C2:  MOVLW  02
03C3:  MOVWF  35
....................    smode = 0; 
03C4:  CLRF   36
....................    tick = 1; 
03C5:  MOVLW  01
03C6:  MOVWF  3E
....................    digit_sec = 0; 
03C7:  CLRF   3F
....................    pled_position = 31; 
03C8:  MOVLW  1F
03C9:  MOVWF  49
....................    pled_direction = 1; 
03CA:  MOVLW  01
03CB:  MOVWF  4A
....................    pled_count = 0; 
03CC:  CLRF   4C
03CD:  CLRF   4B
....................    rs232_status = 0; 
03CE:  CLRF   4E
03CF:  BCF    0A.3
03D0:  BSF    0A.4
03D1:  GOTO   022 (RETURN)
.................... } 
....................  
.................... void main() 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  BSF    03.5
1004:  BSF    03.6
1005:  BCF    07.3
1006:  MOVLW  40
1007:  BCF    03.6
1008:  MOVWF  19
1009:  MOVLW  E6
100A:  MOVWF  18
100B:  MOVLW  D0
100C:  BCF    03.5
100D:  MOVWF  18
100E:  MOVLW  FF
100F:  MOVWF  55
1010:  BSF    03.5
1011:  BSF    03.6
1012:  MOVF   09,W
1013:  ANDLW  C0
1014:  MOVWF  09
1015:  BCF    03.6
1016:  BCF    1F.4
1017:  BCF    1F.5
1018:  MOVLW  00
1019:  BSF    03.6
101A:  MOVWF  08
101B:  BCF    03.5
101C:  CLRF   07
101D:  CLRF   08
101E:  CLRF   09
101F:  BCF    03.6
.................... { 
.................... 	//initialize data 
....................    var_init(); 
1020:  BCF    0A.4
1021:  GOTO   3B7
1022:  BSF    0A.4
....................    //initialize timers and cp1 interrupt 
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_2);      //div 2 - 26.2 ms overflow 
1023:  MOVLW  15
1024:  MOVWF  10
.................... 	setup_ccp1(CCP_CAPTURE_FE); 
1025:  BSF    55.2
1026:  MOVF   55,W
1027:  BSF    03.5
1028:  MOVWF  07
1029:  BCF    03.5
102A:  CLRF   17
102B:  MOVLW  04
102C:  MOVWF  17
102D:  BSF    03.5
102E:  CLRF   1B
102F:  CLRF   1C
1030:  MOVLW  01
1031:  MOVWF  1D
....................    //with 819.2 us overflow for Timer0, motor's speed must be at least 20 RPS 
....................    setup_timer_0(T0_INTERNAL | T0_DIV_16); //div 16 - 819.2 us overflow 
1032:  MOVF   01,W
1033:  ANDLW  C0
1034:  IORLW  03
1035:  MOVWF  01
....................    //enable interrupts 
....................    enable_interrupts(INT_RB2|INT_RB3|INT_RB4|INT_RB5);; 
1036:  BCF    03.5
1037:  BSF    0B.3
1038:  MOVLW  3C
1039:  BSF    03.5
103A:  IORWF  16,F
....................    //enable_interrupts(INT_TBE); 
....................    //enable_interrupts(INT_RDA); 
....................    enable_interrupts(INT_EXT); 
103B:  BCF    03.5
103C:  BSF    0B.4
....................    enable_interrupts(INT_TIMER1); 
103D:  BSF    03.5
103E:  BSF    0C.0
....................    enable_interrupts(INT_CCP1); 
103F:  BSF    0C.2
....................    enable_interrupts(INT_TIMER0); 
1040:  BCF    03.5
1041:  BSF    0B.5
....................    enable_interrupts(INT_RDA); 
1042:  BSF    03.5
1043:  BSF    0C.5
.................... 	enable_interrupts(GLOBAL); 
1044:  MOVLW  C0
1045:  BCF    03.5
1046:  IORWF  0B,F
.................... 	//initialize clock 
....................    ds1307_init(); 
1047:  BCF    0A.4
1048:  GOTO   482
1049:  BSF    0A.4
....................   	 
.................... 	// power on notice 
.................... 	rgb_bits.blue =  0xF00F; 
104A:  MOVLW  F0
104B:  MOVWF  50
104C:  MOVLW  0F
104D:  MOVWF  4F
.................... 	rgb_bits.red =   0x0F0F; 
104E:  MOVLW  0F
104F:  MOVWF  52
1050:  MOVLW  0F
1051:  MOVWF  51
.................... 	rgb_bits.green = 0x00FF; 
1052:  CLRF   54
1053:  MOVLW  FF
1054:  MOVWF  53
.................... 	latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
1055:  MOVF   50,W
1056:  MOVWF  57
1057:  MOVF   4F,W
1058:  MOVWF  56
1059:  MOVF   52,W
105A:  MOVWF  59
105B:  MOVF   51,W
105C:  MOVWF  58
105D:  MOVF   54,W
105E:  MOVWF  5B
105F:  MOVF   53,W
1060:  MOVWF  5A
....................   	 
.................... 	//get the first values of date, time 
.................... 	ds1307_get_time(hour, min, sec); 
.................... 	ds1307_get_date(day, month, year, dow); 
.................... 	// calculating hour hand's position for analog clock 
....................    anal_hour = hour % 12; 
*
121C:  MOVF   3B,W
121D:  MOVWF  5A
121E:  MOVLW  0C
121F:  MOVWF  5B
1220:  BCF    0A.4
1221:  CALL   5A0
1222:  BSF    0A.4
1223:  MOVF   77,W
1224:  MOVWF  44
....................    anal_hour = anal_hour * 5; 
1225:  MOVF   44,W
1226:  MOVWF  5A
1227:  MOVLW  05
1228:  MOVWF  5B
1229:  BCF    0A.4
122A:  CALL   5B5
122B:  BSF    0A.4
122C:  MOVF   78,W
122D:  MOVWF  44
....................    anal_hour = anal_hour + (int8)(min / 12); 
122E:  MOVF   3C,W
122F:  MOVWF  5A
1230:  MOVLW  0C
1231:  MOVWF  5B
1232:  BCF    0A.4
1233:  CALL   5A0
1234:  BSF    0A.4
1235:  MOVF   78,W
1236:  ADDWF  44,F
....................    // calculating hour, minute, day, month numbers to display in digital clock 
....................    hour_h = (int8)(hour / 10); 
1237:  MOVF   3B,W
1238:  MOVWF  5A
1239:  MOVLW  0A
123A:  MOVWF  5B
123B:  BCF    0A.4
123C:  CALL   5A0
123D:  BSF    0A.4
123E:  MOVF   78,W
123F:  MOVWF  40
.................... 	hour_l = hour % 10; 
1240:  MOVF   3B,W
1241:  MOVWF  5A
1242:  MOVLW  0A
1243:  MOVWF  5B
1244:  BCF    0A.4
1245:  CALL   5A0
1246:  BSF    0A.4
1247:  MOVF   77,W
1248:  MOVWF  41
.................... 	min_h = (int8)(min / 10); 
1249:  MOVF   3C,W
124A:  MOVWF  5A
124B:  MOVLW  0A
124C:  MOVWF  5B
124D:  BCF    0A.4
124E:  CALL   5A0
124F:  BSF    0A.4
1250:  MOVF   78,W
1251:  MOVWF  42
.................... 	min_l = min % 10; 
1252:  MOVF   3C,W
1253:  MOVWF  5A
1254:  MOVLW  0A
1255:  MOVWF  5B
1256:  BCF    0A.4
1257:  CALL   5A0
1258:  BSF    0A.4
1259:  MOVF   77,W
125A:  MOVWF  43
.................... 	day_h = (int8)(day / 10); 
125B:  MOVF   37,W
125C:  MOVWF  5A
125D:  MOVLW  0A
125E:  MOVWF  5B
125F:  BCF    0A.4
1260:  CALL   5A0
1261:  BSF    0A.4
1262:  MOVF   78,W
1263:  MOVWF  45
.................... 	day_l = day % 10; 
1264:  MOVF   37,W
1265:  MOVWF  5A
1266:  MOVLW  0A
1267:  MOVWF  5B
1268:  BCF    0A.4
1269:  CALL   5A0
126A:  BSF    0A.4
126B:  MOVF   77,W
126C:  MOVWF  46
.................... 	month_h = (int8)(month / 10); 
126D:  MOVF   38,W
126E:  MOVWF  5A
126F:  MOVLW  0A
1270:  MOVWF  5B
1271:  BCF    0A.4
1272:  CALL   5A0
1273:  BSF    0A.4
1274:  MOVF   78,W
1275:  MOVWF  47
.................... 	month_l = month % 10; 
1276:  MOVF   38,W
1277:  MOVWF  5A
1278:  MOVLW  0A
1279:  MOVWF  5B
127A:  BCF    0A.4
127B:  CALL   5A0
127C:  BSF    0A.4
127D:  MOVF   77,W
127E:  MOVWF  48
....................    
....................    // main routine 
....................    while(true) 
....................    { 
....................    	// rs232 operation 
....................    	if (rs232_status == 11) 
127F:  MOVF   4E,W
1280:  SUBLW  0B
1281:  BTFSS  03.2
1282:  GOTO   356
....................    	{ 
....................    		latch_write(0x0000, 0x0FF0, 0x0000); 
1283:  CLRF   57
1284:  CLRF   56
1285:  MOVLW  0F
1286:  MOVWF  59
1287:  MOVLW  F0
1288:  MOVWF  58
1289:  CLRF   5B
128A:  CLRF   5A
....................    		rs232_status = 0; 
*
1306:  CLRF   4E
....................    	   ds1307_set_date_time(day, month, year, dow, hour, min, sec); 
1307:  MOVF   37,W
1308:  MOVWF  56
1309:  MOVF   38,W
130A:  MOVWF  57
130B:  MOVF   39,W
130C:  MOVWF  58
130D:  MOVF   3A,W
130E:  MOVWF  59
130F:  MOVF   3B,W
1310:  MOVWF  5A
1311:  MOVF   3C,W
1312:  MOVWF  5B
1313:  MOVF   3D,W
1314:  MOVWF  5C
1315:  BCF    0A.4
1316:  GOTO   69C
1317:  BSF    0A.4
....................    	   putc('O'); 
1318:  MOVLW  4F
1319:  MOVWF  56
131A:  BCF    0A.4
131B:  CALL   716
131C:  BSF    0A.4
....................    	   delay_ms(100); 
131D:  MOVLW  64
131E:  MOVWF  56
131F:  BCF    0A.4
1320:  CALL   72E
1321:  BSF    0A.4
....................    	   putc('K'); 
1322:  MOVLW  4B
1323:  MOVWF  56
1324:  BCF    0A.4
1325:  CALL   716
1326:  BSF    0A.4
....................    	   delay_ms(100); 
1327:  MOVLW  64
1328:  MOVWF  56
1329:  BCF    0A.4
132A:  CALL   72E
132B:  BSF    0A.4
.................... 		   latch_ClearAll(); 
....................    	} 
....................    	// get the time value from ds1307 after each 5 minutes 
.................... 		if(tick == 300) 
*
1356:  MOVF   3E,W
1357:  SUBLW  2C
1358:  BTFSS  03.2
1359:  GOTO   4B7
.................... 		{ 
.................... 			ds1307_get_time(hour, min, sec); 
.................... 			ds1307_get_date(day, month, year, dow); 
.................... 		   anal_hour = hour % 12; 
*
149A:  MOVF   3B,W
149B:  MOVWF  5A
149C:  MOVLW  0C
149D:  MOVWF  5B
149E:  BCF    0A.4
149F:  CALL   5A0
14A0:  BSF    0A.4
14A1:  MOVF   77,W
14A2:  MOVWF  44
.................... 			anal_hour = anal_hour * 5; 
14A3:  MOVF   44,W
14A4:  MOVWF  5A
14A5:  MOVLW  05
14A6:  MOVWF  5B
14A7:  BCF    0A.4
14A8:  CALL   5B5
14A9:  BSF    0A.4
14AA:  MOVF   78,W
14AB:  MOVWF  44
.................... 			anal_hour = anal_hour + (int8)(min / 12); 
14AC:  MOVF   3C,W
14AD:  MOVWF  5A
14AE:  MOVLW  0C
14AF:  MOVWF  5B
14B0:  BCF    0A.4
14B1:  CALL   5A0
14B2:  BSF    0A.4
14B3:  MOVF   78,W
14B4:  ADDWF  44,F
.................... 		   tick = 1; 
14B5:  MOVLW  01
14B6:  MOVWF  3E
.................... 		} 
.................... 		// change values of minute and hour at appropriate value of second and minute 
.................... 		if(sec > 59) 
14B7:  MOVF   3D,W
14B8:  SUBLW  3B
14B9:  BTFSC  03.0
14BA:  GOTO   59A
.................... 		{ 
.................... 			sec = 0; 
14BB:  CLRF   3D
.................... 			min++; 
14BC:  INCF   3C,F
.................... 			if(min > 59) 
14BD:  MOVF   3C,W
14BE:  SUBLW  3B
14BF:  BTFSC  03.0
14C0:  GOTO   576
.................... 			{ 
.................... 				min = 0; 
14C1:  CLRF   3C
.................... 				ds1307_get_time(hour, min, sec); 
.................... 				anal_hour = hour % 12; 
*
155B:  MOVF   3B,W
155C:  MOVWF  5A
155D:  MOVLW  0C
155E:  MOVWF  5B
155F:  BCF    0A.4
1560:  CALL   5A0
1561:  BSF    0A.4
1562:  MOVF   77,W
1563:  MOVWF  44
.................... 			   anal_hour = anal_hour * 5; 
1564:  MOVF   44,W
1565:  MOVWF  5A
1566:  MOVLW  05
1567:  MOVWF  5B
1568:  BCF    0A.4
1569:  CALL   5B5
156A:  BSF    0A.4
156B:  MOVF   78,W
156C:  MOVWF  44
.................... 			   anal_hour = anal_hour + (int8)(min / 12); 
156D:  MOVF   3C,W
156E:  MOVWF  5A
156F:  MOVLW  0C
1570:  MOVWF  5B
1571:  BCF    0A.4
1572:  CALL   5A0
1573:  BSF    0A.4
1574:  MOVF   78,W
1575:  ADDWF  44,F
.................... 			} 
.................... 			//refresh value for digital clock after each minute 
.................... 			hour_h = (int8)(hour / 10); 
1576:  MOVF   3B,W
1577:  MOVWF  5A
1578:  MOVLW  0A
1579:  MOVWF  5B
157A:  BCF    0A.4
157B:  CALL   5A0
157C:  BSF    0A.4
157D:  MOVF   78,W
157E:  MOVWF  40
.................... 			hour_l = hour % 10; 
157F:  MOVF   3B,W
1580:  MOVWF  5A
1581:  MOVLW  0A
1582:  MOVWF  5B
1583:  BCF    0A.4
1584:  CALL   5A0
1585:  BSF    0A.4
1586:  MOVF   77,W
1587:  MOVWF  41
.................... 			min_h = (int8)(min / 10); 
1588:  MOVF   3C,W
1589:  MOVWF  5A
158A:  MOVLW  0A
158B:  MOVWF  5B
158C:  BCF    0A.4
158D:  CALL   5A0
158E:  BSF    0A.4
158F:  MOVF   78,W
1590:  MOVWF  42
.................... 			min_l = min % 10; 
1591:  MOVF   3C,W
1592:  MOVWF  5A
1593:  MOVLW  0A
1594:  MOVWF  5B
1595:  BCF    0A.4
1596:  CALL   5A0
1597:  BSF    0A.4
1598:  MOVF   77,W
1599:  MOVWF  43
.................... 		} 
.................... 		//display routine 
.................... 		if(circle_trigger == 1) 
159A:  DECFSZ 2D,W
159B:  GOTO   6BE
.................... 		{   
.................... 			circle_trigger = 0; 
159C:  CLRF   2D
.................... 			latch_ClearAll(); 
.................... 			digit_sec++; 
*
15C7:  INCF   3F,F
.................... 			section_trigger = 1; 
15C8:  MOVLW  01
15C9:  MOVWF  2E
.................... 			section_count = MAX_SECTION; 
15CA:  MOVLW  3C
15CB:  MOVWF  2F
.................... 			section_timer = 256 - (int8)(sigHall_timer / (MAX_SECTION * 8)) + tuning; 
15CC:  BCF    03.1
15CD:  MOVF   2C,W
15CE:  MOVWF  59
15CF:  MOVF   2B,W
15D0:  MOVWF  58
15D1:  MOVF   2A,W
15D2:  MOVWF  57
15D3:  MOVF   29,W
15D4:  MOVWF  56
15D5:  CLRF   5D
15D6:  CLRF   5C
15D7:  MOVLW  01
15D8:  MOVWF  5B
15D9:  MOVLW  E0
15DA:  MOVWF  5A
15DB:  BCF    0A.4
15DC:  GOTO   742
15DD:  BSF    0A.4
15DE:  MOVF   77,W
15DF:  SUBLW  00
15E0:  MOVWF  56
15E1:  MOVLW  01
15E2:  MOVWF  57
15E3:  MOVLW  00
15E4:  BTFSS  03.0
15E5:  MOVLW  01
15E6:  SUBWF  57,F
15E7:  CLRF   7A
15E8:  MOVF   32,W
15E9:  MOVWF  77
15EA:  BTFSC  77.7
15EB:  DECF   7A,F
15EC:  ADDWF  56,W
15ED:  MOVWF  30
15EE:  MOVF   57,W
15EF:  MOVWF  31
15F0:  MOVF   7A,W
15F1:  BTFSC  03.0
15F2:  INCFSZ 7A,W
15F3:  ADDWF  31,F
.................... 			while(circle_trigger == 0 && section_count > 0) 
15F4:  MOVF   2D,F
15F5:  BTFSS  03.2
15F6:  GOTO   6BE
15F7:  MOVF   2F,F
15F8:  BTFSC  03.2
15F9:  GOTO   6BE
.................... 			{ 	 
.................... 				if(section_trigger == 1) 
15FA:  DECFSZ 2E,W
15FB:  GOTO   6BD
.................... 				{ 
.................... 					set_timer0(section_timer); 
15FC:  MOVF   30,W
15FD:  MOVWF  01
.................... 					section_trigger = 0; 
15FE:  CLRF   2E
.................... 					fetch_data(); 
15FF:  BCF    0A.4
1600:  BSF    0A.3
1601:  GOTO   000
1602:  BSF    0A.4
1603:  BCF    0A.3
.................... 					latch_write(rgb_bits.blue, rgb_bits.red, rgb_bits.green); 
1604:  MOVF   50,W
1605:  MOVWF  57
1606:  MOVF   4F,W
1607:  MOVWF  56
1608:  MOVF   52,W
1609:  MOVWF  59
160A:  MOVF   51,W
160B:  MOVWF  58
160C:  MOVF   54,W
160D:  MOVWF  5B
160E:  MOVF   53,W
160F:  MOVWF  5A
.................... 					if (smode == 0 && section_count > 1) latch_ClearAll(); 
*
168B:  MOVF   36,F
168C:  BTFSS  03.2
168D:  GOTO   6BC
168E:  MOVF   2F,W
168F:  SUBLW  01
1690:  BTFSC  03.0
1691:  GOTO   6BC
.................... 					section_count--; 
*
16BC:  DECF   2F,F
.................... 				} 
16BD:  GOTO   5F4
.................... 			} 
.................... 		}// circle_trigger 
16BE:  GOTO   27F
....................    } // end of while(true) 
.................... } 
....................  
16BF:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
